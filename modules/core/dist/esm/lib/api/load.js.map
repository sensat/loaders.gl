{"version":3,"file":"load.js","names":["isBlob","isLoaderObject","getFetchFunction","parse","load","url","loaders","options","context","resolvedLoaders","resolvedOptions","Array","isArray","undefined","fetch","data"],"sources":["../../../../src/lib/api/load.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {DataType, Loader, LoaderContext, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {LoaderOptionsType, LoaderReturnType} from '@loaders.gl/loader-utils';\nimport {isBlob} from '../../javascript-utils/is-type';\nimport {isLoaderObject} from '../loader-utils/normalize-loader';\nimport {getFetchFunction} from '../loader-utils/get-fetch-function';\n\nimport {parse} from './parse';\n\n/**\n * Parses `data` using a specified loader\n * Note: Load does duplicate a lot of parse.\n * it can also call fetchFile on string urls, which `parse` won't do.\n * @param data\n * @param loaders\n * @param options\n * @param context\n */\n\nexport async function load<LoaderT extends Loader>(\n  url: string | DataType,\n  loader: LoaderT,\n  options?: LoaderOptionsType<LoaderT>,\n  context?: LoaderContext\n): Promise<LoaderReturnType<LoaderT>>;\n\nexport async function load<\n  LoaderT extends Loader, // eslint-disable-line  @typescript-eslint/no-unused-vars\n  LoaderOptionsT extends LoaderOptions = LoaderOptions\n>(\n  url: string | DataType,\n  loaders: Loader[] | LoaderOptions,\n  options?: LoaderOptionsT,\n  context?: LoaderContext\n): Promise<any>;\n\n// implementation signature\nexport async function load<LoaderOptionsT extends LoaderOptions>(\n  url: string | DataType,\n  loaders?: Loader[] | LoaderOptions,\n  options?: LoaderOptionsT,\n  context?: LoaderContext\n): Promise<any> {\n  let resolvedLoaders: Loader | Loader[];\n  let resolvedOptions: LoaderOptionsT | undefined;\n\n  // Signature: load(url, options)\n  if (!Array.isArray(loaders) && !isLoaderObject(loaders)) {\n    resolvedLoaders = [];\n    resolvedOptions = loaders as LoaderOptionsT;\n    context = undefined; // context not supported in short signature\n  } else {\n    resolvedLoaders = loaders as Loader | Loader[];\n    resolvedOptions = options;\n  }\n\n  // Select fetch function\n  const fetch = getFetchFunction(resolvedOptions);\n\n  // at this point, `url` could be already loaded binary data\n  let data = url;\n  // url is a string, fetch the url\n  if (typeof url === 'string') {\n    data = await fetch(url);\n    // URL is Blob or File, fetchFile handles it (alt: we could generate ObjectURL here)\n  }\n\n  if (isBlob(url)) {\n    // The fetch response object will contain blob.name\n    // @ts-expect-error TODO - This may not work for overridden fetch functions\n    data = await fetch(url);\n  }\n\n  // Data is loaded (at least we have a `Response` object) so time to hand over to `parse`\n  // return await parse(data, loaders as Loader[], options);\n  return Array.isArray(resolvedLoaders)\n    ? await parse(data, resolvedLoaders, resolvedOptions) // loader array overload\n    : await parse(data, resolvedLoaders, resolvedOptions); // single loader overload\n}\n"],"mappings":"AAIA,SAAQA,MAAM,QAAO,gCAAgC;AACrD,SAAQC,cAAc,QAAO,kCAAkC;AAC/D,SAAQC,gBAAgB,QAAO,oCAAoC;AAEnE,SAAQC,KAAK,QAAO,SAAS;AA8B7B,OAAO,eAAeC,IAAIA,CACxBC,GAAsB,EACtBC,OAAkC,EAClCC,OAAwB,EACxBC,OAAuB,EACT;EACd,IAAIC,eAAkC;EACtC,IAAIC,eAA2C;EAG/C,IAAI,CAACC,KAAK,CAACC,OAAO,CAACN,OAAO,CAAC,IAAI,CAACL,cAAc,CAACK,OAAO,CAAC,EAAE;IACvDG,eAAe,GAAG,EAAE;IACpBC,eAAe,GAAGJ,OAAyB;IAC3CE,OAAO,GAAGK,SAAS;EACrB,CAAC,MAAM;IACLJ,eAAe,GAAGH,OAA4B;IAC9CI,eAAe,GAAGH,OAAO;EAC3B;EAGA,MAAMO,KAAK,GAAGZ,gBAAgB,CAACQ,eAAe,CAAC;EAG/C,IAAIK,IAAI,GAAGV,GAAG;EAEd,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3BU,IAAI,GAAG,MAAMD,KAAK,CAACT,GAAG,CAAC;EAEzB;EAEA,IAAIL,MAAM,CAACK,GAAG,CAAC,EAAE;IAGfU,IAAI,GAAG,MAAMD,KAAK,CAACT,GAAG,CAAC;EACzB;EAIA,OAAOM,KAAK,CAACC,OAAO,CAACH,eAAe,CAAC,GACjC,MAAMN,KAAK,CAACY,IAAI,EAAEN,eAAe,EAAEC,eAAe,CAAC,GACnD,MAAMP,KAAK,CAACY,IAAI,EAAEN,eAAe,EAAEC,eAAe,CAAC;AACzD"}