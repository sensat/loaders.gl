{"version":3,"file":"encode-table.js","names":["_loaderUtils","require","_asyncIterator","iterable","method","async","sync","retry","Symbol","asyncIterator","iterator","call","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Object","Promise","reject","done","resolve","value","then","n","next","prototype","apply","arguments","return","_return","ret","throw","_throw","thr","encodeTable","_x","_x2","_x3","_encodeTable","_asyncToGenerator2","default","_regenerator","mark","_callee","data","writer","options","text","batches","chunks","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","batch","wrap","_callee$","_context","prev","encode","abrupt","sent","encodeText","TextEncoder","encodeInBatches","encodeTableInBatches","push","t0","finish","concatenateArrayBuffers","Error","stop","encodeTableAsText","_x4","_x5","_x6","_encodeTableAsText","_callee2","arrayBuffer","_callee2$","_context2","TextDecoder","decode","dataIterator","getIterator","table","start","end","length"],"sources":["../../../../src/lib/api/encode-table.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Copyright 2022 Foursquare Labs, Inc\n\n/* global TextEncoder, TextDecoder */\nimport {concatenateArrayBuffers, Writer, WriterOptionsType} from '@loaders.gl/loader-utils';\nimport {Table} from '@loaders.gl/schema';\n\nexport async function encodeTable<WriterT extends Writer = Writer>(\n  data: Table,\n  writer: WriterT,\n  options?: WriterOptionsType<WriterT>\n): Promise<ArrayBuffer> {\n  if (writer.encode) {\n    return await writer.encode(data, options);\n  }\n\n  if (writer.encodeText) {\n    const text = await writer.encodeText(data, options);\n    return new TextEncoder().encode(text);\n  }\n\n  if (writer.encodeInBatches) {\n    // Create an iterator representing the data\n    // TODO - Assumes this is a table\n    const batches = encodeTableInBatches(data, writer, options);\n\n    // Concatenate the output\n    const chunks: ArrayBuffer[] = [];\n    for await (const batch of batches) {\n      chunks.push(batch);\n    }\n    return concatenateArrayBuffers(...chunks);\n  }\n\n  throw new Error('Writer could not encode data');\n}\n\nexport async function encodeTableAsText<WriterT extends Writer = Writer>(\n  data: Table,\n  writer: WriterT,\n  options?: WriterOptionsType<WriterT>\n): Promise<string> {\n  if (writer.text && writer.encodeText) {\n    return await writer.encodeText(data, options);\n  }\n\n  if (writer.text && (writer.encode || writer.encodeInBatches)) {\n    const arrayBuffer = await encodeTable(data, writer, options);\n    return new TextDecoder().decode(arrayBuffer);\n  }\n  throw new Error('Writer could not encode data as text');\n}\n\nexport function encodeTableInBatches<WriterT extends Writer = Writer>(\n  data: Table,\n  writer: WriterT,\n  options?: WriterOptionsType<WriterT>\n): AsyncIterable<ArrayBuffer> {\n  if (writer.encodeInBatches) {\n    const dataIterator = getIterator(data);\n    // @ts-expect-error\n    return writer.encodeInBatches(dataIterator, options);\n  }\n  // TODO -fall back to atomic encode?\n  throw new Error('Writer could not encode data in batches');\n}\n\nfunction getIterator(data) {\n  const dataIterator = [{table: data, start: 0, end: data.length}];\n  return dataIterator;\n}\n"],"mappings":"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"}