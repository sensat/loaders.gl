{"version":3,"file":"load-ome-tiff.js","names":["_tiffPixelSource","_interopRequireDefault","require","_omeIndexers","_omeUtils","_omexml","isOmeTiff","img","fileDirectory","ImageDescription","includes","exports","loadOmeTiff","_x","_x2","_loadOmeTiff","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","tiff","firstImage","_firstImage$fileDirec","SubIFDs","photometricInterpretation","omexml","levels","pyramidIndexer","imgMeta","_getOmePixelSourceMet","labels","getShape","physicalSizes","dtype","tileSize","meta","data","wrap","_callee$","_context","prev","next","PhotometricInterpretation","fromString","length","getOmeSubIFDIndexer","getOmeLegacyIndexer","getOmePixelSourceMeta","getTileWidth","Array","from","map","_","resolution","shape","indexer","sel","source","TiffPixelSource","abrupt","metadata","stop"],"sources":["../../../../src/lib/ome/load-ome-tiff.ts"],"sourcesContent":["import type {GeoTIFF, GeoTIFFImage} from 'geotiff';\n\nimport TiffPixelSource from '../tiff-pixel-source';\nimport {getOmeLegacyIndexer, getOmeSubIFDIndexer, OmeTiffIndexer} from './ome-indexers';\nimport {getOmePixelSourceMeta} from './ome-utils';\nimport {fromString} from './omexml';\nimport type {OmeTiffSelection} from './ome-indexers';\n\nexport const isOmeTiff = (img: GeoTIFFImage) => img.fileDirectory.ImageDescription.includes('<OME');\n\nexport async function loadOmeTiff(tiff: GeoTIFF, firstImage: GeoTIFFImage) {\n  // Get first image from tiff and inspect OME-XML metadata\n  const {\n    ImageDescription,\n    SubIFDs,\n    PhotometricInterpretation: photometricInterpretation\n  } = firstImage.fileDirectory;\n  const omexml = fromString(ImageDescription);\n\n  /*\n   * Image pyramids are stored differently between versions of Bioformats.\n   * Thus we need a different indexer depending on which format we have.\n   */\n  let levels: number;\n  let pyramidIndexer: OmeTiffIndexer;\n\n  if (SubIFDs) {\n    // Image is >= Bioformats 6.0 and resolutions are stored using SubIFDs.\n    levels = SubIFDs.length + 1;\n    pyramidIndexer = getOmeSubIFDIndexer(tiff, omexml);\n  } else {\n    // Image is legacy format; resolutions are stored as separate images.\n    levels = omexml.length;\n    pyramidIndexer = getOmeLegacyIndexer(tiff, omexml);\n  }\n\n  // TODO: The OmeTIFF loader only works for the _first_ image in the metadata.\n  const imgMeta = omexml[0];\n  const {labels, getShape, physicalSizes, dtype} = getOmePixelSourceMeta(imgMeta);\n  const tileSize = firstImage.getTileWidth();\n  const meta = {photometricInterpretation, physicalSizes};\n\n  const data = Array.from({length: levels}).map((_, resolution) => {\n    const shape = getShape(resolution);\n    const indexer = (sel: OmeTiffSelection) => pyramidIndexer(sel, resolution);\n    const source = new TiffPixelSource(indexer, dtype, tileSize, shape, labels, meta);\n    return source;\n  });\n\n  return {data, metadata: imgMeta};\n}\n"],"mappings":"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"}