{"version":3,"file":"ome-indexers.js","names":["getOmeLegacyIndexer","tiff","rootMeta","imgMeta","_imgMeta$Pixels","Pixels","SizeT","SizeC","SizeZ","ifdIndexer","getOmeIFDIndexer","sel","pyramidLevel","index","pyramidIndex","getImage","getOmeSubIFDIndexer","ifdCache","Map","_ref","_asyncToGenerator2","default","_regenerator","mark","_callee","baseImage","SubIFDs","key","subIfdOffset","ifd","wrap","_callee$","_context","prev","next","sent","abrupt","fileDirectory","Error","concat","t","c","z","has","set","parseFileDirectoryAt","get","constructor","geoKeyDirectory","dataView","littleEndian","cache","source","stop","_x","_x2","apply","arguments","_imgMeta$Pixels2","DimensionOrder","_ref2","_ref3","_ref4","_ref5","_ref6","_ref7"],"sources":["../../../../src/lib/ome/ome-indexers.ts"],"sourcesContent":["import type {GeoTIFFImage, GeoTIFF, ImageFileDirectory} from 'geotiff';\nimport type {OMEXML} from '../ome/omexml';\n\nexport type OmeTiffSelection = {t: number; c: number; z: number};\nexport type OmeTiffIndexer = (sel: OmeTiffSelection, z: number) => Promise<GeoTIFFImage>;\n\n/*\n * An \"indexer\" for a GeoTIFF-based source is a function that takes a\n * \"selection\" (e.g. { z, t, c }) and returns a Promise for the GeoTIFFImage\n * object corresponding to that selection.\n *\n * For OME-TIFF images, the \"selection\" object is the same regardless of\n * the format version. However, modern version of Bioformats have a different\n * memory layout for pyramidal resolutions. Thus, we have two different \"indexers\"\n * depending on which format version is detected.\n *\n * TODO: We currently only support indexing the first image in the OME-TIFF with\n * our indexers. There can be multiple images in an OME-TIFF, so supporting these\n * images will require extending these indexers or creating new methods.\n */\n\n/*\n * Returns an indexer for legacy Bioformats images. This assumes that\n * downsampled resolutions are stored sequentially in the OME-TIFF.\n */\nexport function getOmeLegacyIndexer(tiff: GeoTIFF, rootMeta: OMEXML): OmeTiffIndexer {\n  const imgMeta = rootMeta[0];\n  const {SizeT, SizeC, SizeZ} = imgMeta.Pixels;\n  const ifdIndexer = getOmeIFDIndexer(imgMeta);\n\n  return (sel: OmeTiffSelection, pyramidLevel: number) => {\n    // Get IFD index at base pyramid level\n    const index = ifdIndexer(sel);\n    // Get index of first image at pyramidal level\n    const pyramidIndex = pyramidLevel * SizeZ * SizeT * SizeC;\n    // Return image at IFD index for pyramidal level\n    return tiff.getImage(index + pyramidIndex);\n  };\n}\n\n/*\n * Returns an indexer for modern Bioforamts images that store multiscale\n * resolutions using SubIFDs.\n *\n * The ifdIndexer returns the 'index' to the base resolution for a\n * particular 'selection'. The SubIFDs to the downsampled resolutions\n * of the 'selection' are stored within the `baseImage.fileDirectory`.\n * We use the SubIFDs to get the IFD for the corresponding sub-resolution.\n *\n * NOTE: This function create a custom IFD cache rather than mutating\n * `GeoTIFF.ifdRequests` with a random offset. The IFDs are cached in\n * an ES6 Map that maps a string key that identifies the selection uniquely\n * to the corresponding IFD.\n */\nexport function getOmeSubIFDIndexer(tiff: GeoTIFF, rootMeta: OMEXML): OmeTiffIndexer {\n  const imgMeta = rootMeta[0];\n  const ifdIndexer = getOmeIFDIndexer(imgMeta);\n  const ifdCache: Map<string, Promise<ImageFileDirectory>> = new Map();\n\n  return async (sel: OmeTiffSelection, pyramidLevel: number) => {\n    const index = ifdIndexer(sel);\n    const baseImage = await tiff.getImage(index);\n\n    // It's the highest resolution, no need to look up SubIFDs.\n    if (pyramidLevel === 0) {\n      return baseImage;\n    }\n\n    const {SubIFDs} = baseImage.fileDirectory;\n    if (!SubIFDs) {\n      throw Error('Indexing Error: OME-TIFF is missing SubIFDs.');\n    }\n\n    // Get IFD for the selection at the pyramidal level\n    const key = `${sel.t}-${sel.c}-${sel.z}-${pyramidLevel}`;\n    if (!ifdCache.has(key)) {\n      // Only create a new request if we don't have the key.\n      const subIfdOffset = SubIFDs[pyramidLevel - 1];\n      ifdCache.set(key, tiff.parseFileDirectoryAt(subIfdOffset));\n    }\n    const ifd = (await ifdCache.get(key)) as ImageFileDirectory;\n\n    // Create a new image object manually from IFD\n    // https://github.com/geotiffjs/geotiff.js/blob/8ef472f41b51d18074aece2300b6a8ad91a21ae1/src/geotiff.js#L447-L453\n    return new (baseImage.constructor as any)(\n      ifd.fileDirectory,\n      ifd.geoKeyDirectory,\n      tiff.dataView,\n      tiff.littleEndian,\n      tiff.cache,\n      tiff.source\n    ) as GeoTIFFImage;\n  };\n}\n\n/*\n * Returns a function that computes the image index based on the dimension\n * order and dimension sizes.\n */\nfunction getOmeIFDIndexer(imgMeta: OMEXML[0]): (sel: OmeTiffSelection) => number {\n  const {SizeC, SizeZ, SizeT, DimensionOrder} = imgMeta.Pixels;\n  switch (DimensionOrder) {\n    case 'XYZCT': {\n      return ({t, c, z}) => t * SizeZ * SizeC + c * SizeZ + z;\n    }\n    case 'XYZTC': {\n      return ({t, c, z}) => c * SizeZ * SizeT + t * SizeZ + z;\n    }\n    case 'XYCTZ': {\n      return ({t, c, z}) => z * SizeC * SizeT + t * SizeC + c;\n    }\n    case 'XYCZT': {\n      return ({t, c, z}) => t * SizeC * SizeZ + z * SizeC + c;\n    }\n    case 'XYTCZ': {\n      return ({t, c, z}) => z * SizeT * SizeC + c * SizeT + t;\n    }\n    case 'XYTZC': {\n      return ({t, c, z}) => c * SizeT * SizeZ + z * SizeT + t;\n    }\n    default: {\n      throw new Error(`Invalid OME-XML DimensionOrder, got ${DimensionOrder}.`);\n    }\n  }\n}\n"],"mappings":"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"}