{"version":3,"file":"Pool.js","names":["defaultPoolSize","_globalThis$navigator","globalThis","_globalThis$navigator2","navigator","hardwareConcurrency","Pool","size","arguments","length","undefined","_classCallCheck2","default","_defineProperty2","workers","idleWorkers","waitQueue","decoder","i","w","Worker","push","_createClass2","key","value","_decode","_asyncToGenerator2","_regenerator","mark","_callee","fileDirectory","buffer","_this","currentWorker","wrap","_callee$","_context","prev","next","waitForWorker","sent","abrupt","Promise","resolve","reject","onmessage","event","finishTask","data","onerror","error","postMessage","stop","decode","_x","_x2","apply","_waitForWorker","_callee2","idleWorker","waiter","promise","_callee2$","_context2","pop","_finishTask","_callee3","_callee3$","_context3","_x3","destroy","terminate","exports"],"sources":["../../../../src/lib/utils/Pool.ts"],"sourcesContent":["/** eslint-disable */\nimport type {FileDirectory} from 'geotiff';\n\n// import Worker from 'web-worker:./decoder.worker.ts';\n\n// https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency\n// We need to give a different way of getting this for safari, so 4 is probably a safe bet\n// for parallel processing in the meantime.  More can't really hurt since they'll just block\n// each other and not the UI thread, which is the real benefit.\nconst defaultPoolSize = globalThis?.navigator?.hardwareConcurrency ?? 4;\n\n/**\n * Pool for workers to decode chunks of the images.\n * This is a line-for-line copy of GeoTIFFs old implementation: https://github.com/geotiffjs/geotiff.js/blob/v1.0.0-beta.6/src/pool.js\n */\nexport default class Pool {\n  workers: Worker[];\n  idleWorkers: Worker[];\n  waitQueue: any[];\n  decoder: null;\n\n  /**\n   * @constructor\n   * @param {Number} size The size of the pool. Defaults to the number of CPUs\n   *                      available. When this parameter is `null` or 0, then the\n   *                      decoding will be done in the main thread.\n   */\n  constructor(size = defaultPoolSize) {\n    this.workers = [];\n    this.idleWorkers = [];\n    this.waitQueue = [];\n    this.decoder = null;\n\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < size; ++i) {\n      const w = new Worker('./decoder.worker');\n      this.workers.push(w);\n      this.idleWorkers.push(w);\n    }\n  }\n\n  /**\n   * Decode the given block of bytes with the set compression method.\n   * @param {ArrayBuffer} buffer the array buffer of bytes to decode.\n   * @returns {Promise.<ArrayBuffer>} the decoded result as a `Promise`\n   */\n  async decode(fileDirectory: FileDirectory, buffer: ArrayBuffer) {\n    const currentWorker = await this.waitForWorker();\n    return new Promise((resolve, reject) => {\n      currentWorker.onmessage = (event) => {\n        // this.workers.push(currentWorker);\n        // eslint-disable-next-line\n        this.finishTask(currentWorker);\n        resolve(event.data[0]);\n      };\n      currentWorker.onerror = (error) => {\n        // this.workers.push(currentWorker);\n        // eslint-disable-next-line\n        this.finishTask(currentWorker);\n        reject(error);\n      };\n      currentWorker.postMessage(['decode', fileDirectory, buffer], [buffer]);\n    });\n  }\n\n  async waitForWorker() {\n    const idleWorker = this.idleWorkers.pop();\n    if (idleWorker) {\n      return idleWorker;\n    }\n    const waiter: any = {};\n    const promise = new Promise((resolve) => {\n      waiter.resolve = resolve;\n    });\n\n    this.waitQueue.push(waiter);\n    return promise as Promise<Worker>;\n  }\n\n  async finishTask(currentWorker: Worker) {\n    const waiter = this.waitQueue.pop();\n    if (waiter) {\n      waiter.resolve(currentWorker);\n    } else {\n      this.idleWorkers.push(currentWorker);\n    }\n  }\n\n  destroy() {\n    // eslint-disable-next-line no-plusplus\n    for (let i = 0; i < this.workers.length; ++i) {\n      this.workers[i].terminate();\n    }\n  }\n}\n"],"mappings":"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"}