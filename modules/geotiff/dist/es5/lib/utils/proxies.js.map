{"version":3,"file":"proxies.js","names":["VIV_PROXY_KEY","OFFSETS_PROXY_KEY","concat","POOL_PROXY_KEY","checkProxies","tiff","isProxy","console","warn","proxyFlag","createOffsetsProxy","offsets","get","target","key","index","ifdRequests","offset","parseFileDirectoryAt","getImage","Reflect","Proxy","createPoolProxy","pool","options","readRasters","_objectSpread"],"sources":["../../../../src/lib/utils/proxies.ts"],"sourcesContent":["import type {GeoTIFF} from 'geotiff';\nimport type Pool from './Pool';\n\nconst VIV_PROXY_KEY = '__viv';\nconst OFFSETS_PROXY_KEY = `${VIV_PROXY_KEY}-offsets` as const;\nconst POOL_PROXY_KEY = `${VIV_PROXY_KEY}-decoder-pool` as const;\n\n/*\n * Inspect if the GeoTIFF source is wrapped in our proxies,\n * and warn if missing.\n */\nexport function checkProxies(tiff: GeoTIFF) {\n  if (!isProxy(tiff, OFFSETS_PROXY_KEY)) {\n    console.warn('GeoTIFF source is missing offsets proxy.'); // eslint-disable-line no-console\n  }\n\n  if (!isProxy(tiff, POOL_PROXY_KEY)) {\n    console.warn('GeoTIFF source is missing decoder-pool proxy.'); // eslint-disable-line no-console\n  }\n}\n\n/*\n * > isProxy(tiff, POOL_PROXY_KEY) === true; // false\n * > tiff = createPoolProxy(tiff, new Pool());\n * > isProxy(tiff, POOL_PROXY_KEY) === true; // true\n */\nfunction isProxy(tiff: GeoTIFF, proxyFlag: string) {\n  return (tiff as any)[proxyFlag] as boolean;\n}\n\n/*\n * Creates an ES6 Proxy that wraps a GeoTIFF object. The proxy\n * handler intercepts calls to `tiff.getImage` and uses our custom\n * pre-computed offsets to pre-fetch the correct file directory.\n *\n * This is a bit of a hack. Internally GeoTIFF inspects `this.ifdRequests`\n * to see which fileDirectories need to be traversed. By adding the\n * ifdRequest for an 'index' manually, GeoTIFF will await that request\n * rather than traversing the file system remotely.\n */\nexport function createOffsetsProxy(tiff: GeoTIFF, offsets: number[]) {\n  const get = (target: GeoTIFF, key: any) => {\n    // Intercept `tiff.getImage`\n    if (key === 'getImage') {\n      return (index: number) => {\n        // Manually add ifdRequest to tiff if missing and we have an offset.\n        if (!(index in target.ifdRequests) && index in offsets) {\n          const offset = offsets[index];\n          target.ifdRequests[index] = target.parseFileDirectoryAt(offset);\n        }\n        return target.getImage(index);\n      };\n    }\n\n    // tiff['__viv-offsets'] === true\n    if (key === OFFSETS_PROXY_KEY) {\n      return true;\n    }\n\n    return Reflect.get(target, key);\n  };\n  return new Proxy(tiff, {get});\n}\n\n/*\n * Creates an ES6 Proxy that wraps a GeoTIFF object. The proxy\n * handler intercepts calls to `tiff.readRasters` and injects\n * a pool argument to every call. This means our TiffPixelSource\n * doesn't need to be aware of whether a decoder pool is in use.\n *\n * > tiff.readRasters({ window }) -> tiff.readRasters({ window, pool });\n */\nexport function createPoolProxy(tiff: GeoTIFF, pool: Pool) {\n  const get = (target: GeoTIFF, key: any) => {\n    // Intercept calls to `image.readRasters`\n    if (key === 'readRasters') {\n      return (options: Parameters<typeof target.readRasters>) => {\n        // Inject `pool` argument with other raster options.\n        // @ts-ignore\n        return target.readRasters({...options, pool});\n      };\n    }\n\n    // tiff['__viv-decoder-pool'] === true\n    if (key === POOL_PROXY_KEY) {\n      return true;\n    }\n\n    return Reflect.get(target, key);\n  };\n  return new Proxy(tiff, {get});\n}\n"],"mappings":";;;;;;;;;;;;AAGA,IAAMA,aAAa,GAAG,OAAO;AAC7B,IAAMC,iBAAiB,MAAAC,MAAA,CAAMF,aAAa,aAAmB;AAC7D,IAAMG,cAAc,MAAAD,MAAA,CAAMF,aAAa,kBAAwB;AAMxD,SAASI,YAAYA,CAACC,IAAa,EAAE;EAC1C,IAAI,CAACC,OAAO,CAACD,IAAI,EAAEJ,iBAAiB,CAAC,EAAE;IACrCM,OAAO,CAACC,IAAI,CAAC,0CAA0C,CAAC;EAC1D;EAEA,IAAI,CAACF,OAAO,CAACD,IAAI,EAAEF,cAAc,CAAC,EAAE;IAClCI,OAAO,CAACC,IAAI,CAAC,+CAA+C,CAAC;EAC/D;AACF;AAOA,SAASF,OAAOA,CAACD,IAAa,EAAEI,SAAiB,EAAE;EACjD,OAAQJ,IAAI,CAASI,SAAS,CAAC;AACjC;AAYO,SAASC,kBAAkBA,CAACL,IAAa,EAAEM,OAAiB,EAAE;EACnE,IAAMC,GAAG,GAAG,SAANA,GAAGA,CAAIC,MAAe,EAAEC,GAAQ,EAAK;IAEzC,IAAIA,GAAG,KAAK,UAAU,EAAE;MACtB,OAAO,UAACC,KAAa,EAAK;QAExB,IAAI,EAAEA,KAAK,IAAIF,MAAM,CAACG,WAAW,CAAC,IAAID,KAAK,IAAIJ,OAAO,EAAE;UACtD,IAAMM,MAAM,GAAGN,OAAO,CAACI,KAAK,CAAC;UAC7BF,MAAM,CAACG,WAAW,CAACD,KAAK,CAAC,GAAGF,MAAM,CAACK,oBAAoB,CAACD,MAAM,CAAC;QACjE;QACA,OAAOJ,MAAM,CAACM,QAAQ,CAACJ,KAAK,CAAC;MAC/B,CAAC;IACH;IAGA,IAAID,GAAG,KAAKb,iBAAiB,EAAE;MAC7B,OAAO,IAAI;IACb;IAEA,OAAOmB,OAAO,CAACR,GAAG,CAACC,MAAM,EAAEC,GAAG,CAAC;EACjC,CAAC;EACD,OAAO,IAAIO,KAAK,CAAChB,IAAI,EAAE;IAACO,GAAG,EAAHA;EAAG,CAAC,CAAC;AAC/B;AAUO,SAASU,eAAeA,CAACjB,IAAa,EAAEkB,IAAU,EAAE;EACzD,IAAMX,GAAG,GAAG,SAANA,GAAGA,CAAIC,MAAe,EAAEC,GAAQ,EAAK;IAEzC,IAAIA,GAAG,KAAK,aAAa,EAAE;MACzB,OAAO,UAACU,OAA8C,EAAK;QAGzD,OAAOX,MAAM,CAACY,WAAW,CAAAC,aAAA,CAAAA,aAAA,KAAKF,OAAO;UAAED,IAAI,EAAJA;QAAI,EAAC,CAAC;MAC/C,CAAC;IACH;IAGA,IAAIT,GAAG,KAAKX,cAAc,EAAE;MAC1B,OAAO,IAAI;IACb;IAEA,OAAOiB,OAAO,CAACR,GAAG,CAACC,MAAM,EAAEC,GAAG,CAAC;EACjC,CAAC;EACD,OAAO,IAAIO,KAAK,CAAChB,IAAI,EAAE;IAACO,GAAG,EAAHA;EAAG,CAAC,CAAC;AAC/B"}