{"version":3,"file":"load-geotiff.js","names":["_geotiff","require","_proxies","_loadOmeTiff","loadGeoTiff","_x","_loadGeoTiff","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","source","opts","headers","offsets","tiff","firstImage","_args","wrap","_callee$","_context","prev","next","length","undefined","GeoTIFF","fromUrl","sent","fromBlob","createOffsetsProxy","checkProxies","getImage","isOmeTiff","abrupt","loadOmeTiff","Error","stop"],"sources":["../../../src/lib/load-geotiff.ts"],"sourcesContent":["import {fromUrl, fromBlob, GeoTIFF} from 'geotiff';\n\nimport {\n  // createPoolProxy,\n  createOffsetsProxy,\n  checkProxies\n} from './utils/proxies';\n// import Pool from './lib/Pool';\n\nimport {loadOmeTiff, isOmeTiff} from './ome/load-ome-tiff';\nimport type TiffPixelSource from './tiff-pixel-source';\n\n/** Options for initializing a tiff pixel source. */\ninterface GeoTIFFOptions {\n  /** Headers passed to each underlying request. */\n  headers?: Record<string, unknown>;\n  /** Performance enhancment to index the remote tiff source using pre-computed byte-offsets. Generated via https://github.com/ilan-gold/generate-tiff-offsets */\n  offsets?: number[];\n  /** Indicates whether a multi-threaded pool of image decoders should be used to decode tiles. */\n  pool?: boolean;\n}\n\ninterface GeoTIFFData {\n  data: TiffPixelSource<string[]>[];\n  metadata: Record<string, unknown>;\n}\n\n/**\n * Opens an OME-TIFF via URL and returns data source and associated metadata for first image.\n *\n * @param source url string, File/Blob object, or GeoTIFF object\n * @param opts options for initializing a tiff pixel source.\n *  - `opts.headers` are passed to each underlying fetch request.\n *  - `opts.offsets` are a performance enhancment to index the remote tiff source using pre-computed byte-offsets.\n *  - `opts.pool` indicates whether a multi-threaded pool of image decoders should be used to decode tiles (default = true).\n * @return data source and associated OME-Zarr metadata.\n */\nexport async function loadGeoTiff(\n  source: string | Blob | GeoTIFF,\n  opts: GeoTIFFOptions = {}\n): Promise<GeoTIFFData> {\n  const {headers, offsets} = opts;\n\n  // Create tiff source\n  let tiff: GeoTIFF;\n  if (source instanceof GeoTIFF) {\n    tiff = source;\n  } else if (typeof source === 'string') {\n    tiff = await fromUrl(source, headers);\n  } else {\n    tiff = await fromBlob(source);\n  }\n\n  // if (pool) {\n  /*\n   * Creates a worker pool to decode tiff tiles. Wraps tiff\n   * in a Proxy that injects 'pool' into `tiff.readRasters`.\n   */\n  // tiff = createPoolProxy(tiff, new Pool());\n  // }\n\n  if (offsets) {\n    /*\n     * Performance enhancement. If offsets are provided, we\n     * create a proxy that intercepts calls to `tiff.getImage`\n     * and injects the pre-computed offsets.\n     */\n    tiff = createOffsetsProxy(tiff, offsets);\n  }\n\n  /*\n   * Inspect tiff source for our performance enhancing proxies.\n   * Prints warnings to console if `offsets` or `pool` are missing.\n   */\n  checkProxies(tiff);\n\n  const firstImage = await tiff.getImage(0);\n\n  if (isOmeTiff(firstImage)) {\n    return loadOmeTiff(tiff, firstImage);\n  }\n\n  throw new Error('GeoTIFF not recognized.');\n}\n"],"mappings":";;;;;;;;;AAAA,IAAAA,QAAA,GAAAC,OAAA;AAEA,IAAAC,QAAA,GAAAD,OAAA;AAOA,IAAAE,YAAA,GAAAF,OAAA;AAA2D,SA4BrCG,WAAWA,CAAAC,EAAA;EAAA,OAAAC,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,aAAA;EAAAA,YAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAA1B,SAAAC,QACLC,MAA+B;IAAA,IAAAC,IAAA;MAAAC,OAAA;MAAAC,OAAA;MAAAC,IAAA;MAAAC,UAAA;MAAAC,KAAA,GAAAZ,SAAA;IAAA,OAAAG,YAAA,CAAAD,OAAA,CAAAW,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAC/BV,IAAoB,GAAAK,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;UAElBJ,OAAO,GAAaD,IAAI,CAAxBC,OAAO,EAAEC,OAAO,GAAIF,IAAI,CAAfE,OAAO;UAAA,MAInBH,MAAM,YAAYc,gBAAO;YAAAL,QAAA,CAAAE,IAAA;YAAA;UAAA;UAC3BP,IAAI,GAAGJ,MAAM;UAACS,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAA,MACL,OAAOX,MAAM,KAAK,QAAQ;YAAAS,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OACtB,IAAAI,gBAAO,EAACf,MAAM,EAAEE,OAAO,CAAC;QAAA;UAArCE,IAAI,GAAAK,QAAA,CAAAO,IAAA;UAAAP,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAES,IAAAM,iBAAQ,EAACjB,MAAM,CAAC;QAAA;UAA7BI,IAAI,GAAAK,QAAA,CAAAO,IAAA;QAAA;UAWN,IAAIb,OAAO,EAAE;YAMXC,IAAI,GAAG,IAAAc,2BAAkB,EAACd,IAAI,EAAED,OAAO,CAAC;UAC1C;UAMA,IAAAgB,qBAAY,EAACf,IAAI,CAAC;UAACK,QAAA,CAAAE,IAAA;UAAA,OAEMP,IAAI,CAACgB,QAAQ,CAAC,CAAC,CAAC;QAAA;UAAnCf,UAAU,GAAAI,QAAA,CAAAO,IAAA;UAAA,KAEZ,IAAAK,sBAAS,EAAChB,UAAU,CAAC;YAAAI,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAa,MAAA,WAChB,IAAAC,wBAAW,EAACnB,IAAI,EAAEC,UAAU,CAAC;QAAA;UAAA,MAGhC,IAAImB,KAAK,CAAC,yBAAyB,CAAC;QAAA;QAAA;UAAA,OAAAf,QAAA,CAAAgB,IAAA;MAAA;IAAA,GAAA1B,OAAA;EAAA,CAC3C;EAAA,OAAAP,YAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}