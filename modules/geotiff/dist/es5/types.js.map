{"version":3,"file":"types.js","names":[],"sources":["../../src/types.ts"],"sourcesContent":["import {DTYPE_LOOKUP} from './lib/ome/ome-utils';\n\nexport type Dtype = typeof DTYPE_LOOKUP[keyof typeof DTYPE_LOOKUP];\nexport type TypedArray = InstanceType<typeof globalThis[`${Dtype}Array`]>;\n\nexport interface PixelData {\n  data: TypedArray;\n  width: number;\n  height: number;\n}\n\nexport type PixelSourceSelection<S extends string[]> = {\n  [K in S[number]]: number;\n};\n\nexport interface RasterSelection<S extends string[]> {\n  selection: PixelSourceSelection<S>;\n  signal?: AbortSignal;\n}\n\nexport interface TileSelection<S extends string[]> {\n  x: number;\n  y: number;\n  selection: PixelSourceSelection<S>;\n  signal?: AbortSignal;\n}\n\ninterface PhysicalSize {\n  size: number;\n  unit: string;\n}\n\nexport interface PixelSourceMeta {\n  physicalSizes?: Record<string, PhysicalSize>;\n  photometricInterpretation?: number;\n}\n\nexport type Labels<S extends string[]> = [...S, 'y', 'x'] | [...S, 'y', 'x', '_c'];\n\n/**\n * Interface to load tiles from a data source\n */\nexport interface PixelSource<S extends string[]> {\n  /** Loads a 2D plane */\n  getRaster(sel: RasterSelection<S>): Promise<PixelData>;\n  /** Loads a tile */\n  getTile(sel: TileSelection<S>): Promise<PixelData>;\n  onTileError(err: Error): void;\n  shape: number[];\n  dtype: Dtype;\n  labels: Labels<S>;\n  tileSize: number;\n  meta?: PixelSourceMeta;\n}\n"],"mappings":""}