{"version":3,"file":"ome-indexers.js","names":["getOmeLegacyIndexer","tiff","rootMeta","imgMeta","SizeT","SizeC","SizeZ","Pixels","ifdIndexer","getOmeIFDIndexer","sel","pyramidLevel","index","pyramidIndex","getImage","getOmeSubIFDIndexer","ifdCache","Map","baseImage","SubIFDs","fileDirectory","Error","key","concat","t","c","z","has","subIfdOffset","set","parseFileDirectoryAt","ifd","get","constructor","geoKeyDirectory","dataView","littleEndian","cache","source","DimensionOrder","_ref","_ref2","_ref3","_ref4","_ref5","_ref6"],"sources":["../../../../src/lib/ome/ome-indexers.ts"],"sourcesContent":["import type {GeoTIFFImage, GeoTIFF, ImageFileDirectory} from 'geotiff';\nimport type {OMEXML} from '../ome/omexml';\n\nexport type OmeTiffSelection = {t: number; c: number; z: number};\nexport type OmeTiffIndexer = (sel: OmeTiffSelection, z: number) => Promise<GeoTIFFImage>;\n\n/*\n * An \"indexer\" for a GeoTIFF-based source is a function that takes a\n * \"selection\" (e.g. { z, t, c }) and returns a Promise for the GeoTIFFImage\n * object corresponding to that selection.\n *\n * For OME-TIFF images, the \"selection\" object is the same regardless of\n * the format version. However, modern version of Bioformats have a different\n * memory layout for pyramidal resolutions. Thus, we have two different \"indexers\"\n * depending on which format version is detected.\n *\n * TODO: We currently only support indexing the first image in the OME-TIFF with\n * our indexers. There can be multiple images in an OME-TIFF, so supporting these\n * images will require extending these indexers or creating new methods.\n */\n\n/*\n * Returns an indexer for legacy Bioformats images. This assumes that\n * downsampled resolutions are stored sequentially in the OME-TIFF.\n */\nexport function getOmeLegacyIndexer(tiff: GeoTIFF, rootMeta: OMEXML): OmeTiffIndexer {\n  const imgMeta = rootMeta[0];\n  const {SizeT, SizeC, SizeZ} = imgMeta.Pixels;\n  const ifdIndexer = getOmeIFDIndexer(imgMeta);\n\n  return (sel: OmeTiffSelection, pyramidLevel: number) => {\n    // Get IFD index at base pyramid level\n    const index = ifdIndexer(sel);\n    // Get index of first image at pyramidal level\n    const pyramidIndex = pyramidLevel * SizeZ * SizeT * SizeC;\n    // Return image at IFD index for pyramidal level\n    return tiff.getImage(index + pyramidIndex);\n  };\n}\n\n/*\n * Returns an indexer for modern Bioforamts images that store multiscale\n * resolutions using SubIFDs.\n *\n * The ifdIndexer returns the 'index' to the base resolution for a\n * particular 'selection'. The SubIFDs to the downsampled resolutions\n * of the 'selection' are stored within the `baseImage.fileDirectory`.\n * We use the SubIFDs to get the IFD for the corresponding sub-resolution.\n *\n * NOTE: This function create a custom IFD cache rather than mutating\n * `GeoTIFF.ifdRequests` with a random offset. The IFDs are cached in\n * an ES6 Map that maps a string key that identifies the selection uniquely\n * to the corresponding IFD.\n */\nexport function getOmeSubIFDIndexer(tiff: GeoTIFF, rootMeta: OMEXML): OmeTiffIndexer {\n  const imgMeta = rootMeta[0];\n  const ifdIndexer = getOmeIFDIndexer(imgMeta);\n  const ifdCache: Map<string, Promise<ImageFileDirectory>> = new Map();\n\n  return async (sel: OmeTiffSelection, pyramidLevel: number) => {\n    const index = ifdIndexer(sel);\n    const baseImage = await tiff.getImage(index);\n\n    // It's the highest resolution, no need to look up SubIFDs.\n    if (pyramidLevel === 0) {\n      return baseImage;\n    }\n\n    const {SubIFDs} = baseImage.fileDirectory;\n    if (!SubIFDs) {\n      throw Error('Indexing Error: OME-TIFF is missing SubIFDs.');\n    }\n\n    // Get IFD for the selection at the pyramidal level\n    const key = `${sel.t}-${sel.c}-${sel.z}-${pyramidLevel}`;\n    if (!ifdCache.has(key)) {\n      // Only create a new request if we don't have the key.\n      const subIfdOffset = SubIFDs[pyramidLevel - 1];\n      ifdCache.set(key, tiff.parseFileDirectoryAt(subIfdOffset));\n    }\n    const ifd = (await ifdCache.get(key)) as ImageFileDirectory;\n\n    // Create a new image object manually from IFD\n    // https://github.com/geotiffjs/geotiff.js/blob/8ef472f41b51d18074aece2300b6a8ad91a21ae1/src/geotiff.js#L447-L453\n    return new (baseImage.constructor as any)(\n      ifd.fileDirectory,\n      ifd.geoKeyDirectory,\n      tiff.dataView,\n      tiff.littleEndian,\n      tiff.cache,\n      tiff.source\n    ) as GeoTIFFImage;\n  };\n}\n\n/*\n * Returns a function that computes the image index based on the dimension\n * order and dimension sizes.\n */\nfunction getOmeIFDIndexer(imgMeta: OMEXML[0]): (sel: OmeTiffSelection) => number {\n  const {SizeC, SizeZ, SizeT, DimensionOrder} = imgMeta.Pixels;\n  switch (DimensionOrder) {\n    case 'XYZCT': {\n      return ({t, c, z}) => t * SizeZ * SizeC + c * SizeZ + z;\n    }\n    case 'XYZTC': {\n      return ({t, c, z}) => c * SizeZ * SizeT + t * SizeZ + z;\n    }\n    case 'XYCTZ': {\n      return ({t, c, z}) => z * SizeC * SizeT + t * SizeC + c;\n    }\n    case 'XYCZT': {\n      return ({t, c, z}) => t * SizeC * SizeZ + z * SizeC + c;\n    }\n    case 'XYTCZ': {\n      return ({t, c, z}) => z * SizeT * SizeC + c * SizeT + t;\n    }\n    case 'XYTZC': {\n      return ({t, c, z}) => c * SizeT * SizeZ + z * SizeT + t;\n    }\n    default: {\n      throw new Error(`Invalid OME-XML DimensionOrder, got ${DimensionOrder}.`);\n    }\n  }\n}\n"],"mappings":"AAyBA,OAAO,SAASA,mBAAmBA,CAACC,IAAa,EAAEC,QAAgB,EAAkB;EACnF,MAAMC,OAAO,GAAGD,QAAQ,CAAC,CAAC,CAAC;EAC3B,MAAM;IAACE,KAAK;IAAEC,KAAK;IAAEC;EAAK,CAAC,GAAGH,OAAO,CAACI,MAAM;EAC5C,MAAMC,UAAU,GAAGC,gBAAgB,CAACN,OAAO,CAAC;EAE5C,OAAO,CAACO,GAAqB,EAAEC,YAAoB,KAAK;IAEtD,MAAMC,KAAK,GAAGJ,UAAU,CAACE,GAAG,CAAC;IAE7B,MAAMG,YAAY,GAAGF,YAAY,GAAGL,KAAK,GAAGF,KAAK,GAAGC,KAAK;IAEzD,OAAOJ,IAAI,CAACa,QAAQ,CAACF,KAAK,GAAGC,YAAY,CAAC;EAC5C,CAAC;AACH;AAgBA,OAAO,SAASE,mBAAmBA,CAACd,IAAa,EAAEC,QAAgB,EAAkB;EACnF,MAAMC,OAAO,GAAGD,QAAQ,CAAC,CAAC,CAAC;EAC3B,MAAMM,UAAU,GAAGC,gBAAgB,CAACN,OAAO,CAAC;EAC5C,MAAMa,QAAkD,GAAG,IAAIC,GAAG,CAAC,CAAC;EAEpE,OAAO,OAAOP,GAAqB,EAAEC,YAAoB,KAAK;IAC5D,MAAMC,KAAK,GAAGJ,UAAU,CAACE,GAAG,CAAC;IAC7B,MAAMQ,SAAS,GAAG,MAAMjB,IAAI,CAACa,QAAQ,CAACF,KAAK,CAAC;IAG5C,IAAID,YAAY,KAAK,CAAC,EAAE;MACtB,OAAOO,SAAS;IAClB;IAEA,MAAM;MAACC;IAAO,CAAC,GAAGD,SAAS,CAACE,aAAa;IACzC,IAAI,CAACD,OAAO,EAAE;MACZ,MAAME,KAAK,CAAC,8CAA8C,CAAC;IAC7D;IAGA,MAAMC,GAAG,MAAAC,MAAA,CAAMb,GAAG,CAACc,CAAC,OAAAD,MAAA,CAAIb,GAAG,CAACe,CAAC,OAAAF,MAAA,CAAIb,GAAG,CAACgB,CAAC,OAAAH,MAAA,CAAIZ,YAAY,CAAE;IACxD,IAAI,CAACK,QAAQ,CAACW,GAAG,CAACL,GAAG,CAAC,EAAE;MAEtB,MAAMM,YAAY,GAAGT,OAAO,CAACR,YAAY,GAAG,CAAC,CAAC;MAC9CK,QAAQ,CAACa,GAAG,CAACP,GAAG,EAAErB,IAAI,CAAC6B,oBAAoB,CAACF,YAAY,CAAC,CAAC;IAC5D;IACA,MAAMG,GAAG,GAAI,MAAMf,QAAQ,CAACgB,GAAG,CAACV,GAAG,CAAwB;IAI3D,OAAO,IAAKJ,SAAS,CAACe,WAAW,CAC/BF,GAAG,CAACX,aAAa,EACjBW,GAAG,CAACG,eAAe,EACnBjC,IAAI,CAACkC,QAAQ,EACblC,IAAI,CAACmC,YAAY,EACjBnC,IAAI,CAACoC,KAAK,EACVpC,IAAI,CAACqC,MACP,CAAC;EACH,CAAC;AACH;AAMA,SAAS7B,gBAAgBA,CAACN,OAAkB,EAAqC;EAC/E,MAAM;IAACE,KAAK;IAAEC,KAAK;IAAEF,KAAK;IAAEmC;EAAc,CAAC,GAAGpC,OAAO,CAACI,MAAM;EAC5D,QAAQgC,cAAc;IACpB,KAAK,OAAO;MAAE;QACZ,OAAOC,IAAA;UAAA,IAAC;YAAChB,CAAC;YAAEC,CAAC;YAAEC;UAAC,CAAC,GAAAc,IAAA;UAAA,OAAKhB,CAAC,GAAGlB,KAAK,GAAGD,KAAK,GAAGoB,CAAC,GAAGnB,KAAK,GAAGoB,CAAC;QAAA;MACzD;IACA,KAAK,OAAO;MAAE;QACZ,OAAOe,KAAA;UAAA,IAAC;YAACjB,CAAC;YAAEC,CAAC;YAAEC;UAAC,CAAC,GAAAe,KAAA;UAAA,OAAKhB,CAAC,GAAGnB,KAAK,GAAGF,KAAK,GAAGoB,CAAC,GAAGlB,KAAK,GAAGoB,CAAC;QAAA;MACzD;IACA,KAAK,OAAO;MAAE;QACZ,OAAOgB,KAAA;UAAA,IAAC;YAAClB,CAAC;YAAEC,CAAC;YAAEC;UAAC,CAAC,GAAAgB,KAAA;UAAA,OAAKhB,CAAC,GAAGrB,KAAK,GAAGD,KAAK,GAAGoB,CAAC,GAAGnB,KAAK,GAAGoB,CAAC;QAAA;MACzD;IACA,KAAK,OAAO;MAAE;QACZ,OAAOkB,KAAA;UAAA,IAAC;YAACnB,CAAC;YAAEC,CAAC;YAAEC;UAAC,CAAC,GAAAiB,KAAA;UAAA,OAAKnB,CAAC,GAAGnB,KAAK,GAAGC,KAAK,GAAGoB,CAAC,GAAGrB,KAAK,GAAGoB,CAAC;QAAA;MACzD;IACA,KAAK,OAAO;MAAE;QACZ,OAAOmB,KAAA;UAAA,IAAC;YAACpB,CAAC;YAAEC,CAAC;YAAEC;UAAC,CAAC,GAAAkB,KAAA;UAAA,OAAKlB,CAAC,GAAGtB,KAAK,GAAGC,KAAK,GAAGoB,CAAC,GAAGrB,KAAK,GAAGoB,CAAC;QAAA;MACzD;IACA,KAAK,OAAO;MAAE;QACZ,OAAOqB,KAAA;UAAA,IAAC;YAACrB,CAAC;YAAEC,CAAC;YAAEC;UAAC,CAAC,GAAAmB,KAAA;UAAA,OAAKpB,CAAC,GAAGrB,KAAK,GAAGE,KAAK,GAAGoB,CAAC,GAAGtB,KAAK,GAAGoB,CAAC;QAAA;MACzD;IACA;MAAS;QACP,MAAM,IAAIH,KAAK,wCAAAE,MAAA,CAAwCgB,cAAc,MAAG,CAAC;MAC3E;EACF;AACF"}