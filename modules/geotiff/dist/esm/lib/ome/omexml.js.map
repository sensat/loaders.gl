{"version":3,"file":"omexml.js","names":["parser","ensureArray","intToRgba","PARSER_OPTIONS","attributeNamePrefix","attrNodeName","parseNodeValue","parseAttributeValue","ignoreAttributes","parse","str","fromString","res","OME","Error","Image","map","img","Channels","Pixels","Channel","c","attr","Color","AquisitionDate","Description","image","format","sizes","name","size","concat","unit","join","SizeX","SizeY","Type","SizeZ","SizeT","SizeC"],"sources":["../../../../src/lib/ome/omexml.ts"],"sourcesContent":["import parser from 'fast-xml-parser';\nimport {ensureArray, intToRgba} from '../utils/tiff-utils';\n\n// WARNING: Changes to the parser options _will_ effect the types in types/omexml.d.ts.\nconst PARSER_OPTIONS = {\n  // Nests attributes withtout prefix under 'attr' key for each node\n  attributeNamePrefix: '',\n  attrNodeName: 'attr',\n\n  // Parses numbers for both attributes and nodes\n  parseNodeValue: true,\n  parseAttributeValue: true,\n\n  // Forces attributes to be parsed\n  ignoreAttributes: false\n};\n\nconst parse = (str: string): Root => parser.parse(str, PARSER_OPTIONS);\n\nexport function fromString(str: string) {\n  const res = parse(str);\n  if (!res.OME) {\n    throw Error('Failed to parse OME-XML metadata.');\n  }\n  return ensureArray(res.OME.Image).map((img) => {\n    const Channels = ensureArray(img.Pixels.Channel).map((c) => {\n      if ('Color' in c.attr) {\n        return {...c.attr, Color: intToRgba(c.attr.Color)};\n      }\n      return {...c.attr};\n    });\n    const {AquisitionDate = '', Description = ''} = img;\n    const image = {\n      ...img.attr,\n      AquisitionDate,\n      Description,\n      Pixels: {\n        ...img.Pixels.attr,\n        Channels\n      }\n    };\n    return {\n      ...image,\n      format() {\n        const {Pixels} = image;\n\n        const sizes = (['X', 'Y', 'Z'] as const)\n          .map((name) => {\n            const size = Pixels[`PhysicalSize${name}` as const];\n            const unit = Pixels[`PhysicalSize${name}Unit` as const];\n            return size && unit ? `${size} ${unit}` : '-';\n          })\n          .join(' x ');\n\n        return {\n          'Acquisition Date': image.AquisitionDate,\n          'Dimensions (XY)': `${Pixels.SizeX} x ${Pixels.SizeY}`,\n          'Pixels Type': Pixels.Type,\n          'Pixels Size (XYZ)': sizes,\n          'Z-sections/Timepoints': `${Pixels.SizeZ} x ${Pixels.SizeT}`,\n          Channels: Pixels.SizeC\n        };\n      }\n    };\n  });\n}\n\nexport type OMEXML = ReturnType<typeof fromString>;\nexport type DimensionOrder = 'XYZCT' | 'XYZTC' | 'XYCTZ' | 'XYCZT' | 'XYTCZ' | 'XYTZC';\n\n// Structure of node is determined by the PARSER_OPTIONS.\ntype Node<T, A> = T & {attr: A};\ntype Attrs<Fields extends string, T = string> = {[K in Fields]: T};\n\ntype OMEAttrs = Attrs<'xmlns' | 'xmlns:xsi' | 'xsi:schemaLocation'>;\ntype OME = Node<{Insturment: Insturment; Image: Image | Image[]}, OMEAttrs>;\n\ntype Insturment = Node<\n  {Objective: Node<{}, Attrs<'ID' | 'Model' | 'NominalMagnification'>>},\n  Attrs<'ID'>\n>;\n\ninterface ImageNodes {\n  AquisitionDate?: string;\n  Description?: string;\n  Pixels: Pixels;\n  InstrumentRef: Node<{}, {ID: string}>;\n  ObjectiveSettings: Node<{}, {ID: string}>;\n}\ntype Image = Node<ImageNodes, Attrs<'ID' | 'Name'>>;\n\ntype PixelType =\n  | 'int8'\n  | 'int16'\n  | 'int32'\n  | 'uint8'\n  | 'uint16'\n  | 'uint32'\n  | 'float'\n  | 'bit'\n  | 'double'\n  | 'complex'\n  | 'double-complex';\n\nexport type UnitsLength =\n  | 'Ym'\n  | 'Zm'\n  | 'Em'\n  | 'Pm'\n  | 'Tm'\n  | 'Gm'\n  | 'Mm'\n  | 'km'\n  | 'hm'\n  | 'dam'\n  | 'm'\n  | 'dm'\n  | 'cm'\n  | 'mm'\n  | 'µm'\n  | 'nm'\n  | 'pm'\n  | 'fm'\n  | 'am'\n  | 'zm'\n  | 'ym'\n  | 'Å'\n  | 'thou'\n  | 'li'\n  | 'in'\n  | 'ft'\n  | 'yd'\n  | 'mi'\n  | 'ua'\n  | 'ly'\n  | 'pc'\n  | 'pt'\n  | 'pixel'\n  | 'reference frame';\n\ntype PhysicalSize<Name extends string> = `PhysicalSize${Name}`;\ntype PhysicalSizeUnit<Name extends string> = `PhysicalSize${Name}Unit`;\ntype Size<Names extends string> = `Size${Names}`;\n\ntype PixelAttrs = Attrs<\n  PhysicalSize<'X' | 'Y' | 'Z'> | 'SignificantBits' | Size<'T' | 'C' | 'Z' | 'Y' | 'X'>,\n  number\n> &\n  Attrs<PhysicalSizeUnit<'X' | 'Y' | 'Z'>, UnitsLength> &\n  Attrs<'BigEndian' | 'Interleaved', boolean> & {\n    ID: string;\n    DimensionOrder: DimensionOrder;\n    Type: PixelType;\n  };\n\ntype Pixels = Node<\n  {\n    Channel: Channel | Channel[];\n    TiffData: Node<{}, Attrs<'IFD' | 'PlaneCount'>>;\n  },\n  PixelAttrs\n>;\n\ntype ChannelAttrs =\n  | {\n      ID: string;\n      SamplesPerPixel: number;\n      Name?: string;\n    }\n  | {\n      ID: string;\n      SamplesPerPixel: number;\n      Name?: string;\n      Color: number;\n    };\n\ntype Channel = Node<{}, ChannelAttrs>;\n\ntype Root = {OME: OME};\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,iBAAiB;AACpC,SAAQC,WAAW,EAAEC,SAAS,QAAO,qBAAqB;AAG1D,MAAMC,cAAc,GAAG;EAErBC,mBAAmB,EAAE,EAAE;EACvBC,YAAY,EAAE,MAAM;EAGpBC,cAAc,EAAE,IAAI;EACpBC,mBAAmB,EAAE,IAAI;EAGzBC,gBAAgB,EAAE;AACpB,CAAC;AAED,MAAMC,KAAK,GAAIC,GAAW,IAAWV,MAAM,CAACS,KAAK,CAACC,GAAG,EAAEP,cAAc,CAAC;AAEtE,OAAO,SAASQ,UAAUA,CAACD,GAAW,EAAE;EACtC,MAAME,GAAG,GAAGH,KAAK,CAACC,GAAG,CAAC;EACtB,IAAI,CAACE,GAAG,CAACC,GAAG,EAAE;IACZ,MAAMC,KAAK,CAAC,mCAAmC,CAAC;EAClD;EACA,OAAOb,WAAW,CAACW,GAAG,CAACC,GAAG,CAACE,KAAK,CAAC,CAACC,GAAG,CAAEC,GAAG,IAAK;IAC7C,MAAMC,QAAQ,GAAGjB,WAAW,CAACgB,GAAG,CAACE,MAAM,CAACC,OAAO,CAAC,CAACJ,GAAG,CAAEK,CAAC,IAAK;MAC1D,IAAI,OAAO,IAAIA,CAAC,CAACC,IAAI,EAAE;QACrB,OAAO;UAAC,GAAGD,CAAC,CAACC,IAAI;UAAEC,KAAK,EAAErB,SAAS,CAACmB,CAAC,CAACC,IAAI,CAACC,KAAK;QAAC,CAAC;MACpD;MACA,OAAO;QAAC,GAAGF,CAAC,CAACC;MAAI,CAAC;IACpB,CAAC,CAAC;IACF,MAAM;MAACE,cAAc,GAAG,EAAE;MAAEC,WAAW,GAAG;IAAE,CAAC,GAAGR,GAAG;IACnD,MAAMS,KAAK,GAAG;MACZ,GAAGT,GAAG,CAACK,IAAI;MACXE,cAAc;MACdC,WAAW;MACXN,MAAM,EAAE;QACN,GAAGF,GAAG,CAACE,MAAM,CAACG,IAAI;QAClBJ;MACF;IACF,CAAC;IACD,OAAO;MACL,GAAGQ,KAAK;MACRC,MAAMA,CAAA,EAAG;QACP,MAAM;UAACR;QAAM,CAAC,GAAGO,KAAK;QAEtB,MAAME,KAAK,GAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAC3BZ,GAAG,CAAEa,IAAI,IAAK;UACb,MAAMC,IAAI,GAAGX,MAAM,gBAAAY,MAAA,CAAgBF,IAAI,EAAY;UACnD,MAAMG,IAAI,GAAGb,MAAM,gBAAAY,MAAA,CAAgBF,IAAI,UAAgB;UACvD,OAAOC,IAAI,IAAIE,IAAI,MAAAD,MAAA,CAAMD,IAAI,OAAAC,MAAA,CAAIC,IAAI,IAAK,GAAG;QAC/C,CAAC,CAAC,CACDC,IAAI,CAAC,KAAK,CAAC;QAEd,OAAO;UACL,kBAAkB,EAAEP,KAAK,CAACF,cAAc;UACxC,iBAAiB,KAAAO,MAAA,CAAKZ,MAAM,CAACe,KAAK,SAAAH,MAAA,CAAMZ,MAAM,CAACgB,KAAK,CAAE;UACtD,aAAa,EAAEhB,MAAM,CAACiB,IAAI;UAC1B,mBAAmB,EAAER,KAAK;UAC1B,uBAAuB,KAAAG,MAAA,CAAKZ,MAAM,CAACkB,KAAK,SAAAN,MAAA,CAAMZ,MAAM,CAACmB,KAAK,CAAE;UAC5DpB,QAAQ,EAAEC,MAAM,CAACoB;QACnB,CAAC;MACH;IACF,CAAC;EACH,CAAC,CAAC;AACJ"}