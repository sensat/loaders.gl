{"version":3,"file":"load-ome-tiff.js","names":["TiffPixelSource","getOmeLegacyIndexer","getOmeSubIFDIndexer","getOmePixelSourceMeta","fromString","isOmeTiff","img","fileDirectory","ImageDescription","includes","loadOmeTiff","tiff","firstImage","SubIFDs","PhotometricInterpretation","photometricInterpretation","omexml","levels","pyramidIndexer","length","imgMeta","labels","getShape","physicalSizes","dtype","tileSize","getTileWidth","meta","data","Array","from","map","_","resolution","shape","indexer","sel","source","metadata"],"sources":["../../../../src/lib/ome/load-ome-tiff.ts"],"sourcesContent":["import type {GeoTIFF, GeoTIFFImage} from 'geotiff';\n\nimport TiffPixelSource from '../tiff-pixel-source';\nimport {getOmeLegacyIndexer, getOmeSubIFDIndexer, OmeTiffIndexer} from './ome-indexers';\nimport {getOmePixelSourceMeta} from './ome-utils';\nimport {fromString} from './omexml';\nimport type {OmeTiffSelection} from './ome-indexers';\n\nexport const isOmeTiff = (img: GeoTIFFImage) => img.fileDirectory.ImageDescription.includes('<OME');\n\nexport async function loadOmeTiff(tiff: GeoTIFF, firstImage: GeoTIFFImage) {\n  // Get first image from tiff and inspect OME-XML metadata\n  const {\n    ImageDescription,\n    SubIFDs,\n    PhotometricInterpretation: photometricInterpretation\n  } = firstImage.fileDirectory;\n  const omexml = fromString(ImageDescription);\n\n  /*\n   * Image pyramids are stored differently between versions of Bioformats.\n   * Thus we need a different indexer depending on which format we have.\n   */\n  let levels: number;\n  let pyramidIndexer: OmeTiffIndexer;\n\n  if (SubIFDs) {\n    // Image is >= Bioformats 6.0 and resolutions are stored using SubIFDs.\n    levels = SubIFDs.length + 1;\n    pyramidIndexer = getOmeSubIFDIndexer(tiff, omexml);\n  } else {\n    // Image is legacy format; resolutions are stored as separate images.\n    levels = omexml.length;\n    pyramidIndexer = getOmeLegacyIndexer(tiff, omexml);\n  }\n\n  // TODO: The OmeTIFF loader only works for the _first_ image in the metadata.\n  const imgMeta = omexml[0];\n  const {labels, getShape, physicalSizes, dtype} = getOmePixelSourceMeta(imgMeta);\n  const tileSize = firstImage.getTileWidth();\n  const meta = {photometricInterpretation, physicalSizes};\n\n  const data = Array.from({length: levels}).map((_, resolution) => {\n    const shape = getShape(resolution);\n    const indexer = (sel: OmeTiffSelection) => pyramidIndexer(sel, resolution);\n    const source = new TiffPixelSource(indexer, dtype, tileSize, shape, labels, meta);\n    return source;\n  });\n\n  return {data, metadata: imgMeta};\n}\n"],"mappings":"AAEA,OAAOA,eAAe,MAAM,sBAAsB;AAClD,SAAQC,mBAAmB,EAAEC,mBAAmB,QAAuB,gBAAgB;AACvF,SAAQC,qBAAqB,QAAO,aAAa;AACjD,SAAQC,UAAU,QAAO,UAAU;AAGnC,OAAO,MAAMC,SAAS,GAAIC,GAAiB,IAAKA,GAAG,CAACC,aAAa,CAACC,gBAAgB,CAACC,QAAQ,CAAC,MAAM,CAAC;AAEnG,OAAO,eAAeC,WAAWA,CAACC,IAAa,EAAEC,UAAwB,EAAE;EAEzE,MAAM;IACJJ,gBAAgB;IAChBK,OAAO;IACPC,yBAAyB,EAAEC;EAC7B,CAAC,GAAGH,UAAU,CAACL,aAAa;EAC5B,MAAMS,MAAM,GAAGZ,UAAU,CAACI,gBAAgB,CAAC;EAM3C,IAAIS,MAAc;EAClB,IAAIC,cAA8B;EAElC,IAAIL,OAAO,EAAE;IAEXI,MAAM,GAAGJ,OAAO,CAACM,MAAM,GAAG,CAAC;IAC3BD,cAAc,GAAGhB,mBAAmB,CAACS,IAAI,EAAEK,MAAM,CAAC;EACpD,CAAC,MAAM;IAELC,MAAM,GAAGD,MAAM,CAACG,MAAM;IACtBD,cAAc,GAAGjB,mBAAmB,CAACU,IAAI,EAAEK,MAAM,CAAC;EACpD;EAGA,MAAMI,OAAO,GAAGJ,MAAM,CAAC,CAAC,CAAC;EACzB,MAAM;IAACK,MAAM;IAAEC,QAAQ;IAAEC,aAAa;IAAEC;EAAK,CAAC,GAAGrB,qBAAqB,CAACiB,OAAO,CAAC;EAC/E,MAAMK,QAAQ,GAAGb,UAAU,CAACc,YAAY,CAAC,CAAC;EAC1C,MAAMC,IAAI,GAAG;IAACZ,yBAAyB;IAAEQ;EAAa,CAAC;EAEvD,MAAMK,IAAI,GAAGC,KAAK,CAACC,IAAI,CAAC;IAACX,MAAM,EAAEF;EAAM,CAAC,CAAC,CAACc,GAAG,CAAC,CAACC,CAAC,EAAEC,UAAU,KAAK;IAC/D,MAAMC,KAAK,GAAGZ,QAAQ,CAACW,UAAU,CAAC;IAClC,MAAME,OAAO,GAAIC,GAAqB,IAAKlB,cAAc,CAACkB,GAAG,EAAEH,UAAU,CAAC;IAC1E,MAAMI,MAAM,GAAG,IAAIrC,eAAe,CAACmC,OAAO,EAAEX,KAAK,EAAEC,QAAQ,EAAES,KAAK,EAAEb,MAAM,EAAEM,IAAI,CAAC;IACjF,OAAOU,MAAM;EACf,CAAC,CAAC;EAEF,OAAO;IAACT,IAAI;IAAEU,QAAQ,EAAElB;EAAO,CAAC;AAClC"}