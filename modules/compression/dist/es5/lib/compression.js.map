{"version":3,"file":"compression.js","names":["_loaderUtils","require","Compression","options","_classCallCheck2","default","_defineProperty2","compressBatches","bind","decompressBatches","_createClass2","key","value","_preload","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","preload","apply","arguments","_compress","_callee2","input","_callee2$","_context2","compressSync","compress","_x","_decompress","_callee3","size","_callee3$","_context3","decompressSync","decompress","_x2","_x3","Error","concat","name","asyncIterator","_this","_wrapAsyncGenerator2","_callee4","_callee4$","_context4","_awaitAsyncGenerator2","concatenate","sent","_this2","_callee5","_callee5$","_context5","concatenateArrayBuffersAsync","improveError","error","message","includes","exports"],"sources":["../../../src/lib/compression.ts"],"sourcesContent":["// Compression interface\nimport {concatenateArrayBuffersAsync} from '@loaders.gl/loader-utils';\n\n/** Compression options */\nexport type CompressionOptions = {\n  // operation: 'compress' | 'decompress';\n  modules?: {[moduleName: string]: any};\n};\n\n/** Compression */\nexport abstract class Compression {\n  abstract readonly name: string;\n  abstract readonly extensions: string[];\n  abstract readonly contentEncodings: string[];\n  abstract readonly isSupported: boolean;\n\n  constructor(options?: CompressionOptions) {\n    this.compressBatches = this.compressBatches.bind(this);\n    this.decompressBatches = this.decompressBatches.bind(this);\n  }\n\n  /** Preloads any dynamic libraries. May enable sync functions */\n  async preload(): Promise<void> {\n    return;\n  }\n\n  /** Asynchronously compress data */\n  async compress(input: ArrayBuffer): Promise<ArrayBuffer> {\n    await this.preload();\n    return this.compressSync(input);\n  }\n\n  /** Asynchronously decompress data */\n  async decompress(input: ArrayBuffer, size?: number): Promise<ArrayBuffer> {\n    await this.preload();\n    return this.decompressSync(input, size);\n  }\n\n  /** Synchronously compress data */\n  compressSync(input: ArrayBuffer): ArrayBuffer {\n    throw new Error(`${this.name}: sync compression not supported`);\n  }\n\n  /** Synchronously compress data */\n  decompressSync(input: ArrayBuffer, size?: number): ArrayBuffer {\n    throw new Error(`${this.name}: sync decompression not supported`);\n  }\n\n  /** Compress batches */\n  async *compressBatches(\n    asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n  ): AsyncIterable<ArrayBuffer> {\n    // TODO - implement incremental compression\n    const input = await this.concatenate(asyncIterator);\n    yield this.compress(input);\n  }\n\n  /** Decompress batches */\n  async *decompressBatches(\n    asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n  ): AsyncIterable<ArrayBuffer> {\n    // TODO - implement incremental compression\n    const input = await this.concatenate(asyncIterator);\n    yield this.decompress(input);\n  }\n\n  // HELPERS\n\n  protected concatenate(asyncIterator): Promise<ArrayBuffer> {\n    return concatenateArrayBuffersAsync(asyncIterator);\n  }\n\n  protected improveError(error) {\n    if (!error.message.includes(this.name)) {\n      error.message = `${this.name} ${error.message}`;\n    }\n    return error;\n  }\n}\n"],"mappings":"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"}