{"version":3,"file":"draco-writer.js","names":["_dracoBuilder","_interopRequireDefault","require","_dracoModuleLoader","_version","DEFAULT_DRACO_WRITER_OPTIONS","pointcloud","attributeNameEntry","DracoWriter","name","id","module","version","VERSION","extensions","encode","options","draco","exports","_x","_encode","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","data","_yield$loadDracoEncod","dracoBuilder","_args","wrap","_callee$","_context","prev","next","length","undefined","loadDracoEncoderModule","sent","DRACOBuilder","abrupt","encodeSync","destroy","finish","stop"],"sources":["../../src/draco-writer.ts"],"sourcesContent":["import type {Writer, WriterOptions} from '@loaders.gl/loader-utils';\nimport type {DracoMesh} from './lib/draco-types';\nimport type {DracoBuildOptions} from './lib/draco-builder';\nimport DRACOBuilder from './lib/draco-builder';\nimport {loadDracoEncoderModule} from './lib/draco-module-loader';\nimport {VERSION} from './lib/utils/version';\n\n/** Writer Options for draco */\nexport type DracoWriterOptions = WriterOptions & {\n  draco?: DracoBuildOptions & {\n    method?: 'MESH_EDGEBREAKER_ENCODING' | 'MESH_SEQUENTIAL_ENCODING';\n    speed?: [number, number];\n    quantization?: Record<string, number>;\n    attributeNameEntry?: string;\n  };\n};\n\nconst DEFAULT_DRACO_WRITER_OPTIONS = {\n  pointcloud: false, // Set to true if pointcloud (mode: 0, no indices)\n  attributeNameEntry: 'name'\n  // Draco Compression Parameters\n  // method: 'MESH_EDGEBREAKER_ENCODING', // Use draco defaults\n  // speed: [5, 5], // Use draco defaults\n  // quantization: { // Use draco defaults\n  //   POSITION: 10\n  // }\n};\n\n/**\n * Exporter for Draco3D compressed geometries\n */\nexport const DracoWriter: Writer<DracoMesh, unknown, DracoWriterOptions> = {\n  name: 'DRACO',\n  id: 'draco',\n  module: 'draco',\n  version: VERSION,\n  extensions: ['drc'],\n  encode,\n  options: {\n    draco: DEFAULT_DRACO_WRITER_OPTIONS\n  }\n};\n\nasync function encode(data: DracoMesh, options: DracoWriterOptions = {}): Promise<ArrayBuffer> {\n  // Dynamically load draco\n  const {draco} = await loadDracoEncoderModule(options);\n  const dracoBuilder = new DRACOBuilder(draco);\n\n  try {\n    return dracoBuilder.encodeSync(data, options.draco);\n  } finally {\n    dracoBuilder.destroy();\n  }\n}\n"],"mappings":";;;;;;;;;AAGA,IAAAA,aAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,kBAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AAYA,IAAMG,4BAA4B,GAAG;EACnCC,UAAU,EAAE,KAAK;EACjBC,kBAAkB,EAAE;AAOtB,CAAC;AAKM,IAAMC,WAA2D,GAAG;EACzEC,IAAI,EAAE,OAAO;EACbC,EAAE,EAAE,OAAO;EACXC,MAAM,EAAE,OAAO;EACfC,OAAO,EAAEC,gBAAO;EAChBC,UAAU,EAAE,CAAC,KAAK,CAAC;EACnBC,MAAM,EAANA,MAAM;EACNC,OAAO,EAAE;IACPC,KAAK,EAAEZ;EACT;AACF,CAAC;AAACa,OAAA,CAAAV,WAAA,GAAAA,WAAA;AAAA,SAEaO,MAAMA,CAAAI,EAAA;EAAA,OAAAC,OAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,QAAA;EAAAA,OAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAArB,SAAAC,QAAsBC,IAAe;IAAA,IAAAZ,OAAA;MAAAa,qBAAA;MAAAZ,KAAA;MAAAa,YAAA;MAAAC,KAAA,GAAAT,SAAA;IAAA,OAAAG,YAAA,CAAAD,OAAA,CAAAQ,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAEpB,OAA2B,GAAAe,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;UAAAG,QAAA,CAAAE,IAAA;UAAA,OAE/C,IAAAG,yCAAsB,EAACvB,OAAO,CAAC;QAAA;UAAAa,qBAAA,GAAAK,QAAA,CAAAM,IAAA;UAA9CvB,KAAK,GAAAY,qBAAA,CAALZ,KAAK;UACNa,YAAY,GAAG,IAAIW,qBAAY,CAACxB,KAAK,CAAC;UAAAiB,QAAA,CAAAC,IAAA;UAAA,OAAAD,QAAA,CAAAQ,MAAA,WAGnCZ,YAAY,CAACa,UAAU,CAACf,IAAI,EAAEZ,OAAO,CAACC,KAAK,CAAC;QAAA;UAAAiB,QAAA,CAAAC,IAAA;UAEnDL,YAAY,CAACc,OAAO,CAAC,CAAC;UAAC,OAAAV,QAAA,CAAAW,MAAA;QAAA;QAAA;UAAA,OAAAX,QAAA,CAAAY,IAAA;MAAA;IAAA,GAAAnB,OAAA;EAAA,CAE1B;EAAA,OAAAP,OAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}