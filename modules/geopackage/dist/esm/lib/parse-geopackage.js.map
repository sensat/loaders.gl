{"version":3,"file":"parse-geopackage.js","names":["initSqlJs","WKBLoader","binaryToGeometry","transformGeoJsonCoords","Proj4Projection","DEFAULT_SQLJS_CDN","ENVELOPE_BYTE_LENGTHS","SQL_TYPE_MAPPING","BOOLEAN","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","FLOAT","DOUBLE","REAL","TEXT","BLOB","DATE","DATETIME","GEOMETRY","POINT","LINESTRING","POLYGON","MULTIPOINT","MULTILINESTRING","MULTIPOLYGON","GEOMETRYCOLLECTION","parseGeoPackage","arrayBuffer","options","sqlJsCDN","geopackage","reproject","_targetCrs","format","gis","db","loadDatabase","tables","listVectorTables","projections","getProjections","outputTables","shape","table","table_name","tableName","push","name","getVectorTable","formatTablesAsGeojson","SQL","locateFile","file","concat","Database","Uint8Array","stmt","prepare","vectorTablesInfo","step","vectorTableInfo","getAsObject","_ref","dataColumns","getDataColumns","geomColumn","getGeometryColumn","featureIdColumn","getFeatureIdName","columns","values","exec","projection","geomColumnProjStr","srs_id","from","to","geojsonFeatures","row","geojsonFeature","constructGeoJsonFeature","schema","getSchema","data","project","projectionMapping","srsInfo","definition","idIdx","indexOf","id","geomColumnIdx","column_name","geometry","parseGeometry","buffer","properties","key","value","Object","entries","idx","i","length","columnName","type","getGeopackageVersion","textDecoder","TextDecoder","applicationIdQuery","applicationId","ArrayBuffer","view","DataView","setInt32","Number","versionString","decode","userVersionQuery","userVersionInt","pragmaTableInfo","pk","envelopeLength","emptyGeometry","parseGeometryBitFlags","getUint8","wkbOffset","binaryGeometry","parseSync","slice","byte","envelopeValue","littleEndian","Boolean","extendedGeometryType","bind","geometryColumn","error","message","includes","result","column","fields","sqlType","notnull","field","nullable","metadata","geojsonMap"],"sources":["../../../src/lib/parse-geopackage.ts"],"sourcesContent":["/* eslint-disable camelcase, @typescript-eslint/no-use-before-define */\nimport type {GeoPackageLoaderOptions} from '../geopackage-loader';\nimport initSqlJs, {SqlJsStatic, Database, Statement} from 'sql.js';\nimport {WKBLoader} from '@loaders.gl/wkt';\nimport {\n  Schema,\n  Field,\n  Geometry,\n  DataType,\n  Tables,\n  ObjectRowTable,\n  Feature\n} from '@loaders.gl/schema';\nimport {binaryToGeometry, transformGeoJsonCoords} from '@loaders.gl/gis';\nimport {Proj4Projection} from '@math.gl/proj4';\nimport {\n  GeometryColumnsRow,\n  ContentsRow,\n  SpatialRefSysRow,\n  ProjectionMapping,\n  GeometryBitFlags,\n  DataColumnsRow,\n  DataColumnsMapping,\n  PragmaTableInfoRow,\n  SQLiteTypes,\n  GeoPackageGeometryTypes\n} from './types';\n\n// We pin to the same version as sql.js that we use.\n// As of March 2022, versions 1.6.0, 1.6.1, and 1.6.2 of sql.js appeared not to work.\nexport const DEFAULT_SQLJS_CDN = 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.5.0/';\n\n// https://www.geopackage.org/spec121/#flags_layout\nconst ENVELOPE_BYTE_LENGTHS = {\n  0: 0,\n  1: 32,\n  2: 48,\n  3: 48,\n  4: 64,\n  // values 5-7 are invalid and _should_ never show up\n  5: 0,\n  6: 0,\n  7: 0\n};\n\n// Documentation: https://www.geopackage.org/spec130/index.html#table_column_data_types\nconst SQL_TYPE_MAPPING: {[type in SQLiteTypes | GeoPackageGeometryTypes]: DataType} = {\n  BOOLEAN: 'bool',\n  TINYINT: 'int8',\n  SMALLINT: 'int16',\n  MEDIUMINT: 'int32',\n  INT: 'int32',\n  INTEGER: 'int32',\n  FLOAT: 'float32',\n  DOUBLE: 'float64',\n  REAL: 'float64',\n  TEXT: 'utf8',\n  BLOB: 'binary',\n  DATE: 'utf8',\n  DATETIME: 'utf8',\n  GEOMETRY: 'binary',\n  POINT: 'binary',\n  LINESTRING: 'binary',\n  POLYGON: 'binary',\n  MULTIPOINT: 'binary',\n  MULTILINESTRING: 'binary',\n  MULTIPOLYGON: 'binary',\n  GEOMETRYCOLLECTION: 'binary'\n};\n\nexport default async function parseGeoPackage(\n  arrayBuffer: ArrayBuffer,\n  options?: GeoPackageLoaderOptions\n): Promise<Tables<ObjectRowTable> | Record<string, Feature[]>> {\n  const {sqlJsCDN = DEFAULT_SQLJS_CDN} = options?.geopackage || {};\n  const {reproject = false, _targetCrs = 'WGS84', format = 'tables'} = options?.gis || {};\n\n  const db = await loadDatabase(arrayBuffer, sqlJsCDN);\n  const tables = listVectorTables(db);\n  const projections = getProjections(db);\n\n  // Mapping from tableName to geojson feature collection\n  const outputTables: Tables<ObjectRowTable> = {\n    shape: 'tables',\n    tables: []\n  };\n\n  for (const table of tables) {\n    const {table_name: tableName} = table;\n    outputTables.tables.push({\n      name: tableName,\n      table: getVectorTable(db, tableName, projections, {\n        reproject,\n        _targetCrs\n      })\n    });\n  }\n\n  if (format === 'geojson') {\n    return formatTablesAsGeojson(outputTables);\n  }\n\n  return outputTables;\n}\n\n/**\n * Initialize SQL.js and create database\n *\n * @param arrayBuffer input bytes\n * @return SQL.js database object\n */\nasync function loadDatabase(arrayBuffer: ArrayBuffer, sqlJsCDN: string | null): Promise<Database> {\n  // In Node, `locateFile` must not be passed\n  let SQL: SqlJsStatic;\n  if (sqlJsCDN) {\n    SQL = await initSqlJs({\n      locateFile: (file) => `${sqlJsCDN}${file}`\n    });\n  } else {\n    SQL = await initSqlJs();\n  }\n  return new SQL.Database(new Uint8Array(arrayBuffer));\n}\n\n/**\n * Find all vector tables in GeoPackage\n * This queries the `gpkg_contents` table to find a list of vector tables\n *\n * @param db GeoPackage to query\n * @return list of table references\n */\nfunction listVectorTables(db: Database): ContentsRow[] {\n  // The gpkg_contents table can have at least three categorical values for\n  // data_type.\n  // - 'features' refers to a vector geometry table\n  // (https://www.geopackage.org/spec121/#_contents_2)\n  // - 'tiles' refers to a raster table\n  // (https://www.geopackage.org/spec121/#_contents_3)\n  // - 'attributes' refers to a data table with no geometry\n  // (https://www.geopackage.org/spec121/#_contents_4).\n\n  // We hard code 'features' because for now we don't support raster data or pure attribute data\n  // eslint-disable-next-line quotes\n  const stmt = db.prepare(\"SELECT * FROM gpkg_contents WHERE data_type='features';\");\n\n  const vectorTablesInfo: ContentsRow[] = [];\n  while (stmt.step()) {\n    const vectorTableInfo = stmt.getAsObject() as unknown as ContentsRow;\n    vectorTablesInfo.push(vectorTableInfo);\n  }\n\n  return vectorTablesInfo;\n}\n\n/**\n * Load geometries from vector table\n *\n * @param db GeoPackage object\n * @param tableName name of vector table to query\n * @param projections keys are srs_id values, values are WKT strings\n * @returns Array of GeoJSON Feature objects\n */\nfunction getVectorTable(\n  db: Database,\n  tableName: string,\n  projections: ProjectionMapping,\n  {reproject, _targetCrs}: {reproject: boolean; _targetCrs: string}\n): ObjectRowTable {\n  const dataColumns = getDataColumns(db, tableName);\n  const geomColumn = getGeometryColumn(db, tableName);\n  const featureIdColumn = getFeatureIdName(db, tableName);\n\n  // Get vector features from table\n  // Don't think it's possible to parameterize the table name in SQLite?\n  const {columns, values} = db.exec(`SELECT * FROM \\`${tableName}\\`;`)[0];\n\n  let projection;\n  if (reproject) {\n    const geomColumnProjStr = projections[geomColumn.srs_id];\n    projection = new Proj4Projection({\n      from: geomColumnProjStr,\n      to: _targetCrs\n    });\n  }\n\n  const geojsonFeatures: object[] = [];\n  for (const row of values) {\n    const geojsonFeature = constructGeoJsonFeature(\n      columns,\n      row,\n      geomColumn,\n      // @ts-ignore\n      dataColumns,\n      featureIdColumn\n    );\n    geojsonFeatures.push(geojsonFeature);\n  }\n\n  const schema = getSchema(db, tableName);\n  if (projection) {\n    return {\n      shape: 'object-row-table',\n      data: transformGeoJsonCoords(geojsonFeatures, projection.project),\n      schema\n    };\n  }\n\n  return {data: geojsonFeatures, schema, shape: 'object-row-table'};\n}\n\n/**\n * Find all projections defined in GeoPackage\n * This queries the gpkg_spatial_ref_sys table\n * @param db GeoPackage object\n * @returns mapping from srid to WKT projection string\n */\nfunction getProjections(db: Database): ProjectionMapping {\n  // Query gpkg_spatial_ref_sys to get srid: srtext mappings\n  const stmt = db.prepare('SELECT * FROM gpkg_spatial_ref_sys;');\n\n  const projectionMapping: ProjectionMapping = {};\n  while (stmt.step()) {\n    const srsInfo = stmt.getAsObject() as unknown as SpatialRefSysRow;\n    const {srs_id, definition} = srsInfo;\n    projectionMapping[srs_id] = definition;\n  }\n\n  return projectionMapping;\n}\n\n/**\n * Construct single GeoJSON feature given row's data\n * @param columns array of ordered column identifiers\n * @param row array of ordered values representing row's data\n * @param geomColumn geometry column metadata\n * @param dataColumns mapping from table column names to property name\n * @returns GeoJSON Feature object\n */\nfunction constructGeoJsonFeature(\n  columns: string[],\n  row: any[],\n  geomColumn: GeometryColumnsRow,\n  dataColumns: DataColumnsMapping,\n  featureIdColumn: string\n): Feature<Geometry | null> {\n  // Find feature id\n  const idIdx = columns.indexOf(featureIdColumn);\n  const id = row[idIdx];\n\n  // Parse geometry columns to geojson\n  const geomColumnIdx = columns.indexOf(geomColumn.column_name);\n  const geometry = parseGeometry(row[geomColumnIdx].buffer);\n\n  const properties = {};\n  if (dataColumns) {\n    for (const [key, value] of Object.entries(dataColumns)) {\n      const idx = columns.indexOf(key);\n      // @ts-ignore TODO - Check what happens if null?\n      properties[value] = row[idx];\n    }\n  } else {\n    // Put all columns except for the feature id and geometry in properties\n    for (let i = 0; i < columns.length; i++) {\n      if (i === idIdx || i === geomColumnIdx) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      const columnName = columns[i];\n      properties[columnName] = row[i];\n    }\n  }\n\n  return {\n    id,\n    type: 'Feature',\n    geometry,\n    properties\n  };\n}\n\n/**\n * Get GeoPackage version from database\n * @param db database\n * @returns version string. One of '1.0', '1.1', '1.2'\n */\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction getGeopackageVersion(db: Database): string | null {\n  const textDecoder = new TextDecoder();\n\n  // Read application id from SQLite metadata\n  const applicationIdQuery = db.exec('PRAGMA application_id;')[0];\n  const applicationId = applicationIdQuery.values[0][0];\n\n  // Convert 4-byte signed int32 application id to text\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  view.setInt32(0, Number(applicationId));\n  const versionString = textDecoder.decode(buffer);\n\n  if (versionString === 'GP10') {\n    return '1.0';\n  }\n\n  if (versionString === 'GP11') {\n    return '1.1';\n  }\n\n  // If versionString is GPKG, then read user_version\n  const userVersionQuery = db.exec('PRAGMA user_version;')[0];\n  const userVersionInt = userVersionQuery.values[0][0];\n\n  if (userVersionInt && typeof userVersionInt === 'number' && userVersionInt < 10300) {\n    return '1.2';\n  }\n\n  return null;\n}\n\n/**\n * Find name of feature id column in table\n * The feature ID is the primary key of the table.\n * http://www.geopackage.org/spec121/#feature_user_tables\n *\n * @param db database\n * @param tableName name of table\n * @return name of feature id column\n */\nfunction getFeatureIdName(db: Database, tableName: string): string | null {\n  // Again, not possible to parameterize table name?\n  const stmt = db.prepare(`PRAGMA table_info(\\`${tableName}\\`)`);\n\n  while (stmt.step()) {\n    const pragmaTableInfo = stmt.getAsObject() as unknown as PragmaTableInfoRow;\n    const {name, pk} = pragmaTableInfo;\n    if (pk) {\n      return name;\n    }\n  }\n\n  // Is it guaranteed for there always to be at least one primary key column in the table?\n  return null;\n}\n\n/**\n * Parse geometry buffer\n * GeoPackage vector geometries are slightly extended past the WKB standard\n * See: https://www.geopackage.org/spec121/#gpb_format\n *\n * @param arrayBuffer geometry buffer\n * @return GeoJSON geometry (in original CRS)\n */\nfunction parseGeometry(arrayBuffer: ArrayBuffer): Geometry | null {\n  const view = new DataView(arrayBuffer);\n  const {envelopeLength, emptyGeometry} = parseGeometryBitFlags(view.getUint8(3));\n\n  // A Feature object has a member with the name \"geometry\".  The value of the\n  // geometry member SHALL be either a Geometry object as defined above or, in\n  // the case that the Feature is unlocated, a JSON null value.\n  /** @see https://tools.ietf.org/html/rfc7946#section-3.2 */\n  if (emptyGeometry) {\n    return null;\n  }\n\n  // Do I need to find the srid here? Is it necessarily the same for every\n  // geometry in a table?\n  // const srid = view.getInt32(4, littleEndian);\n\n  // 2 byte magic, 1 byte version, 1 byte flags, 4 byte int32 srid\n  const wkbOffset = 8 + envelopeLength;\n\n  // Loaders should not depend on `core` and the context passed to the main loader doesn't include a\n  // `parseSync` option, so instead we call parseSync directly on WKBLoader\n  const binaryGeometry = WKBLoader.parseSync(arrayBuffer.slice(wkbOffset));\n\n  return binaryToGeometry(binaryGeometry);\n}\n\n/**\n * Parse geometry header flags\n * https://www.geopackage.org/spec121/#flags_layout\n *\n * @param byte uint8 number representing flags\n * @return object representing information from bit flags\n */\nfunction parseGeometryBitFlags(byte: number): GeometryBitFlags {\n  // Are header values little endian?\n  const envelopeValue = (byte & 0b00001110) / 2;\n\n  // TODO: Not sure the best way to handle this. Throw an error if envelopeValue outside 0-7?\n  const envelopeLength = ENVELOPE_BYTE_LENGTHS[envelopeValue] as number;\n\n  return {\n    littleEndian: Boolean(byte & 0b00000001),\n    envelopeLength,\n    emptyGeometry: Boolean(byte & 0b00010000),\n    extendedGeometryType: Boolean(byte & 0b00100000)\n  };\n}\n\n/**\n * Find geometry column in given vector table\n *\n * @param db GeoPackage object\n * @param tableName Name of vector table\n * @returns Array of geometry column definitions\n */\nfunction getGeometryColumn(db: Database, tableName: string): GeometryColumnsRow {\n  const stmt = db.prepare('SELECT * FROM gpkg_geometry_columns WHERE table_name=:tableName;');\n  stmt.bind({':tableName': tableName});\n\n  // > Requirement 30\n  // > A feature table SHALL have only one geometry column.\n  // https://www.geopackage.org/spec121/#feature_user_tables\n  // So we should need one and only one step, given that we use the WHERE clause in the SQL query\n  // above\n  stmt.step();\n  const geometryColumn = stmt.getAsObject() as unknown as GeometryColumnsRow;\n  return geometryColumn;\n}\n\n/**\n * Find property columns in given vector table\n * @param db GeoPackage object\n * @param tableName Name of vector table\n * @returns Mapping from table column names to property name\n */\nfunction getDataColumns(db: Database, tableName: string): DataColumnsMapping | null {\n  // gpkg_data_columns is not required to exist\n  // https://www.geopackage.org/spec121/#extension_schema\n  let stmt: Statement;\n  try {\n    stmt = db.prepare('SELECT * FROM gpkg_data_columns WHERE table_name=:tableName;');\n  } catch (error) {\n    if ((error as Error).message.includes('no such table')) {\n      return null;\n    }\n\n    throw error;\n  }\n\n  stmt.bind({':tableName': tableName});\n\n  // Convert DataColumnsRow object this to a key-value {column_name: name}\n  const result: DataColumnsMapping = {};\n  while (stmt.step()) {\n    const column = stmt.getAsObject() as unknown as DataColumnsRow;\n    const {column_name, name} = column;\n    result[column_name] = name || null;\n  }\n\n  return result;\n}\n\n/**\n * Get arrow schema\n * @param db GeoPackage object\n * @param tableName  table name\n * @returns Arrow-like Schema\n */\nfunction getSchema(db: Database, tableName: string): Schema {\n  const stmt = db.prepare(`PRAGMA table_info(\\`${tableName}\\`)`);\n\n  const fields: Field[] = [];\n  while (stmt.step()) {\n    const pragmaTableInfo = stmt.getAsObject() as unknown as PragmaTableInfoRow;\n    const {name, type: sqlType, notnull} = pragmaTableInfo;\n    const type = SQL_TYPE_MAPPING[sqlType];\n    const field = {name, type, nullable: !notnull};\n    fields.push(field);\n  }\n\n  return {fields, metadata: {}};\n}\n\nfunction formatTablesAsGeojson(tables: Tables<ObjectRowTable>): Record<string, Feature[]> {\n  const geojsonMap = {};\n  for (const table of tables.tables) {\n    geojsonMap[table.name] = table.table.data;\n  }\n  return geojsonMap;\n}\n"],"mappings":"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"}