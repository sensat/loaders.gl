{"version":3,"file":"parse-geopackage.js","names":["_sql","_interopRequireDefault","require","_wkt","_gis","_proj","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","DEFAULT_SQLJS_CDN","exports","ENVELOPE_BYTE_LENGTHS","SQL_TYPE_MAPPING","BOOLEAN","TINYINT","SMALLINT","MEDIUMINT","INT","INTEGER","FLOAT","DOUBLE","REAL","TEXT","BLOB","DATE","DATETIME","GEOMETRY","POINT","LINESTRING","POLYGON","MULTIPOINT","MULTILINESTRING","MULTIPOLYGON","GEOMETRYCOLLECTION","parseGeoPackage","_x","_x2","_parseGeoPackage","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","arrayBuffer","options","_ref2","_ref2$sqlJsCDN","sqlJsCDN","_ref3","_ref3$reproject","reproject","_ref3$_targetCrs","_targetCrs","_ref3$format","format","db","tables","projections","outputTables","_iterator3","_step3","table","tableName","wrap","_callee$","_context","prev","geopackage","gis","loadDatabase","sent","listVectorTables","getProjections","shape","table_name","push","getVectorTable","abrupt","formatTablesAsGeojson","stop","_x3","_x4","_loadDatabase","_callee2","SQL","_callee2$","_context2","initSqlJs","locateFile","file","concat","Database","Uint8Array","stmt","prepare","vectorTablesInfo","vectorTableInfo","getAsObject","_ref","dataColumns","getDataColumns","geomColumn","getGeometryColumn","featureIdColumn","getFeatureIdName","_db$exec$","exec","columns","values","projection","geomColumnProjStr","srs_id","Proj4Projection","to","geojsonFeatures","_iterator","_step","row","geojsonFeature","constructGeoJsonFeature","schema","getSchema","data","transformGeoJsonCoords","project","projectionMapping","srsInfo","definition","idIdx","indexOf","id","geomColumnIdx","column_name","geometry","parseGeometry","buffer","properties","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray2","key","idx","columnName","type","getGeopackageVersion","textDecoder","TextDecoder","applicationIdQuery","applicationId","ArrayBuffer","view","DataView","setInt32","Number","versionString","decode","userVersionQuery","userVersionInt","pragmaTableInfo","pk","_parseGeometryBitFlag","parseGeometryBitFlags","getUint8","envelopeLength","emptyGeometry","wkbOffset","binaryGeometry","WKBLoader","parseSync","binaryToGeometry","byte","envelopeValue","littleEndian","Boolean","extendedGeometryType","bind","geometryColumn","error","message","includes","result","column","fields","sqlType","notnull","field","nullable","metadata","geojsonMap","_iterator2","_step2"],"sources":["../../../src/lib/parse-geopackage.ts"],"sourcesContent":["/* eslint-disable camelcase, @typescript-eslint/no-use-before-define */\nimport type {GeoPackageLoaderOptions} from '../geopackage-loader';\nimport initSqlJs, {SqlJsStatic, Database, Statement} from 'sql.js';\nimport {WKBLoader} from '@loaders.gl/wkt';\nimport {\n  Schema,\n  Field,\n  Geometry,\n  DataType,\n  Tables,\n  ObjectRowTable,\n  Feature\n} from '@loaders.gl/schema';\nimport {binaryToGeometry, transformGeoJsonCoords} from '@loaders.gl/gis';\nimport {Proj4Projection} from '@math.gl/proj4';\nimport {\n  GeometryColumnsRow,\n  ContentsRow,\n  SpatialRefSysRow,\n  ProjectionMapping,\n  GeometryBitFlags,\n  DataColumnsRow,\n  DataColumnsMapping,\n  PragmaTableInfoRow,\n  SQLiteTypes,\n  GeoPackageGeometryTypes\n} from './types';\n\n// We pin to the same version as sql.js that we use.\n// As of March 2022, versions 1.6.0, 1.6.1, and 1.6.2 of sql.js appeared not to work.\nexport const DEFAULT_SQLJS_CDN = 'https://cdnjs.cloudflare.com/ajax/libs/sql.js/1.5.0/';\n\n// https://www.geopackage.org/spec121/#flags_layout\nconst ENVELOPE_BYTE_LENGTHS = {\n  0: 0,\n  1: 32,\n  2: 48,\n  3: 48,\n  4: 64,\n  // values 5-7 are invalid and _should_ never show up\n  5: 0,\n  6: 0,\n  7: 0\n};\n\n// Documentation: https://www.geopackage.org/spec130/index.html#table_column_data_types\nconst SQL_TYPE_MAPPING: {[type in SQLiteTypes | GeoPackageGeometryTypes]: DataType} = {\n  BOOLEAN: 'bool',\n  TINYINT: 'int8',\n  SMALLINT: 'int16',\n  MEDIUMINT: 'int32',\n  INT: 'int32',\n  INTEGER: 'int32',\n  FLOAT: 'float32',\n  DOUBLE: 'float64',\n  REAL: 'float64',\n  TEXT: 'utf8',\n  BLOB: 'binary',\n  DATE: 'utf8',\n  DATETIME: 'utf8',\n  GEOMETRY: 'binary',\n  POINT: 'binary',\n  LINESTRING: 'binary',\n  POLYGON: 'binary',\n  MULTIPOINT: 'binary',\n  MULTILINESTRING: 'binary',\n  MULTIPOLYGON: 'binary',\n  GEOMETRYCOLLECTION: 'binary'\n};\n\nexport default async function parseGeoPackage(\n  arrayBuffer: ArrayBuffer,\n  options?: GeoPackageLoaderOptions\n): Promise<Tables<ObjectRowTable> | Record<string, Feature[]>> {\n  const {sqlJsCDN = DEFAULT_SQLJS_CDN} = options?.geopackage || {};\n  const {reproject = false, _targetCrs = 'WGS84', format = 'tables'} = options?.gis || {};\n\n  const db = await loadDatabase(arrayBuffer, sqlJsCDN);\n  const tables = listVectorTables(db);\n  const projections = getProjections(db);\n\n  // Mapping from tableName to geojson feature collection\n  const outputTables: Tables<ObjectRowTable> = {\n    shape: 'tables',\n    tables: []\n  };\n\n  for (const table of tables) {\n    const {table_name: tableName} = table;\n    outputTables.tables.push({\n      name: tableName,\n      table: getVectorTable(db, tableName, projections, {\n        reproject,\n        _targetCrs\n      })\n    });\n  }\n\n  if (format === 'geojson') {\n    return formatTablesAsGeojson(outputTables);\n  }\n\n  return outputTables;\n}\n\n/**\n * Initialize SQL.js and create database\n *\n * @param arrayBuffer input bytes\n * @return SQL.js database object\n */\nasync function loadDatabase(arrayBuffer: ArrayBuffer, sqlJsCDN: string | null): Promise<Database> {\n  // In Node, `locateFile` must not be passed\n  let SQL: SqlJsStatic;\n  if (sqlJsCDN) {\n    SQL = await initSqlJs({\n      locateFile: (file) => `${sqlJsCDN}${file}`\n    });\n  } else {\n    SQL = await initSqlJs();\n  }\n  return new SQL.Database(new Uint8Array(arrayBuffer));\n}\n\n/**\n * Find all vector tables in GeoPackage\n * This queries the `gpkg_contents` table to find a list of vector tables\n *\n * @param db GeoPackage to query\n * @return list of table references\n */\nfunction listVectorTables(db: Database): ContentsRow[] {\n  // The gpkg_contents table can have at least three categorical values for\n  // data_type.\n  // - 'features' refers to a vector geometry table\n  // (https://www.geopackage.org/spec121/#_contents_2)\n  // - 'tiles' refers to a raster table\n  // (https://www.geopackage.org/spec121/#_contents_3)\n  // - 'attributes' refers to a data table with no geometry\n  // (https://www.geopackage.org/spec121/#_contents_4).\n\n  // We hard code 'features' because for now we don't support raster data or pure attribute data\n  // eslint-disable-next-line quotes\n  const stmt = db.prepare(\"SELECT * FROM gpkg_contents WHERE data_type='features';\");\n\n  const vectorTablesInfo: ContentsRow[] = [];\n  while (stmt.step()) {\n    const vectorTableInfo = stmt.getAsObject() as unknown as ContentsRow;\n    vectorTablesInfo.push(vectorTableInfo);\n  }\n\n  return vectorTablesInfo;\n}\n\n/**\n * Load geometries from vector table\n *\n * @param db GeoPackage object\n * @param tableName name of vector table to query\n * @param projections keys are srs_id values, values are WKT strings\n * @returns Array of GeoJSON Feature objects\n */\nfunction getVectorTable(\n  db: Database,\n  tableName: string,\n  projections: ProjectionMapping,\n  {reproject, _targetCrs}: {reproject: boolean; _targetCrs: string}\n): ObjectRowTable {\n  const dataColumns = getDataColumns(db, tableName);\n  const geomColumn = getGeometryColumn(db, tableName);\n  const featureIdColumn = getFeatureIdName(db, tableName);\n\n  // Get vector features from table\n  // Don't think it's possible to parameterize the table name in SQLite?\n  const {columns, values} = db.exec(`SELECT * FROM \\`${tableName}\\`;`)[0];\n\n  let projection;\n  if (reproject) {\n    const geomColumnProjStr = projections[geomColumn.srs_id];\n    projection = new Proj4Projection({\n      from: geomColumnProjStr,\n      to: _targetCrs\n    });\n  }\n\n  const geojsonFeatures: object[] = [];\n  for (const row of values) {\n    const geojsonFeature = constructGeoJsonFeature(\n      columns,\n      row,\n      geomColumn,\n      // @ts-ignore\n      dataColumns,\n      featureIdColumn\n    );\n    geojsonFeatures.push(geojsonFeature);\n  }\n\n  const schema = getSchema(db, tableName);\n  if (projection) {\n    return {\n      shape: 'object-row-table',\n      data: transformGeoJsonCoords(geojsonFeatures, projection.project),\n      schema\n    };\n  }\n\n  return {data: geojsonFeatures, schema, shape: 'object-row-table'};\n}\n\n/**\n * Find all projections defined in GeoPackage\n * This queries the gpkg_spatial_ref_sys table\n * @param db GeoPackage object\n * @returns mapping from srid to WKT projection string\n */\nfunction getProjections(db: Database): ProjectionMapping {\n  // Query gpkg_spatial_ref_sys to get srid: srtext mappings\n  const stmt = db.prepare('SELECT * FROM gpkg_spatial_ref_sys;');\n\n  const projectionMapping: ProjectionMapping = {};\n  while (stmt.step()) {\n    const srsInfo = stmt.getAsObject() as unknown as SpatialRefSysRow;\n    const {srs_id, definition} = srsInfo;\n    projectionMapping[srs_id] = definition;\n  }\n\n  return projectionMapping;\n}\n\n/**\n * Construct single GeoJSON feature given row's data\n * @param columns array of ordered column identifiers\n * @param row array of ordered values representing row's data\n * @param geomColumn geometry column metadata\n * @param dataColumns mapping from table column names to property name\n * @returns GeoJSON Feature object\n */\nfunction constructGeoJsonFeature(\n  columns: string[],\n  row: any[],\n  geomColumn: GeometryColumnsRow,\n  dataColumns: DataColumnsMapping,\n  featureIdColumn: string\n): Feature<Geometry | null> {\n  // Find feature id\n  const idIdx = columns.indexOf(featureIdColumn);\n  const id = row[idIdx];\n\n  // Parse geometry columns to geojson\n  const geomColumnIdx = columns.indexOf(geomColumn.column_name);\n  const geometry = parseGeometry(row[geomColumnIdx].buffer);\n\n  const properties = {};\n  if (dataColumns) {\n    for (const [key, value] of Object.entries(dataColumns)) {\n      const idx = columns.indexOf(key);\n      // @ts-ignore TODO - Check what happens if null?\n      properties[value] = row[idx];\n    }\n  } else {\n    // Put all columns except for the feature id and geometry in properties\n    for (let i = 0; i < columns.length; i++) {\n      if (i === idIdx || i === geomColumnIdx) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      const columnName = columns[i];\n      properties[columnName] = row[i];\n    }\n  }\n\n  return {\n    id,\n    type: 'Feature',\n    geometry,\n    properties\n  };\n}\n\n/**\n * Get GeoPackage version from database\n * @param db database\n * @returns version string. One of '1.0', '1.1', '1.2'\n */\n\n// @ts-ignore\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction getGeopackageVersion(db: Database): string | null {\n  const textDecoder = new TextDecoder();\n\n  // Read application id from SQLite metadata\n  const applicationIdQuery = db.exec('PRAGMA application_id;')[0];\n  const applicationId = applicationIdQuery.values[0][0];\n\n  // Convert 4-byte signed int32 application id to text\n  const buffer = new ArrayBuffer(4);\n  const view = new DataView(buffer);\n  view.setInt32(0, Number(applicationId));\n  const versionString = textDecoder.decode(buffer);\n\n  if (versionString === 'GP10') {\n    return '1.0';\n  }\n\n  if (versionString === 'GP11') {\n    return '1.1';\n  }\n\n  // If versionString is GPKG, then read user_version\n  const userVersionQuery = db.exec('PRAGMA user_version;')[0];\n  const userVersionInt = userVersionQuery.values[0][0];\n\n  if (userVersionInt && typeof userVersionInt === 'number' && userVersionInt < 10300) {\n    return '1.2';\n  }\n\n  return null;\n}\n\n/**\n * Find name of feature id column in table\n * The feature ID is the primary key of the table.\n * http://www.geopackage.org/spec121/#feature_user_tables\n *\n * @param db database\n * @param tableName name of table\n * @return name of feature id column\n */\nfunction getFeatureIdName(db: Database, tableName: string): string | null {\n  // Again, not possible to parameterize table name?\n  const stmt = db.prepare(`PRAGMA table_info(\\`${tableName}\\`)`);\n\n  while (stmt.step()) {\n    const pragmaTableInfo = stmt.getAsObject() as unknown as PragmaTableInfoRow;\n    const {name, pk} = pragmaTableInfo;\n    if (pk) {\n      return name;\n    }\n  }\n\n  // Is it guaranteed for there always to be at least one primary key column in the table?\n  return null;\n}\n\n/**\n * Parse geometry buffer\n * GeoPackage vector geometries are slightly extended past the WKB standard\n * See: https://www.geopackage.org/spec121/#gpb_format\n *\n * @param arrayBuffer geometry buffer\n * @return GeoJSON geometry (in original CRS)\n */\nfunction parseGeometry(arrayBuffer: ArrayBuffer): Geometry | null {\n  const view = new DataView(arrayBuffer);\n  const {envelopeLength, emptyGeometry} = parseGeometryBitFlags(view.getUint8(3));\n\n  // A Feature object has a member with the name \"geometry\".  The value of the\n  // geometry member SHALL be either a Geometry object as defined above or, in\n  // the case that the Feature is unlocated, a JSON null value.\n  /** @see https://tools.ietf.org/html/rfc7946#section-3.2 */\n  if (emptyGeometry) {\n    return null;\n  }\n\n  // Do I need to find the srid here? Is it necessarily the same for every\n  // geometry in a table?\n  // const srid = view.getInt32(4, littleEndian);\n\n  // 2 byte magic, 1 byte version, 1 byte flags, 4 byte int32 srid\n  const wkbOffset = 8 + envelopeLength;\n\n  // Loaders should not depend on `core` and the context passed to the main loader doesn't include a\n  // `parseSync` option, so instead we call parseSync directly on WKBLoader\n  const binaryGeometry = WKBLoader.parseSync(arrayBuffer.slice(wkbOffset));\n\n  return binaryToGeometry(binaryGeometry);\n}\n\n/**\n * Parse geometry header flags\n * https://www.geopackage.org/spec121/#flags_layout\n *\n * @param byte uint8 number representing flags\n * @return object representing information from bit flags\n */\nfunction parseGeometryBitFlags(byte: number): GeometryBitFlags {\n  // Are header values little endian?\n  const envelopeValue = (byte & 0b00001110) / 2;\n\n  // TODO: Not sure the best way to handle this. Throw an error if envelopeValue outside 0-7?\n  const envelopeLength = ENVELOPE_BYTE_LENGTHS[envelopeValue] as number;\n\n  return {\n    littleEndian: Boolean(byte & 0b00000001),\n    envelopeLength,\n    emptyGeometry: Boolean(byte & 0b00010000),\n    extendedGeometryType: Boolean(byte & 0b00100000)\n  };\n}\n\n/**\n * Find geometry column in given vector table\n *\n * @param db GeoPackage object\n * @param tableName Name of vector table\n * @returns Array of geometry column definitions\n */\nfunction getGeometryColumn(db: Database, tableName: string): GeometryColumnsRow {\n  const stmt = db.prepare('SELECT * FROM gpkg_geometry_columns WHERE table_name=:tableName;');\n  stmt.bind({':tableName': tableName});\n\n  // > Requirement 30\n  // > A feature table SHALL have only one geometry column.\n  // https://www.geopackage.org/spec121/#feature_user_tables\n  // So we should need one and only one step, given that we use the WHERE clause in the SQL query\n  // above\n  stmt.step();\n  const geometryColumn = stmt.getAsObject() as unknown as GeometryColumnsRow;\n  return geometryColumn;\n}\n\n/**\n * Find property columns in given vector table\n * @param db GeoPackage object\n * @param tableName Name of vector table\n * @returns Mapping from table column names to property name\n */\nfunction getDataColumns(db: Database, tableName: string): DataColumnsMapping | null {\n  // gpkg_data_columns is not required to exist\n  // https://www.geopackage.org/spec121/#extension_schema\n  let stmt: Statement;\n  try {\n    stmt = db.prepare('SELECT * FROM gpkg_data_columns WHERE table_name=:tableName;');\n  } catch (error) {\n    if ((error as Error).message.includes('no such table')) {\n      return null;\n    }\n\n    throw error;\n  }\n\n  stmt.bind({':tableName': tableName});\n\n  // Convert DataColumnsRow object this to a key-value {column_name: name}\n  const result: DataColumnsMapping = {};\n  while (stmt.step()) {\n    const column = stmt.getAsObject() as unknown as DataColumnsRow;\n    const {column_name, name} = column;\n    result[column_name] = name || null;\n  }\n\n  return result;\n}\n\n/**\n * Get arrow schema\n * @param db GeoPackage object\n * @param tableName  table name\n * @returns Arrow-like Schema\n */\nfunction getSchema(db: Database, tableName: string): Schema {\n  const stmt = db.prepare(`PRAGMA table_info(\\`${tableName}\\`)`);\n\n  const fields: Field[] = [];\n  while (stmt.step()) {\n    const pragmaTableInfo = stmt.getAsObject() as unknown as PragmaTableInfoRow;\n    const {name, type: sqlType, notnull} = pragmaTableInfo;\n    const type = SQL_TYPE_MAPPING[sqlType];\n    const field = {name, type, nullable: !notnull};\n    fields.push(field);\n  }\n\n  return {fields, metadata: {}};\n}\n\nfunction formatTablesAsGeojson(tables: Tables<ObjectRowTable>): Record<string, Feature[]> {\n  const geojsonMap = {};\n  for (const table of tables.tables) {\n    geojsonMap[table.name] = table.table.data;\n  }\n  return geojsonMap;\n}\n"],"mappings":";;;;;;;;;;;AAEA,IAAAA,IAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,IAAA,GAAAD,OAAA;AAUA,IAAAE,IAAA,GAAAF,OAAA;AACA,IAAAG,KAAA,GAAAH,OAAA;AAA+C,SAAAI,2BAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAC,MAAA,oBAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,qBAAAE,EAAA,QAAAG,KAAA,CAAAC,OAAA,CAAAN,CAAA,MAAAE,EAAA,GAAAK,2BAAA,CAAAP,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAQ,MAAA,qBAAAN,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAO,CAAA,UAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,QAAAH,CAAA,IAAAT,CAAA,CAAAQ,MAAA,WAAAK,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAd,CAAA,CAAAS,CAAA,UAAAM,CAAA,WAAAA,EAAAC,EAAA,UAAAA,EAAA,KAAAC,CAAA,EAAAP,CAAA,gBAAAQ,SAAA,iJAAAC,gBAAA,SAAAC,MAAA,UAAAC,GAAA,WAAAV,CAAA,WAAAA,EAAA,IAAAT,EAAA,GAAAA,EAAA,CAAAoB,IAAA,CAAAtB,CAAA,MAAAY,CAAA,WAAAA,EAAA,QAAAW,IAAA,GAAArB,EAAA,CAAAsB,IAAA,IAAAL,gBAAA,GAAAI,IAAA,CAAAV,IAAA,SAAAU,IAAA,KAAAR,CAAA,WAAAA,EAAAU,GAAA,IAAAL,MAAA,SAAAC,GAAA,GAAAI,GAAA,KAAAR,CAAA,WAAAA,EAAA,eAAAE,gBAAA,IAAAjB,EAAA,CAAAwB,MAAA,UAAAxB,EAAA,CAAAwB,MAAA,oBAAAN,MAAA,QAAAC,GAAA;AAAA,SAAAd,4BAAAP,CAAA,EAAA2B,MAAA,SAAA3B,CAAA,qBAAAA,CAAA,sBAAA4B,iBAAA,CAAA5B,CAAA,EAAA2B,MAAA,OAAAf,CAAA,GAAAiB,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAT,IAAA,CAAAtB,CAAA,EAAAgC,KAAA,aAAApB,CAAA,iBAAAZ,CAAA,CAAAiC,WAAA,EAAArB,CAAA,GAAAZ,CAAA,CAAAiC,WAAA,CAAAC,IAAA,MAAAtB,CAAA,cAAAA,CAAA,mBAAAP,KAAA,CAAA8B,IAAA,CAAAnC,CAAA,OAAAY,CAAA,+DAAAwB,IAAA,CAAAxB,CAAA,UAAAgB,iBAAA,CAAA5B,CAAA,EAAA2B,MAAA;AAAA,SAAAC,kBAAAS,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAA7B,MAAA,EAAA8B,GAAA,GAAAD,GAAA,CAAA7B,MAAA,WAAAC,CAAA,MAAA8B,IAAA,OAAAlC,KAAA,CAAAiC,GAAA,GAAA7B,CAAA,GAAA6B,GAAA,EAAA7B,CAAA,IAAA8B,IAAA,CAAA9B,CAAA,IAAA4B,GAAA,CAAA5B,CAAA,UAAA8B,IAAA;AAgBxC,IAAMC,iBAAiB,GAAG,sDAAsD;AAACC,OAAA,CAAAD,iBAAA,GAAAA,iBAAA;AAGxF,IAAME,qBAAqB,GAAG;EAC5B,CAAC,EAAE,CAAC;EACJ,CAAC,EAAE,EAAE;EACL,CAAC,EAAE,EAAE;EACL,CAAC,EAAE,EAAE;EACL,CAAC,EAAE,EAAE;EAEL,CAAC,EAAE,CAAC;EACJ,CAAC,EAAE,CAAC;EACJ,CAAC,EAAE;AACL,CAAC;AAGD,IAAMC,gBAA6E,GAAG;EACpFC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,MAAM;EACfC,QAAQ,EAAE,OAAO;EACjBC,SAAS,EAAE,OAAO;EAClBC,GAAG,EAAE,OAAO;EACZC,OAAO,EAAE,OAAO;EAChBC,KAAK,EAAE,SAAS;EAChBC,MAAM,EAAE,SAAS;EACjBC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,MAAM;EAChBC,QAAQ,EAAE,QAAQ;EAClBC,KAAK,EAAE,QAAQ;EACfC,UAAU,EAAE,QAAQ;EACpBC,OAAO,EAAE,QAAQ;EACjBC,UAAU,EAAE,QAAQ;EACpBC,eAAe,EAAE,QAAQ;EACzBC,YAAY,EAAE,QAAQ;EACtBC,kBAAkB,EAAE;AACtB,CAAC;AAAC,SAE4BC,eAAeA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,iBAAA;EAAAA,gBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAA9B,SAAAC,QACbC,WAAwB,EACxBC,OAAiC;IAAA,IAAAC,KAAA,EAAAC,cAAA,EAAAC,QAAA,EAAAC,KAAA,EAAAC,eAAA,EAAAC,SAAA,EAAAC,gBAAA,EAAAC,UAAA,EAAAC,YAAA,EAAAC,MAAA,EAAAC,EAAA,EAAAC,MAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA;IAAA,OAAAtB,YAAA,CAAAD,OAAA,CAAAwB,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAA1E,IAAA;QAAA;UAAAsD,KAAA,GAEM,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEuB,UAAU,KAAI,CAAC,CAAC,EAAArB,cAAA,GAAAD,KAAA,CAAzDE,QAAQ,EAARA,QAAQ,GAAAD,cAAA,cAAGvC,iBAAiB,GAAAuC,cAAA;UAAAE,KAAA,GACkC,CAAAJ,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEwB,GAAG,KAAI,CAAC,CAAC,EAAAnB,eAAA,GAAAD,KAAA,CAAhFE,SAAS,EAATA,SAAS,GAAAD,eAAA,cAAG,KAAK,GAAAA,eAAA,EAAAE,gBAAA,GAAAH,KAAA,CAAEI,UAAU,EAAVA,UAAU,GAAAD,gBAAA,cAAG,OAAO,GAAAA,gBAAA,EAAAE,YAAA,GAAAL,KAAA,CAAEM,MAAM,EAANA,MAAM,GAAAD,YAAA,cAAG,QAAQ,GAAAA,YAAA;UAAAY,QAAA,CAAA1E,IAAA;UAAA,OAEhD8E,YAAY,CAAC1B,WAAW,EAAEI,QAAQ,CAAC;QAAA;UAA9CQ,EAAE,GAAAU,QAAA,CAAAK,IAAA;UACFd,MAAM,GAAGe,gBAAgB,CAAChB,EAAE,CAAC;UAC7BE,WAAW,GAAGe,cAAc,CAACjB,EAAE,CAAC;UAGhCG,YAAoC,GAAG;YAC3Ce,KAAK,EAAE,QAAQ;YACfjB,MAAM,EAAE;UACV,CAAC;UAAAG,UAAA,GAAA7F,0BAAA,CAEmB0F,MAAM;UAAA;YAA1B,KAAAG,UAAA,CAAAjF,CAAA,MAAAkF,MAAA,GAAAD,UAAA,CAAAhF,CAAA,IAAAC,IAAA,GAA4B;cAAjBiF,KAAK,GAAAD,MAAA,CAAA/E,KAAA;cACKiF,SAAS,GAAID,KAAK,CAA9Ba,UAAU;cACjBhB,YAAY,CAACF,MAAM,CAACmB,IAAI,CAAC;gBACvB1E,IAAI,EAAE6D,SAAS;gBACfD,KAAK,EAAEe,cAAc,CAACrB,EAAE,EAAEO,SAAS,EAAEL,WAAW,EAAE;kBAChDP,SAAS,EAATA,SAAS;kBACTE,UAAU,EAAVA;gBACF,CAAC;cACH,CAAC,CAAC;YACJ;UAAC,SAAAhE,GAAA;YAAAuE,UAAA,CAAA7E,CAAA,CAAAM,GAAA;UAAA;YAAAuE,UAAA,CAAA3E,CAAA;UAAA;UAAA,MAEGsE,MAAM,KAAK,SAAS;YAAAW,QAAA,CAAA1E,IAAA;YAAA;UAAA;UAAA,OAAA0E,QAAA,CAAAY,MAAA,WACfC,qBAAqB,CAACpB,YAAY,CAAC;QAAA;UAAA,OAAAO,QAAA,CAAAY,MAAA,WAGrCnB,YAAY;QAAA;QAAA;UAAA,OAAAO,QAAA,CAAAc,IAAA;MAAA;IAAA,GAAArC,OAAA;EAAA,CACpB;EAAA,OAAAP,gBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAQcgC,YAAYA,CAAAW,GAAA,EAAAC,GAAA;EAAA,OAAAC,aAAA,CAAA9C,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAA6C,cAAA;EAAAA,aAAA,OAAA5C,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAA3B,SAAA0C,SAA4BxC,WAAwB,EAAEI,QAAuB;IAAA,IAAAqC,GAAA;IAAA,OAAA5C,YAAA,CAAAD,OAAA,CAAAwB,IAAA,UAAAsB,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAApB,IAAA,GAAAoB,SAAA,CAAA/F,IAAA;QAAA;UAAA,KAGvEwD,QAAQ;YAAAuC,SAAA,CAAA/F,IAAA;YAAA;UAAA;UAAA+F,SAAA,CAAA/F,IAAA;UAAA,OACE,IAAAgG,YAAS,EAAC;YACpBC,UAAU,EAAE,SAAAA,WAACC,IAAI;cAAA,UAAAC,MAAA,CAAQ3C,QAAQ,EAAA2C,MAAA,CAAGD,IAAI;YAAA;UAC1C,CAAC,CAAC;QAAA;UAFFL,GAAG,GAAAE,SAAA,CAAAhB,IAAA;UAAAgB,SAAA,CAAA/F,IAAA;UAAA;QAAA;UAAA+F,SAAA,CAAA/F,IAAA;UAAA,OAIS,IAAAgG,YAAS,EAAC,CAAC;QAAA;UAAvBH,GAAG,GAAAE,SAAA,CAAAhB,IAAA;QAAA;UAAA,OAAAgB,SAAA,CAAAT,MAAA,WAEE,IAAIO,GAAG,CAACO,QAAQ,CAAC,IAAIC,UAAU,CAACjD,WAAW,CAAC,CAAC;QAAA;QAAA;UAAA,OAAA2C,SAAA,CAAAP,IAAA;MAAA;IAAA,GAAAI,QAAA;EAAA,CACrD;EAAA,OAAAD,aAAA,CAAA9C,KAAA,OAAAC,SAAA;AAAA;AASD,SAASkC,gBAAgBA,CAAChB,EAAY,EAAiB;EAYrD,IAAMsC,IAAI,GAAGtC,EAAE,CAACuC,OAAO,CAAC,yDAAyD,CAAC;EAElF,IAAMC,gBAA+B,GAAG,EAAE;EAC1C,OAAOF,IAAI,CAACvG,IAAI,CAAC,CAAC,EAAE;IAClB,IAAM0G,eAAe,GAAGH,IAAI,CAACI,WAAW,CAAC,CAA2B;IACpEF,gBAAgB,CAACpB,IAAI,CAACqB,eAAe,CAAC;EACxC;EAEA,OAAOD,gBAAgB;AACzB;AAUA,SAASnB,cAAcA,CACrBrB,EAAY,EACZO,SAAiB,EACjBL,WAA8B,EAAAyC,IAAA,EAEd;EAAA,IADfhD,SAAS,GAAAgD,IAAA,CAAThD,SAAS;IAAEE,UAAU,GAAA8C,IAAA,CAAV9C,UAAU;EAEtB,IAAM+C,WAAW,GAAGC,cAAc,CAAC7C,EAAE,EAAEO,SAAS,CAAC;EACjD,IAAMuC,UAAU,GAAGC,iBAAiB,CAAC/C,EAAE,EAAEO,SAAS,CAAC;EACnD,IAAMyC,eAAe,GAAGC,gBAAgB,CAACjD,EAAE,EAAEO,SAAS,CAAC;EAIvD,IAAA2C,SAAA,GAA0BlD,EAAE,CAACmD,IAAI,mBAAAhB,MAAA,CAAoB5B,SAAS,OAAK,CAAC,CAAC,CAAC,CAAC;IAAhE6C,OAAO,GAAAF,SAAA,CAAPE,OAAO;IAAEC,MAAM,GAAAH,SAAA,CAANG,MAAM;EAEtB,IAAIC,UAAU;EACd,IAAI3D,SAAS,EAAE;IACb,IAAM4D,iBAAiB,GAAGrD,WAAW,CAAC4C,UAAU,CAACU,MAAM,CAAC;IACxDF,UAAU,GAAG,IAAIG,qBAAe,CAAC;MAC/B9G,IAAI,EAAE4G,iBAAiB;MACvBG,EAAE,EAAE7D;IACN,CAAC,CAAC;EACJ;EAEA,IAAM8D,eAAyB,GAAG,EAAE;EAAC,IAAAC,SAAA,GAAArJ,0BAAA,CACnB8I,MAAM;IAAAQ,KAAA;EAAA;IAAxB,KAAAD,SAAA,CAAAzI,CAAA,MAAA0I,KAAA,GAAAD,SAAA,CAAAxI,CAAA,IAAAC,IAAA,GAA0B;MAAA,IAAfyI,GAAG,GAAAD,KAAA,CAAAvI,KAAA;MACZ,IAAMyI,cAAc,GAAGC,uBAAuB,CAC5CZ,OAAO,EACPU,GAAG,EACHhB,UAAU,EAEVF,WAAW,EACXI,eACF,CAAC;MACDW,eAAe,CAACvC,IAAI,CAAC2C,cAAc,CAAC;IACtC;EAAC,SAAAlI,GAAA;IAAA+H,SAAA,CAAArI,CAAA,CAAAM,GAAA;EAAA;IAAA+H,SAAA,CAAAnI,CAAA;EAAA;EAED,IAAMwI,MAAM,GAAGC,SAAS,CAAClE,EAAE,EAAEO,SAAS,CAAC;EACvC,IAAI+C,UAAU,EAAE;IACd,OAAO;MACLpC,KAAK,EAAE,kBAAkB;MACzBiD,IAAI,EAAE,IAAAC,2BAAsB,EAACT,eAAe,EAAEL,UAAU,CAACe,OAAO,CAAC;MACjEJ,MAAM,EAANA;IACF,CAAC;EACH;EAEA,OAAO;IAACE,IAAI,EAAER,eAAe;IAAEM,MAAM,EAANA,MAAM;IAAE/C,KAAK,EAAE;EAAkB,CAAC;AACnE;AAQA,SAASD,cAAcA,CAACjB,EAAY,EAAqB;EAEvD,IAAMsC,IAAI,GAAGtC,EAAE,CAACuC,OAAO,CAAC,qCAAqC,CAAC;EAE9D,IAAM+B,iBAAoC,GAAG,CAAC,CAAC;EAC/C,OAAOhC,IAAI,CAACvG,IAAI,CAAC,CAAC,EAAE;IAClB,IAAMwI,OAAO,GAAGjC,IAAI,CAACI,WAAW,CAAC,CAAgC;IACjE,IAAOc,MAAM,GAAgBe,OAAO,CAA7Bf,MAAM;MAAEgB,UAAU,GAAID,OAAO,CAArBC,UAAU;IACzBF,iBAAiB,CAACd,MAAM,CAAC,GAAGgB,UAAU;EACxC;EAEA,OAAOF,iBAAiB;AAC1B;AAUA,SAASN,uBAAuBA,CAC9BZ,OAAiB,EACjBU,GAAU,EACVhB,UAA8B,EAC9BF,WAA+B,EAC/BI,eAAuB,EACG;EAE1B,IAAMyB,KAAK,GAAGrB,OAAO,CAACsB,OAAO,CAAC1B,eAAe,CAAC;EAC9C,IAAM2B,EAAE,GAAGb,GAAG,CAACW,KAAK,CAAC;EAGrB,IAAMG,aAAa,GAAGxB,OAAO,CAACsB,OAAO,CAAC5B,UAAU,CAAC+B,WAAW,CAAC;EAC7D,IAAMC,QAAQ,GAAGC,aAAa,CAACjB,GAAG,CAACc,aAAa,CAAC,CAACI,MAAM,CAAC;EAEzD,IAAMC,UAAU,GAAG,CAAC,CAAC;EACrB,IAAIrC,WAAW,EAAE;IACf,SAAAsC,EAAA,MAAAC,eAAA,GAA2B9I,MAAM,CAAC+I,OAAO,CAACxC,WAAW,CAAC,EAAAsC,EAAA,GAAAC,eAAA,CAAAnK,MAAA,EAAAkK,EAAA,IAAE;MAAnD,IAAAG,kBAAA,OAAAC,eAAA,CAAAtG,OAAA,EAAAmG,eAAA,CAAAD,EAAA;QAAOK,GAAG,GAAAF,kBAAA;QAAE/J,KAAK,GAAA+J,kBAAA;MACpB,IAAMG,GAAG,GAAGpC,OAAO,CAACsB,OAAO,CAACa,GAAG,CAAC;MAEhCN,UAAU,CAAC3J,KAAK,CAAC,GAAGwI,GAAG,CAAC0B,GAAG,CAAC;IAC9B;EACF,CAAC,MAAM;IAEL,KAAK,IAAIvK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmI,OAAO,CAACpI,MAAM,EAAEC,CAAC,EAAE,EAAE;MACvC,IAAIA,CAAC,KAAKwJ,KAAK,IAAIxJ,CAAC,KAAK2J,aAAa,EAAE;QAEtC;MACF;MAEA,IAAMa,UAAU,GAAGrC,OAAO,CAACnI,CAAC,CAAC;MAC7BgK,UAAU,CAACQ,UAAU,CAAC,GAAG3B,GAAG,CAAC7I,CAAC,CAAC;IACjC;EACF;EAEA,OAAO;IACL0J,EAAE,EAAFA,EAAE;IACFe,IAAI,EAAE,SAAS;IACfZ,QAAQ,EAARA,QAAQ;IACRG,UAAU,EAAVA;EACF,CAAC;AACH;AAUA,SAASU,oBAAoBA,CAAC3F,EAAY,EAAiB;EACzD,IAAM4F,WAAW,GAAG,IAAIC,WAAW,CAAC,CAAC;EAGrC,IAAMC,kBAAkB,GAAG9F,EAAE,CAACmD,IAAI,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;EAC/D,IAAM4C,aAAa,GAAGD,kBAAkB,CAACzC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAGrD,IAAM2B,MAAM,GAAG,IAAIgB,WAAW,CAAC,CAAC,CAAC;EACjC,IAAMC,IAAI,GAAG,IAAIC,QAAQ,CAAClB,MAAM,CAAC;EACjCiB,IAAI,CAACE,QAAQ,CAAC,CAAC,EAAEC,MAAM,CAACL,aAAa,CAAC,CAAC;EACvC,IAAMM,aAAa,GAAGT,WAAW,CAACU,MAAM,CAACtB,MAAM,CAAC;EAEhD,IAAIqB,aAAa,KAAK,MAAM,EAAE;IAC5B,OAAO,KAAK;EACd;EAEA,IAAIA,aAAa,KAAK,MAAM,EAAE;IAC5B,OAAO,KAAK;EACd;EAGA,IAAME,gBAAgB,GAAGvG,EAAE,CAACmD,IAAI,CAAC,sBAAsB,CAAC,CAAC,CAAC,CAAC;EAC3D,IAAMqD,cAAc,GAAGD,gBAAgB,CAAClD,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAEpD,IAAImD,cAAc,IAAI,OAAOA,cAAc,KAAK,QAAQ,IAAIA,cAAc,GAAG,KAAK,EAAE;IAClF,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb;AAWA,SAASvD,gBAAgBA,CAACjD,EAAY,EAAEO,SAAiB,EAAiB;EAExE,IAAM+B,IAAI,GAAGtC,EAAE,CAACuC,OAAO,uBAAAJ,MAAA,CAAwB5B,SAAS,OAAK,CAAC;EAE9D,OAAO+B,IAAI,CAACvG,IAAI,CAAC,CAAC,EAAE;IAClB,IAAM0K,eAAe,GAAGnE,IAAI,CAACI,WAAW,CAAC,CAAkC;IAC3E,IAAOhG,IAAI,GAAQ+J,eAAe,CAA3B/J,IAAI;MAAEgK,EAAE,GAAID,eAAe,CAArBC,EAAE;IACf,IAAIA,EAAE,EAAE;MACN,OAAOhK,IAAI;IACb;EACF;EAGA,OAAO,IAAI;AACb;AAUA,SAASqI,aAAaA,CAAC3F,WAAwB,EAAmB;EAChE,IAAM6G,IAAI,GAAG,IAAIC,QAAQ,CAAC9G,WAAW,CAAC;EACtC,IAAAuH,qBAAA,GAAwCC,qBAAqB,CAACX,IAAI,CAACY,QAAQ,CAAC,CAAC,CAAC,CAAC;IAAxEC,cAAc,GAAAH,qBAAA,CAAdG,cAAc;IAAEC,aAAa,GAAAJ,qBAAA,CAAbI,aAAa;EAMpC,IAAIA,aAAa,EAAE;IACjB,OAAO,IAAI;EACb;EAOA,IAAMC,SAAS,GAAG,CAAC,GAAGF,cAAc;EAIpC,IAAMG,cAAc,GAAGC,cAAS,CAACC,SAAS,CAAC/H,WAAW,CAAC5C,KAAK,CAACwK,SAAS,CAAC,CAAC;EAExE,OAAO,IAAAI,qBAAgB,EAACH,cAAc,CAAC;AACzC;AASA,SAASL,qBAAqBA,CAACS,IAAY,EAAoB;EAE7D,IAAMC,aAAa,GAAG,CAACD,IAAI,GAAG,EAAU,IAAI,CAAC;EAG7C,IAAMP,cAAc,GAAG5J,qBAAqB,CAACoK,aAAa,CAAW;EAErE,OAAO;IACLC,YAAY,EAAEC,OAAO,CAACH,IAAI,GAAG,CAAU,CAAC;IACxCP,cAAc,EAAdA,cAAc;IACdC,aAAa,EAAES,OAAO,CAACH,IAAI,GAAG,EAAU,CAAC;IACzCI,oBAAoB,EAAED,OAAO,CAACH,IAAI,GAAG,EAAU;EACjD,CAAC;AACH;AASA,SAAStE,iBAAiBA,CAAC/C,EAAY,EAAEO,SAAiB,EAAsB;EAC9E,IAAM+B,IAAI,GAAGtC,EAAE,CAACuC,OAAO,CAAC,kEAAkE,CAAC;EAC3FD,IAAI,CAACoF,IAAI,CAAC;IAAC,YAAY,EAAEnH;EAAS,CAAC,CAAC;EAOpC+B,IAAI,CAACvG,IAAI,CAAC,CAAC;EACX,IAAM4L,cAAc,GAAGrF,IAAI,CAACI,WAAW,CAAC,CAAkC;EAC1E,OAAOiF,cAAc;AACvB;AAQA,SAAS9E,cAAcA,CAAC7C,EAAY,EAAEO,SAAiB,EAA6B;EAGlF,IAAI+B,IAAe;EACnB,IAAI;IACFA,IAAI,GAAGtC,EAAE,CAACuC,OAAO,CAAC,8DAA8D,CAAC;EACnF,CAAC,CAAC,OAAOqF,KAAK,EAAE;IACd,IAAKA,KAAK,CAAWC,OAAO,CAACC,QAAQ,CAAC,eAAe,CAAC,EAAE;MACtD,OAAO,IAAI;IACb;IAEA,MAAMF,KAAK;EACb;EAEAtF,IAAI,CAACoF,IAAI,CAAC;IAAC,YAAY,EAAEnH;EAAS,CAAC,CAAC;EAGpC,IAAMwH,MAA0B,GAAG,CAAC,CAAC;EACrC,OAAOzF,IAAI,CAACvG,IAAI,CAAC,CAAC,EAAE;IAClB,IAAMiM,MAAM,GAAG1F,IAAI,CAACI,WAAW,CAAC,CAA8B;IAC9D,IAAOmC,WAAW,GAAUmD,MAAM,CAA3BnD,WAAW;MAAEnI,IAAI,GAAIsL,MAAM,CAAdtL,IAAI;IACxBqL,MAAM,CAAClD,WAAW,CAAC,GAAGnI,IAAI,IAAI,IAAI;EACpC;EAEA,OAAOqL,MAAM;AACf;AAQA,SAAS7D,SAASA,CAAClE,EAAY,EAAEO,SAAiB,EAAU;EAC1D,IAAM+B,IAAI,GAAGtC,EAAE,CAACuC,OAAO,uBAAAJ,MAAA,CAAwB5B,SAAS,OAAK,CAAC;EAE9D,IAAM0H,MAAe,GAAG,EAAE;EAC1B,OAAO3F,IAAI,CAACvG,IAAI,CAAC,CAAC,EAAE;IAClB,IAAM0K,eAAe,GAAGnE,IAAI,CAACI,WAAW,CAAC,CAAkC;IAC3E,IAAOhG,IAAI,GAA4B+J,eAAe,CAA/C/J,IAAI;MAAQwL,OAAO,GAAazB,eAAe,CAAzCf,IAAI;MAAWyC,OAAO,GAAI1B,eAAe,CAA1B0B,OAAO;IACnC,IAAMzC,IAAI,GAAGvI,gBAAgB,CAAC+K,OAAO,CAAC;IACtC,IAAME,KAAK,GAAG;MAAC1L,IAAI,EAAJA,IAAI;MAAEgJ,IAAI,EAAJA,IAAI;MAAE2C,QAAQ,EAAE,CAACF;IAAO,CAAC;IAC9CF,MAAM,CAAC7G,IAAI,CAACgH,KAAK,CAAC;EACpB;EAEA,OAAO;IAACH,MAAM,EAANA,MAAM;IAAEK,QAAQ,EAAE,CAAC;EAAC,CAAC;AAC/B;AAEA,SAAS/G,qBAAqBA,CAACtB,MAA8B,EAA6B;EACxF,IAAMsI,UAAU,GAAG,CAAC,CAAC;EAAC,IAAAC,UAAA,GAAAjO,0BAAA,CACF0F,MAAM,CAACA,MAAM;IAAAwI,MAAA;EAAA;IAAjC,KAAAD,UAAA,CAAArN,CAAA,MAAAsN,MAAA,GAAAD,UAAA,CAAApN,CAAA,IAAAC,IAAA,GAAmC;MAAA,IAAxBiF,KAAK,GAAAmI,MAAA,CAAAnN,KAAA;MACdiN,UAAU,CAACjI,KAAK,CAAC5D,IAAI,CAAC,GAAG4D,KAAK,CAACA,KAAK,CAAC6D,IAAI;IAC3C;EAAC,SAAAtI,GAAA;IAAA2M,UAAA,CAAAjN,CAAA,CAAAM,GAAA;EAAA;IAAA2M,UAAA,CAAA/M,CAAA;EAAA;EACD,OAAO8M,UAAU;AACnB"}