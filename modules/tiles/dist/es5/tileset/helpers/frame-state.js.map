{"version":3,"file":"frame-state.js","names":["_core","require","_culling","_geospatial","scratchVector","Vector3","scratchPosition","cullingVolume","CullingVolume","Plane","getFrameState","viewport","frameNumber","cameraDirection","cameraUp","height","metersPerUnit","distanceScales","viewportCenterCartesian","worldToCartesian","center","enuToFixedTransform","Ellipsoid","WGS84","eastNorthUpToFixedFrame","cameraPositionCartographic","unprojectPosition","cameraPosition","cameraPositionCartesian","cartographicToCartesian","cameraDirectionCartesian","transformAsVector","scale","normalize","cameraUpCartesian","commonSpacePlanesToWGS84","ViewportClass","constructor","longitude","latitude","width","bearing","zoom","topDownViewport","pitch","camera","position","direction","up","sseDenominator","limitSelectedTiles","tiles","maximumTilesSelected","length","sort","a","b","_screenPriority","selectedTiles","splice","frustumPlanes","getFrustumPlanes","nearCenterCommon","closestPointOnPlane","near","nearCenterCartesian","cameraCartesian","i","planes","fromPointNormal","copy","subtract","dir","plane","posCommon","cartesianPos","refPoint","out","arguments","undefined","distanceToRef","normal","dot","distance","add","point","cartographicPos"],"sources":["../../../../src/tileset/helpers/frame-state.ts"],"sourcesContent":["import {Tile3D} from '@loaders.gl/tiles';\nimport {Vector3} from '@math.gl/core';\nimport {CullingVolume, Plane} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {GeospatialViewport, Viewport} from '../../types';\n\nexport type FrameState = {\n  camera: {\n    position: number[];\n    direction: number[];\n    up: number[];\n  };\n  viewport: GeospatialViewport;\n  topDownViewport: GeospatialViewport; // Use it to calculate projected radius for a tile\n  height: number;\n  cullingVolume: CullingVolume;\n  frameNumber: number; // TODO: This can be the same between updates, what number is unique for between updates?\n  sseDenominator: number; // Assumes fovy = 60 degrees\n};\n\nconst scratchVector = new Vector3();\nconst scratchPosition = new Vector3();\nconst cullingVolume = new CullingVolume([\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane(),\n  new Plane()\n]);\n\n// Extracts a frame state appropriate for tile culling from a deck.gl viewport\n// TODO - this could likely be generalized and merged back into deck.gl for other culling scenarios\nexport function getFrameState(viewport: GeospatialViewport, frameNumber: number): FrameState {\n  // Traverse and and request. Update _selectedTiles so that we know what to render.\n  // Traverse and and request. Update _selectedTiles so that we know what to render.\n  const {cameraDirection, cameraUp, height} = viewport;\n  const {metersPerUnit} = viewport.distanceScales;\n\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() breaks on raw array, create a Vector.\n  // TODO - Ellipsoid.eastNorthUpToFixedFrame() takes a cartesian, is that intuitive?\n  const viewportCenterCartesian = worldToCartesian(viewport, viewport.center);\n  const enuToFixedTransform = Ellipsoid.WGS84.eastNorthUpToFixedFrame(viewportCenterCartesian);\n\n  const cameraPositionCartographic = viewport.unprojectPosition(viewport.cameraPosition);\n  const cameraPositionCartesian = Ellipsoid.WGS84.cartographicToCartesian(\n    cameraPositionCartographic,\n    new Vector3()\n  );\n\n  // These should still be normalized as the transform has scale 1 (goes from meters to meters)\n  const cameraDirectionCartesian = new Vector3(\n    // @ts-ignore\n    enuToFixedTransform.transformAsVector(new Vector3(cameraDirection).scale(metersPerUnit))\n  ).normalize();\n  const cameraUpCartesian = new Vector3(\n    // @ts-ignore\n    enuToFixedTransform.transformAsVector(new Vector3(cameraUp).scale(metersPerUnit))\n  ).normalize();\n\n  commonSpacePlanesToWGS84(viewport);\n\n  const ViewportClass = viewport.constructor;\n  const {longitude, latitude, width, bearing, zoom} = viewport;\n  // @ts-ignore\n  const topDownViewport = new ViewportClass({\n    longitude,\n    latitude,\n    height,\n    width,\n    bearing,\n    zoom,\n    pitch: 0\n  });\n\n  // TODO: make a file/class for frameState and document what needs to be attached to this so that traversal can function\n  return {\n    camera: {\n      position: cameraPositionCartesian,\n      direction: cameraDirectionCartesian,\n      up: cameraUpCartesian\n    },\n    viewport,\n    topDownViewport,\n    height,\n    cullingVolume,\n    frameNumber, // TODO: This can be the same between updates, what number is unique for between updates?\n    sseDenominator: 1.15 // Assumes fovy = 60 degrees\n  };\n}\n\n/**\n * Limit `tiles` array length with `maximumTilesSelected` number.\n * The criteria for this filtering is distance of a tile center\n * to the `frameState.viewport`'s longitude and latitude\n * @param tiles - tiles array to filter\n * @param frameState - frameState to calculate distances\n * @param maximumTilesSelected - maximal amount of tiles in the output array\n * @returns new tiles array\n */\nexport function limitSelectedTiles(\n  tiles: Tile3D[],\n  maximumTilesSelected: number\n): [Tile3D[], Tile3D[]] {\n  if (maximumTilesSelected === 0 || tiles.length <= maximumTilesSelected) {\n    return [tiles, []];\n  }\n\n  tiles.sort((a, b) => a._screenPriority - b._screenPriority);\n\n  const selectedTiles: Tile3D[] = tiles.splice(0, maximumTilesSelected);\n\n  return [selectedTiles, tiles];\n}\n\nfunction commonSpacePlanesToWGS84(viewport) {\n  // Extract frustum planes based on current view.\n  const frustumPlanes = viewport.getFrustumPlanes();\n\n  // Get the near/far plane centers\n  const nearCenterCommon = closestPointOnPlane(frustumPlanes.near, viewport.cameraPosition);\n  const nearCenterCartesian = worldToCartesian(viewport, nearCenterCommon);\n  const cameraCartesian = worldToCartesian(viewport, viewport.cameraPosition, scratchPosition);\n\n  let i = 0;\n  cullingVolume.planes[i++].fromPointNormal(\n    nearCenterCartesian,\n    scratchVector.copy(nearCenterCartesian).subtract(cameraCartesian)\n  );\n\n  for (const dir in frustumPlanes) {\n    if (dir === 'near') {\n      continue; // eslint-disable-line no-continue\n    }\n    const plane = frustumPlanes[dir];\n    const posCommon = closestPointOnPlane(plane, nearCenterCommon, scratchPosition);\n    const cartesianPos = worldToCartesian(viewport, posCommon, scratchPosition);\n\n    cullingVolume.planes[i++].fromPointNormal(\n      cartesianPos,\n      // Want the normal to point into the frustum since that's what culling expects\n      scratchVector.copy(nearCenterCartesian).subtract(cartesianPos)\n    );\n  }\n}\n\nfunction closestPointOnPlane(\n  plane: {distance: number; normal: Vector3},\n  refPoint: [number, number, number] | Vector3,\n  out: Vector3 = new Vector3()\n): Vector3 {\n  const distanceToRef = plane.normal.dot(refPoint);\n  out\n    .copy(plane.normal)\n    .scale(plane.distance - distanceToRef)\n    .add(refPoint);\n  return out;\n}\n\nfunction worldToCartesian(\n  viewport: Viewport,\n  point: number[] | Vector3,\n  out: Vector3 = new Vector3()\n): Vector3 {\n  const cartographicPos = viewport.unprojectPosition(point);\n  return Ellipsoid.WGS84.cartographicToCartesian(cartographicPos, out);\n}\n"],"mappings":"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"}