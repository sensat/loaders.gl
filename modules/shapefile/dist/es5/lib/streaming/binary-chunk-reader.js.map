{"version":3,"file":"binary-chunk-reader.js","names":["BinaryChunkReader","options","_classCallCheck2","default","_defineProperty2","_ref","_ref$maxRewindBytes","maxRewindBytes","offset","arrayBuffers","ended","_createClass2","key","value","write","arrayBuffer","push","end","hasAvailableBytes","bytes","bytesAvailable","_iterator","_createForOfIteratorHelper","_step","s","n","done","byteLength","err","e","f","findBufferOffsets","selectedBuffers","i","length","buf","start","Math","abs","getDataView","bufferOffsets","Error","_bufferOffsets$","_slicedToArray2","bufferIndex","_bufferOffsets$$","view","DataView","disposeBuffers","_combineArrayBuffers","shift","_iterator2","_step2","bufferOffset","_bufferOffset$","result","Uint8Array","resultOffset","_iterator3","_step3","_bufferOffset2","_bufferOffset2$","sourceArray","set","subarray","buffer","skip","rewind","exports"],"sources":["../../../../src/lib/streaming/binary-chunk-reader.ts"],"sourcesContent":["type BinaryChunkReaderOptions = {\n  maxRewindBytes: number;\n};\n\nexport default class BinaryChunkReader {\n  offset: number;\n  arrayBuffers: ArrayBuffer[];\n  ended: boolean;\n  maxRewindBytes: number;\n\n  constructor(options?: BinaryChunkReaderOptions) {\n    const {maxRewindBytes = 0} = options || {};\n\n    /** current global offset into current array buffer*/\n    this.offset = 0;\n    /** current buffer from iterator */\n    this.arrayBuffers = [];\n    this.ended = false;\n\n    /** bytes behind offset to hold on to */\n    this.maxRewindBytes = maxRewindBytes;\n  }\n  /**\n   * @param arrayBuffer\n   */\n  write(arrayBuffer: ArrayBuffer): void {\n    this.arrayBuffers.push(arrayBuffer);\n  }\n\n  end(): void {\n    this.arrayBuffers = [];\n    this.ended = true;\n  }\n\n  /**\n   * Has enough bytes available in array buffers\n   *\n   * @param bytes Number of bytes\n   * @return boolean\n   */\n  hasAvailableBytes(bytes: number): boolean {\n    let bytesAvailable = -this.offset;\n    for (const arrayBuffer of this.arrayBuffers) {\n      bytesAvailable += arrayBuffer.byteLength;\n      if (bytesAvailable >= bytes) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Find offsets of byte ranges within this.arrayBuffers\n   *\n   * @param  bytes Byte length to read\n   * @return Arrays with byte ranges pointing to this.arrayBuffers, Output type is nested array, e.g. [ [0, [1, 2]], ...]\n   */\n  findBufferOffsets(bytes: number): any[] | null {\n    let offset = -this.offset;\n    const selectedBuffers: any = [];\n\n    for (let i = 0; i < this.arrayBuffers.length; i++) {\n      const buf = this.arrayBuffers[i];\n\n      // Current buffer isn't long enough to reach global offset\n      if (offset + buf.byteLength <= 0) {\n        offset += buf.byteLength;\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      // Find start/end offsets for this buffer\n      // When offset < 0, need to skip over Math.abs(offset) bytes\n      // When offset > 0, implies bytes in previous buffer, start at 0\n      const start = offset <= 0 ? Math.abs(offset) : 0;\n      let end: number;\n\n      // Length of requested bytes is contained in current buffer\n      if (start + bytes <= buf.byteLength) {\n        end = start + bytes;\n        selectedBuffers.push([i, [start, end]]);\n        return selectedBuffers;\n      }\n\n      // Will need to look into next buffer\n      end = buf.byteLength;\n      selectedBuffers.push([i, [start, end]]);\n\n      // Need to read fewer bytes in next iter\n      bytes -= buf.byteLength - start;\n      offset += buf.byteLength;\n    }\n\n    // Should only finish loop if exhausted all arrays\n    return null;\n  }\n\n  /**\n   * Get the required number of bytes from the iterator\n   *\n   * @param bytes Number of bytes\n   * @return DataView with data\n   */\n  getDataView(bytes: number): DataView | null {\n    const bufferOffsets = this.findBufferOffsets(bytes);\n    // return `null` if not enough data, except if end() already called, in\n    // which case throw an error.\n    if (!bufferOffsets && this.ended) {\n      throw new Error('binary data exhausted');\n    }\n\n    if (!bufferOffsets) {\n      // @ts-ignore\n      return null;\n    }\n\n    // If only one arrayBuffer needed, return DataView directly\n    if (bufferOffsets.length === 1) {\n      const [bufferIndex, [start, end]] = bufferOffsets[0];\n      const arrayBuffer = this.arrayBuffers[bufferIndex];\n      const view = new DataView(arrayBuffer, start, end - start);\n\n      this.offset += bytes;\n      this.disposeBuffers();\n      return view;\n    }\n\n    // Concatenate portions of multiple ArrayBuffers\n    const view = new DataView(this._combineArrayBuffers(bufferOffsets));\n    this.offset += bytes;\n    this.disposeBuffers();\n    return view;\n  }\n\n  /**\n   * Dispose of old array buffers\n   */\n  disposeBuffers(): void {\n    while (\n      this.arrayBuffers.length > 0 &&\n      this.offset - this.maxRewindBytes >= this.arrayBuffers[0].byteLength\n    ) {\n      this.offset -= this.arrayBuffers[0].byteLength;\n      this.arrayBuffers.shift();\n    }\n  }\n\n  /**\n   * Copy multiple ArrayBuffers into one contiguous ArrayBuffer\n   *\n   * In contrast to concatenateArrayBuffers, this only copies the necessary\n   * portions of the source arrays, rather than first copying the entire arrays\n   * then taking a part of them.\n   *\n   * @param bufferOffsets List of internal array offsets\n   * @return New contiguous ArrayBuffer\n   */\n  _combineArrayBuffers(bufferOffsets: any[]): ArrayBufferLike {\n    let byteLength: number = 0;\n    for (const bufferOffset of bufferOffsets) {\n      const [start, end] = bufferOffset[1];\n      byteLength += end - start;\n    }\n\n    const result = new Uint8Array(byteLength);\n\n    // Copy the subarrays\n    let resultOffset: number = 0;\n    for (const bufferOffset of bufferOffsets) {\n      const [bufferIndex, [start, end]] = bufferOffset;\n      const sourceArray = new Uint8Array(this.arrayBuffers[bufferIndex]);\n      result.set(sourceArray.subarray(start, end), resultOffset);\n      resultOffset += end - start;\n    }\n\n    return result.buffer;\n  }\n  /**\n   * @param bytes\n   */\n  skip(bytes: number): void {\n    this.offset += bytes;\n  }\n  /**\n   * @param bytes\n   */\n  rewind(bytes: number): void {\n    // TODO - only works if offset is already set\n    this.offset -= bytes;\n  }\n}\n"],"mappings":"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"}