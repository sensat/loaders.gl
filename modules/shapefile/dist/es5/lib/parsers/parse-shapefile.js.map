{"version":3,"file":"parse-shapefile.js","names":["_gis","require","_proj","_parseShx","_zipBatchIterators","_shpLoader","_dbfLoader","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_asyncIterator","iterable","method","async","sync","retry","asyncIterator","AsyncFromSyncIterator","AsyncFromSyncIteratorContinuation","r","Promise","reject","resolve","then","_return","ret","throw","_throw","thr","parseShapefileInBatches","_x","_x2","_x3","_parseShapefileInBatches","_wrapAsyncGenerator2","_regenerator","mark","_callee","options","context","_ref","_ref$reproject","reproject","_ref$_targetCrs","_targetCrs","_yield$_awaitAsyncGen","shx","cpg","prj","shapeIterable","propertyIterable","dbfResponse","shapeHeader","dbfHeader","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","item","geometries","properties","_item","geojsonGeometries","features","wrap","_callee$","_context","prev","gis","_awaitAsyncGenerator2","loadShapefileSidecarFiles","sent","parseInBatches","SHPLoader","fetch","replaceExtension","url","ok","DBFLoader","dbf","encoding","batchType","zipBatchIterators","_slicedToArray2","parseGeometries","joinProperties","reprojectFeatures","header","data","t0","finish","stop","parseShapefile","_x4","_x5","_x6","_parseShapefile","_asyncToGenerator2","_callee2","arrayBuffer","_ref2","_ref2$reproject","_ref2$_targetCrs","_yield$loadShapefileS","_yield$context$parse","_callee2$","_context2","parse","abrupt","_iterator2","_step2","geom","binaryToGeometry","geometry","feature","type","sourceCrs","targetCrs","projection","Proj4Projection","to","transformGeoJsonCoords","coord","project","_x7","_x8","_loadShapefileSidecarFiles","_callee3","shxPromise","cpgPromise","prjPromise","shxResponse","cpgResponse","prjResponse","_callee3$","_context3","all","parseShx","text","newExtension","baseName","basename","extension","extname","isUpperCase","toUpperCase","concat","extIndex","lastIndexOf","substr"],"sources":["../../../../src/lib/parsers/parse-shapefile.ts"],"sourcesContent":["// import type {Feature} from '@loaders.gl/gis';\nimport type {SHXOutput} from './parse-shx';\nimport type {SHPHeader} from './parse-shp-header';\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport type {ShapefileLoaderOptions} from './types';\n\nimport {binaryToGeometry, transformGeoJsonCoords} from '@loaders.gl/gis';\nimport {Proj4Projection} from '@math.gl/proj4';\nimport {parseShx} from './parse-shx';\nimport {zipBatchIterators} from '../streaming/zip-batch-iterators';\nimport {SHPLoader} from '../../shp-loader';\nimport {DBFLoader} from '../../dbf-loader';\n\ntype Feature = any;\ninterface ShapefileOutput {\n  encoding?: string;\n  prj?: string;\n  shx?: SHXOutput;\n  header: SHPHeader;\n  data: object[];\n}\n/**\n * Parsing of file in batches\n */\n// eslint-disable-next-line max-statements, complexity\nexport async function* parseShapefileInBatches(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options?: ShapefileLoaderOptions,\n  context?: LoaderContext\n): AsyncIterable<ShapefileOutput> {\n  const {reproject = false, _targetCrs = 'WGS84'} = options?.gis || {};\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  // @ts-ignore context must be defined\n  const shapeIterable: any = await context.parseInBatches(asyncIterator, SHPLoader, options);\n\n  // parse properties\n  let propertyIterable: any;\n  // @ts-ignore context must be defined\n  const dbfResponse = await context.fetch(replaceExtension(context?.url || '', 'dbf'));\n  if (dbfResponse.ok) {\n    // @ts-ignore context must be defined\n    propertyIterable = await context.parseInBatches(dbfResponse, DBFLoader, {\n      ...options,\n      dbf: {encoding: cpg || 'latin1'}\n    });\n  }\n\n  // When `options.metadata` is `true`, there's an extra initial `metadata`\n  // object before the iterator starts. zipBatchIterators expects to receive\n  // batches of Array objects, and will fail with non-iterable batches, so it's\n  // important to skip over the first batch.\n  let shapeHeader = (await shapeIterable.next()).value;\n  if (shapeHeader && shapeHeader.batchType === 'metadata') {\n    shapeHeader = (await shapeIterable.next()).value;\n  }\n\n  let dbfHeader: {batchType?: string} = {};\n  if (propertyIterable) {\n    dbfHeader = (await propertyIterable.next()).value;\n    if (dbfHeader && dbfHeader.batchType === 'metadata') {\n      dbfHeader = (await propertyIterable.next()).value;\n    }\n  }\n\n  let iterator: any;\n  if (propertyIterable) {\n    iterator = zipBatchIterators(shapeIterable, propertyIterable);\n  } else {\n    iterator = shapeIterable;\n  }\n\n  for await (const item of iterator) {\n    let geometries: any;\n    let properties: any;\n    if (!propertyIterable) {\n      geometries = item;\n    } else {\n      [geometries, properties] = item;\n    }\n\n    const geojsonGeometries = parseGeometries(geometries);\n    let features = joinProperties(geojsonGeometries, properties);\n    if (reproject) {\n      // @ts-ignore\n      features = reprojectFeatures(features, prj, _targetCrs);\n    }\n    yield {\n      encoding: cpg,\n      prj,\n      shx,\n      header: shapeHeader,\n      data: features\n    };\n  }\n}\n\n/**\n * Parse shapefile\n *\n * @param arrayBuffer\n * @param options\n * @param context\n * @returns output of shapefile\n */\nexport async function parseShapefile(\n  arrayBuffer: ArrayBuffer,\n  options?: ShapefileLoaderOptions,\n  context?: LoaderContext\n): Promise<ShapefileOutput> {\n  const {reproject = false, _targetCrs = 'WGS84'} = options?.gis || {};\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  // @ts-ignore context must be defined\n  const {header, geometries} = await context.parse(arrayBuffer, SHPLoader, options); // {shp: shx}\n\n  const geojsonGeometries = parseGeometries(geometries);\n\n  // parse properties\n  let properties = [];\n\n  // @ts-ignore context must be defined\n  const dbfResponse = await context.fetch(replaceExtension(context.url, 'dbf'));\n  if (dbfResponse.ok) {\n    // @ts-ignore context must be defined\n    properties = await context.parse(dbfResponse, DBFLoader, {dbf: {encoding: cpg || 'latin1'}});\n  }\n\n  let features = joinProperties(geojsonGeometries, properties);\n  if (reproject) {\n    features = reprojectFeatures(features, prj, _targetCrs);\n  }\n\n  return {\n    encoding: cpg,\n    prj,\n    shx,\n    header,\n    data: features\n  };\n}\n\n/**\n * Parse geometries\n *\n * @param geometries\n * @returns geometries as an array\n */\nfunction parseGeometries(geometries: any[]): any[] {\n  const geojsonGeometries: any[] = [];\n  for (const geom of geometries) {\n    geojsonGeometries.push(binaryToGeometry(geom));\n  }\n  return geojsonGeometries;\n}\n\n/**\n * Join properties and geometries into features\n *\n * @param geometries [description]\n * @param  properties [description]\n * @return [description]\n */\nfunction joinProperties(geometries: object[], properties: object[]): Feature[] {\n  const features: Feature[] = [];\n  for (let i = 0; i < geometries.length; i++) {\n    const geometry = geometries[i];\n    const feature: Feature = {\n      type: 'Feature',\n      geometry,\n      // properties can be undefined if dbfResponse above was empty\n      properties: (properties && properties[i]) || {}\n    };\n    features.push(feature);\n  }\n\n  return features;\n}\n\n/**\n * Reproject GeoJSON features to output CRS\n *\n * @param features parsed GeoJSON features\n * @param sourceCrs source coordinate reference system\n * @param targetCrs â€ arget coordinate reference system\n * @return Reprojected Features\n */\nfunction reprojectFeatures(features: Feature[], sourceCrs?: string, targetCrs?: string): Feature[] {\n  if (!sourceCrs && !targetCrs) {\n    return features;\n  }\n\n  const projection = new Proj4Projection({from: sourceCrs || 'WGS84', to: targetCrs || 'WGS84'});\n  return transformGeoJsonCoords(features, (coord) => projection.project(coord));\n}\n\n/**\n *\n * @param options\n * @param context\n * @returns Promise\n */\n// eslint-disable-next-line max-statements\nexport async function loadShapefileSidecarFiles(\n  options?: object,\n  context?: LoaderContext\n): Promise<{\n  shx?: SHXOutput;\n  cpg?: string;\n  prj?: string;\n}> {\n  // Attempt a parallel load of the small sidecar files\n  // @ts-ignore context must be defined\n  const {url, fetch} = context;\n  const shxPromise = fetch(replaceExtension(url, 'shx'));\n  const cpgPromise = fetch(replaceExtension(url, 'cpg'));\n  const prjPromise = fetch(replaceExtension(url, 'prj'));\n  await Promise.all([shxPromise, cpgPromise, prjPromise]);\n\n  let shx: SHXOutput | undefined;\n  let cpg: string | undefined;\n  let prj: string | undefined;\n\n  const shxResponse = await shxPromise;\n  if (shxResponse.ok) {\n    const arrayBuffer = await shxResponse.arrayBuffer();\n    shx = parseShx(arrayBuffer);\n  }\n\n  const cpgResponse = await cpgPromise;\n  if (cpgResponse.ok) {\n    cpg = await cpgResponse.text();\n  }\n\n  const prjResponse = await prjPromise;\n  if (prjResponse.ok) {\n    prj = await prjResponse.text();\n  }\n\n  return {\n    shx,\n    cpg,\n    prj\n  };\n}\n\n/**\n * Replace the extension at the end of a path.\n *\n * Matches the case of new extension with the case of the original file extension,\n * to increase the chance of finding files without firing off a request storm looking for various case combinations\n *\n * NOTE: Extensions can be both lower and uppercase\n * per spec, extensions should be lower case, but that doesn't mean they always are. See:\n * calvinmetcalf/shapefile-js#64, mapserver/mapserver#4712\n * https://trac.osgeo.org/mapserver/ticket/166\n */\nexport function replaceExtension(url: string, newExtension: string): string {\n  const baseName = basename(url);\n  const extension = extname(url);\n  const isUpperCase = extension === extension.toUpperCase();\n  if (isUpperCase) {\n    newExtension = newExtension.toUpperCase();\n  }\n  return `${baseName}.${newExtension}`;\n}\n\n// NOTE - this gives the entire path minus extension (i.e. NOT same as path.basename)\n/**\n * @param url\n * @returns string\n */\nfunction basename(url: string): string {\n  const extIndex = url && url.lastIndexOf('.');\n  if (typeof extIndex === 'number') {\n    return extIndex >= 0 ? url.substr(0, extIndex) : '';\n  }\n  return extIndex;\n}\n/**\n * @param url\n * @returns string\n */\nfunction extname(url: string): string {\n  const extIndex = url && url.lastIndexOf('.');\n  if (typeof extIndex === 'number') {\n    return extIndex >= 0 ? url.substr(extIndex + 1) : '';\n  }\n  return extIndex;\n}\n"],"mappings":"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"}