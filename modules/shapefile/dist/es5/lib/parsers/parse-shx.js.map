{"version":3,"file":"parse-shx.js","names":["_parseShpHeader","require","SHX_HEADER_SIZE","BIG_ENDIAN","parseShx","arrayBuffer","headerView","DataView","header","parseSHPHeader","contentLength","length","contentView","offsets","Int32Array","lengths","i","getInt32"],"sources":["../../../../src/lib/parsers/parse-shx.ts"],"sourcesContent":["import {parseSHPHeader} from './parse-shp-header';\n\nexport interface SHXOutput {\n  offsets: Int32Array;\n  lengths: Int32Array;\n}\n\nconst SHX_HEADER_SIZE = 100;\nconst BIG_ENDIAN = false;\n\n/**\n * @param arrayBuffer\n * @returns SHXOutput\n */\nexport function parseShx(arrayBuffer: ArrayBuffer): SHXOutput {\n  // SHX header is identical to SHP Header\n  const headerView = new DataView(arrayBuffer, 0, SHX_HEADER_SIZE);\n  const header = parseSHPHeader(headerView);\n  const contentLength = header.length - SHX_HEADER_SIZE;\n\n  const contentView = new DataView(arrayBuffer, SHX_HEADER_SIZE, contentLength);\n\n  const offsets = new Int32Array(contentLength);\n  const lengths = new Int32Array(contentLength);\n\n  for (let i = 0; i < contentLength / 8; i++) {\n    offsets[i] = contentView.getInt32(i * 8, BIG_ENDIAN);\n    lengths[i] = contentView.getInt32(i * 8 + 4, BIG_ENDIAN);\n  }\n\n  return {\n    offsets,\n    lengths\n  };\n}\n"],"mappings":";;;;;;AAAA,IAAAA,eAAA,GAAAC,OAAA;AAOA,IAAMC,eAAe,GAAG,GAAG;AAC3B,IAAMC,UAAU,GAAG,KAAK;AAMjB,SAASC,QAAQA,CAACC,WAAwB,EAAa;EAE5D,IAAMC,UAAU,GAAG,IAAIC,QAAQ,CAACF,WAAW,EAAE,CAAC,EAAEH,eAAe,CAAC;EAChE,IAAMM,MAAM,GAAG,IAAAC,8BAAc,EAACH,UAAU,CAAC;EACzC,IAAMI,aAAa,GAAGF,MAAM,CAACG,MAAM,GAAGT,eAAe;EAErD,IAAMU,WAAW,GAAG,IAAIL,QAAQ,CAACF,WAAW,EAAEH,eAAe,EAAEQ,aAAa,CAAC;EAE7E,IAAMG,OAAO,GAAG,IAAIC,UAAU,CAACJ,aAAa,CAAC;EAC7C,IAAMK,OAAO,GAAG,IAAID,UAAU,CAACJ,aAAa,CAAC;EAE7C,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,aAAa,GAAG,CAAC,EAAEM,CAAC,EAAE,EAAE;IAC1CH,OAAO,CAACG,CAAC,CAAC,GAAGJ,WAAW,CAACK,QAAQ,CAACD,CAAC,GAAG,CAAC,EAAEb,UAAU,CAAC;IACpDY,OAAO,CAACC,CAAC,CAAC,GAAGJ,WAAW,CAACK,QAAQ,CAACD,CAAC,GAAG,CAAC,GAAG,CAAC,EAAEb,UAAU,CAAC;EAC1D;EAEA,OAAO;IACLU,OAAO,EAAPA,OAAO;IACPE,OAAO,EAAPA;EACF,CAAC;AACH"}