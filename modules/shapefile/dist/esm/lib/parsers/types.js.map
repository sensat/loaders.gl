{"version":3,"file":"types.js","names":[],"sources":["../../../../src/lib/parsers/types.ts"],"sourcesContent":["import {Schema, ObjectRowTable} from '@loaders.gl/schema';\nimport type {LoaderOptions} from '@loaders.gl/loader-utils';\n\nexport type SHPLoaderOptions = LoaderOptions & {\n  shp?: {\n    _maxDimensions?: number;\n  };\n};\n\nexport type DBFLoaderOptions = LoaderOptions & {\n  dbf?: {\n    encoding?: string;\n    shape?: 'rows' | 'table' | 'object-row-table';\n  };\n  /** @deprecated */\n  tables?: {\n    /** @deprecated */\n    format?: 'rows' | 'table' | 'object-row-table';\n  };\n};\n\nexport type ShapefileLoaderOptions = LoaderOptions &\n  SHPLoaderOptions & {\n    shapefile?: {\n      shape?: 'geojson';\n    };\n    gis?: {\n      reproject?: boolean;\n      _targetCrs?: string;\n      /** @deprecated. Use options.shapefile.shape */\n      format?: 'geojson';\n    };\n  };\n\nexport type DBFRowsOutput = ObjectRowTable['data'];\n\n/**\n * DBF Table output. Deprecated in favor of ObjectRowTable\n * @deprecated\n */\nexport interface DBFTableOutput {\n  schema?: Schema;\n  rows: DBFRowsOutput;\n}\n\nexport type DBFHeader = {\n  // Last updated date\n  year: number;\n  month: number;\n  day: number;\n  // Number of records in data file\n  nRecords: number;\n  // Length of header in bytes\n  headerLength: number;\n  // Length of each record\n  recordLength: number;\n  // Not sure if this is usually set\n  languageDriver: number;\n};\n\nexport type DBFField = {\n  name: string;\n  dataType: string;\n  fieldLength: number;\n  decimal: number;\n};\n\nexport type DBFResult = {\n  data: {[key: string]: any}[];\n  schema?: Schema;\n  error?: string;\n  dbfHeader?: DBFHeader;\n  dbfFields?: DBFField[];\n  progress?: {\n    bytesUsed: number;\n    rowsTotal: number;\n    rows: number;\n  };\n};\n"],"mappings":""}