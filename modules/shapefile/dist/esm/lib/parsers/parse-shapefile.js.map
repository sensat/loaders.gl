{"version":3,"file":"parse-shapefile.js","names":["binaryToGeometry","transformGeoJsonCoords","Proj4Projection","parseShx","zipBatchIterators","SHPLoader","DBFLoader","parseShapefileInBatches","asyncIterator","options","context","reproject","_targetCrs","gis","shx","cpg","prj","loadShapefileSidecarFiles","shapeIterable","parseInBatches","propertyIterable","dbfResponse","fetch","replaceExtension","url","ok","dbf","encoding","shapeHeader","next","value","batchType","dbfHeader","iterator","item","geometries","properties","geojsonGeometries","parseGeometries","features","joinProperties","reprojectFeatures","header","data","parseShapefile","arrayBuffer","parse","geom","push","i","length","geometry","feature","type","sourceCrs","targetCrs","projection","from","to","coord","project","shxPromise","cpgPromise","prjPromise","Promise","all","shxResponse","cpgResponse","text","prjResponse","newExtension","baseName","basename","extension","extname","isUpperCase","toUpperCase","concat","extIndex","lastIndexOf","substr"],"sources":["../../../../src/lib/parsers/parse-shapefile.ts"],"sourcesContent":["// import type {Feature} from '@loaders.gl/gis';\nimport type {SHXOutput} from './parse-shx';\nimport type {SHPHeader} from './parse-shp-header';\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport type {ShapefileLoaderOptions} from './types';\n\nimport {binaryToGeometry, transformGeoJsonCoords} from '@loaders.gl/gis';\nimport {Proj4Projection} from '@math.gl/proj4';\nimport {parseShx} from './parse-shx';\nimport {zipBatchIterators} from '../streaming/zip-batch-iterators';\nimport {SHPLoader} from '../../shp-loader';\nimport {DBFLoader} from '../../dbf-loader';\n\ntype Feature = any;\ninterface ShapefileOutput {\n  encoding?: string;\n  prj?: string;\n  shx?: SHXOutput;\n  header: SHPHeader;\n  data: object[];\n}\n/**\n * Parsing of file in batches\n */\n// eslint-disable-next-line max-statements, complexity\nexport async function* parseShapefileInBatches(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options?: ShapefileLoaderOptions,\n  context?: LoaderContext\n): AsyncIterable<ShapefileOutput> {\n  const {reproject = false, _targetCrs = 'WGS84'} = options?.gis || {};\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  // @ts-ignore context must be defined\n  const shapeIterable: any = await context.parseInBatches(asyncIterator, SHPLoader, options);\n\n  // parse properties\n  let propertyIterable: any;\n  // @ts-ignore context must be defined\n  const dbfResponse = await context.fetch(replaceExtension(context?.url || '', 'dbf'));\n  if (dbfResponse.ok) {\n    // @ts-ignore context must be defined\n    propertyIterable = await context.parseInBatches(dbfResponse, DBFLoader, {\n      ...options,\n      dbf: {encoding: cpg || 'latin1'}\n    });\n  }\n\n  // When `options.metadata` is `true`, there's an extra initial `metadata`\n  // object before the iterator starts. zipBatchIterators expects to receive\n  // batches of Array objects, and will fail with non-iterable batches, so it's\n  // important to skip over the first batch.\n  let shapeHeader = (await shapeIterable.next()).value;\n  if (shapeHeader && shapeHeader.batchType === 'metadata') {\n    shapeHeader = (await shapeIterable.next()).value;\n  }\n\n  let dbfHeader: {batchType?: string} = {};\n  if (propertyIterable) {\n    dbfHeader = (await propertyIterable.next()).value;\n    if (dbfHeader && dbfHeader.batchType === 'metadata') {\n      dbfHeader = (await propertyIterable.next()).value;\n    }\n  }\n\n  let iterator: any;\n  if (propertyIterable) {\n    iterator = zipBatchIterators(shapeIterable, propertyIterable);\n  } else {\n    iterator = shapeIterable;\n  }\n\n  for await (const item of iterator) {\n    let geometries: any;\n    let properties: any;\n    if (!propertyIterable) {\n      geometries = item;\n    } else {\n      [geometries, properties] = item;\n    }\n\n    const geojsonGeometries = parseGeometries(geometries);\n    let features = joinProperties(geojsonGeometries, properties);\n    if (reproject) {\n      // @ts-ignore\n      features = reprojectFeatures(features, prj, _targetCrs);\n    }\n    yield {\n      encoding: cpg,\n      prj,\n      shx,\n      header: shapeHeader,\n      data: features\n    };\n  }\n}\n\n/**\n * Parse shapefile\n *\n * @param arrayBuffer\n * @param options\n * @param context\n * @returns output of shapefile\n */\nexport async function parseShapefile(\n  arrayBuffer: ArrayBuffer,\n  options?: ShapefileLoaderOptions,\n  context?: LoaderContext\n): Promise<ShapefileOutput> {\n  const {reproject = false, _targetCrs = 'WGS84'} = options?.gis || {};\n  const {shx, cpg, prj} = await loadShapefileSidecarFiles(options, context);\n\n  // parse geometries\n  // @ts-ignore context must be defined\n  const {header, geometries} = await context.parse(arrayBuffer, SHPLoader, options); // {shp: shx}\n\n  const geojsonGeometries = parseGeometries(geometries);\n\n  // parse properties\n  let properties = [];\n\n  // @ts-ignore context must be defined\n  const dbfResponse = await context.fetch(replaceExtension(context.url, 'dbf'));\n  if (dbfResponse.ok) {\n    // @ts-ignore context must be defined\n    properties = await context.parse(dbfResponse, DBFLoader, {dbf: {encoding: cpg || 'latin1'}});\n  }\n\n  let features = joinProperties(geojsonGeometries, properties);\n  if (reproject) {\n    features = reprojectFeatures(features, prj, _targetCrs);\n  }\n\n  return {\n    encoding: cpg,\n    prj,\n    shx,\n    header,\n    data: features\n  };\n}\n\n/**\n * Parse geometries\n *\n * @param geometries\n * @returns geometries as an array\n */\nfunction parseGeometries(geometries: any[]): any[] {\n  const geojsonGeometries: any[] = [];\n  for (const geom of geometries) {\n    geojsonGeometries.push(binaryToGeometry(geom));\n  }\n  return geojsonGeometries;\n}\n\n/**\n * Join properties and geometries into features\n *\n * @param geometries [description]\n * @param  properties [description]\n * @return [description]\n */\nfunction joinProperties(geometries: object[], properties: object[]): Feature[] {\n  const features: Feature[] = [];\n  for (let i = 0; i < geometries.length; i++) {\n    const geometry = geometries[i];\n    const feature: Feature = {\n      type: 'Feature',\n      geometry,\n      // properties can be undefined if dbfResponse above was empty\n      properties: (properties && properties[i]) || {}\n    };\n    features.push(feature);\n  }\n\n  return features;\n}\n\n/**\n * Reproject GeoJSON features to output CRS\n *\n * @param features parsed GeoJSON features\n * @param sourceCrs source coordinate reference system\n * @param targetCrs â€ arget coordinate reference system\n * @return Reprojected Features\n */\nfunction reprojectFeatures(features: Feature[], sourceCrs?: string, targetCrs?: string): Feature[] {\n  if (!sourceCrs && !targetCrs) {\n    return features;\n  }\n\n  const projection = new Proj4Projection({from: sourceCrs || 'WGS84', to: targetCrs || 'WGS84'});\n  return transformGeoJsonCoords(features, (coord) => projection.project(coord));\n}\n\n/**\n *\n * @param options\n * @param context\n * @returns Promise\n */\n// eslint-disable-next-line max-statements\nexport async function loadShapefileSidecarFiles(\n  options?: object,\n  context?: LoaderContext\n): Promise<{\n  shx?: SHXOutput;\n  cpg?: string;\n  prj?: string;\n}> {\n  // Attempt a parallel load of the small sidecar files\n  // @ts-ignore context must be defined\n  const {url, fetch} = context;\n  const shxPromise = fetch(replaceExtension(url, 'shx'));\n  const cpgPromise = fetch(replaceExtension(url, 'cpg'));\n  const prjPromise = fetch(replaceExtension(url, 'prj'));\n  await Promise.all([shxPromise, cpgPromise, prjPromise]);\n\n  let shx: SHXOutput | undefined;\n  let cpg: string | undefined;\n  let prj: string | undefined;\n\n  const shxResponse = await shxPromise;\n  if (shxResponse.ok) {\n    const arrayBuffer = await shxResponse.arrayBuffer();\n    shx = parseShx(arrayBuffer);\n  }\n\n  const cpgResponse = await cpgPromise;\n  if (cpgResponse.ok) {\n    cpg = await cpgResponse.text();\n  }\n\n  const prjResponse = await prjPromise;\n  if (prjResponse.ok) {\n    prj = await prjResponse.text();\n  }\n\n  return {\n    shx,\n    cpg,\n    prj\n  };\n}\n\n/**\n * Replace the extension at the end of a path.\n *\n * Matches the case of new extension with the case of the original file extension,\n * to increase the chance of finding files without firing off a request storm looking for various case combinations\n *\n * NOTE: Extensions can be both lower and uppercase\n * per spec, extensions should be lower case, but that doesn't mean they always are. See:\n * calvinmetcalf/shapefile-js#64, mapserver/mapserver#4712\n * https://trac.osgeo.org/mapserver/ticket/166\n */\nexport function replaceExtension(url: string, newExtension: string): string {\n  const baseName = basename(url);\n  const extension = extname(url);\n  const isUpperCase = extension === extension.toUpperCase();\n  if (isUpperCase) {\n    newExtension = newExtension.toUpperCase();\n  }\n  return `${baseName}.${newExtension}`;\n}\n\n// NOTE - this gives the entire path minus extension (i.e. NOT same as path.basename)\n/**\n * @param url\n * @returns string\n */\nfunction basename(url: string): string {\n  const extIndex = url && url.lastIndexOf('.');\n  if (typeof extIndex === 'number') {\n    return extIndex >= 0 ? url.substr(0, extIndex) : '';\n  }\n  return extIndex;\n}\n/**\n * @param url\n * @returns string\n */\nfunction extname(url: string): string {\n  const extIndex = url && url.lastIndexOf('.');\n  if (typeof extIndex === 'number') {\n    return extIndex >= 0 ? url.substr(extIndex + 1) : '';\n  }\n  return extIndex;\n}\n"],"mappings":"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"}