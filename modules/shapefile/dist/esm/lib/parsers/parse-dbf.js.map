{"version":3,"file":"parse-dbf.js","names":["BinaryChunkReader","LITTLE_ENDIAN","DBF_HEADER_SIZE","STATE","DBFParser","constructor","options","_defineProperty","START","data","textDecoder","TextDecoder","encoding","write","arrayBuffer","binaryReader","state","parseState","result","end","END","ERROR","error","parseDBF","_options$tables","_options$dbf","arguments","length","undefined","dbf","dbfParser","schema","shape","tables","format","table","rows","parseDBFInBatches","asyncIterator","parser","headerReturned","dbfHeader","e","Promise","reject","dataView","getDataView","parseDBFHeader","progress","bytesUsed","rowsTotal","nRecords","FIELD_DESCRIPTORS","fieldDescriptorView","headerLength","dbfFields","parseFieldDescriptors","fields","map","dbfField","makeField","metadata","FIELD_PROPERTIES","skip","recordLength","recordView","row","parseRow","push","concat","message","headerView","year","getUint8","month","day","getUint32","getUint16","languageDriver","view","nFields","byteLength","offset","i","name","decode","Uint8Array","buffer","byteOffset","replace","dataType","String","fromCharCode","fieldLength","decimal","out","field","text","parseField","parseNumber","parseCharacter","parseDate","parseBoolean","Error","str","Date","UTC","slice","parseInt","value","test","number","parseFloat","isNaN","trim","_ref","type","nullable"],"sources":["../../../../src/lib/parsers/parse-dbf.ts"],"sourcesContent":["import {Field, ObjectRowTable} from '@loaders.gl/schema';\nimport BinaryChunkReader from '../streaming/binary-chunk-reader';\nimport {\n  DBFLoaderOptions,\n  DBFResult,\n  DBFTableOutput,\n  DBFHeader,\n  DBFRowsOutput,\n  DBFField\n} from './types';\n\nconst LITTLE_ENDIAN = true;\nconst DBF_HEADER_SIZE = 32;\n\nenum STATE {\n  START = 0, // Expecting header\n  FIELD_DESCRIPTORS = 1,\n  FIELD_PROPERTIES = 2,\n  END = 3,\n  ERROR = 4\n}\n\nclass DBFParser {\n  binaryReader = new BinaryChunkReader();\n  textDecoder: TextDecoder;\n  state = STATE.START;\n  result: DBFResult = {\n    data: []\n  };\n\n  constructor(options: {encoding: string}) {\n    this.textDecoder = new TextDecoder(options.encoding);\n  }\n\n  /**\n   * @param arrayBuffer\n   */\n  write(arrayBuffer: ArrayBuffer): void {\n    this.binaryReader.write(arrayBuffer);\n    this.state = parseState(this.state, this.result, this.binaryReader, this.textDecoder);\n    // this.result.progress.bytesUsed = this.binaryReader.bytesUsed();\n\n    // important events:\n    // - schema available\n    // - first rows available\n    // - all rows available\n  }\n\n  end(): void {\n    this.binaryReader.end();\n    this.state = parseState(this.state, this.result, this.binaryReader, this.textDecoder);\n    // this.result.progress.bytesUsed = this.binaryReader.bytesUsed();\n    if (this.state !== STATE.END) {\n      this.state = STATE.ERROR;\n      this.result.error = 'DBF incomplete file';\n    }\n  }\n}\n\n/**\n * @param arrayBuffer\n * @param options\n * @returns DBFTable or rows\n */\nexport function parseDBF(\n  arrayBuffer: ArrayBuffer,\n  options: DBFLoaderOptions = {}\n): DBFRowsOutput | DBFTableOutput | ObjectRowTable {\n  const {encoding = 'latin1'} = options.dbf || {};\n\n  const dbfParser = new DBFParser({encoding});\n  dbfParser.write(arrayBuffer);\n  dbfParser.end();\n\n  const {data, schema} = dbfParser.result;\n  const shape = options?.tables?.format || options?.dbf?.shape;\n  switch (shape) {\n    case 'object-row-table': {\n      const table: ObjectRowTable = {\n        shape: 'object-row-table',\n        schema,\n        data\n      };\n      return table;\n    }\n    case 'table':\n      return {schema, rows: data};\n    case 'rows':\n    default:\n      return data;\n  }\n}\n/**\n * @param asyncIterator\n * @param options\n */\nexport async function* parseDBFInBatches(\n  asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options: DBFLoaderOptions = {}\n): AsyncIterable<DBFHeader | DBFRowsOutput | DBFTableOutput> {\n  const {encoding = 'latin1'} = options.dbf || {};\n\n  const parser = new DBFParser({encoding});\n  let headerReturned = false;\n  for await (const arrayBuffer of asyncIterator) {\n    parser.write(arrayBuffer);\n    if (!headerReturned && parser.result.dbfHeader) {\n      headerReturned = true;\n      yield parser.result.dbfHeader;\n    }\n\n    if (parser.result.data.length > 0) {\n      yield parser.result.data;\n      parser.result.data = [];\n    }\n  }\n  parser.end();\n  if (parser.result.data.length > 0) {\n    yield parser.result.data;\n  }\n}\n/**\n * https://www.dbase.com/Knowledgebase/INT/db7_file_fmt.htm\n * @param state\n * @param result\n * @param binaryReader\n * @param textDecoder\n * @returns\n */\n/* eslint-disable complexity, max-depth */\nfunction parseState(\n  state: STATE,\n  result: DBFResult,\n  binaryReader: BinaryChunkReader,\n  textDecoder: TextDecoder\n): STATE {\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    try {\n      switch (state) {\n        case STATE.ERROR:\n        case STATE.END:\n          return state;\n\n        case STATE.START:\n          // Parse initial file header\n          // DBF Header\n          const dataView = binaryReader.getDataView(DBF_HEADER_SIZE);\n          if (!dataView) {\n            return state;\n          }\n          result.dbfHeader = parseDBFHeader(dataView);\n          result.progress = {\n            bytesUsed: 0,\n            rowsTotal: result.dbfHeader.nRecords,\n            rows: 0\n          };\n          state = STATE.FIELD_DESCRIPTORS;\n          break;\n\n        case STATE.FIELD_DESCRIPTORS:\n          // Parse DBF field descriptors (schema)\n          const fieldDescriptorView = binaryReader.getDataView(\n            // @ts-ignore\n            result.dbfHeader.headerLength - DBF_HEADER_SIZE\n          );\n          if (!fieldDescriptorView) {\n            return state;\n          }\n\n          result.dbfFields = parseFieldDescriptors(fieldDescriptorView, textDecoder);\n          result.schema = {\n            fields: result.dbfFields.map((dbfField) => makeField(dbfField)),\n            metadata: {}\n          };\n\n          state = STATE.FIELD_PROPERTIES;\n\n          // TODO(kyle) Not exactly sure why start offset needs to be headerLength + 1?\n          // parsedbf uses ((fields.length + 1) << 5) + 2;\n          binaryReader.skip(1);\n          break;\n\n        case STATE.FIELD_PROPERTIES:\n          const {recordLength = 0, nRecords = 0} = result?.dbfHeader || {};\n          while (result.data.length < nRecords) {\n            const recordView = binaryReader.getDataView(recordLength - 1);\n            if (!recordView) {\n              return state;\n            }\n            // Note: Avoid actually reading the last byte, which may not be present\n            binaryReader.skip(1);\n\n            // @ts-ignore\n            const row = parseRow(recordView, result.dbfFields, textDecoder);\n            result.data.push(row);\n            // @ts-ignore\n            result.progress.rows = result.data.length;\n          }\n          state = STATE.END;\n          break;\n\n        default:\n          state = STATE.ERROR;\n          result.error = `illegal parser state ${state}`;\n          return state;\n      }\n    } catch (error) {\n      state = STATE.ERROR;\n      result.error = `DBF parsing failed: ${(error as Error).message}`;\n      return state;\n    }\n  }\n}\n\n/**\n * @param headerView\n */\nfunction parseDBFHeader(headerView: DataView): DBFHeader {\n  return {\n    // Last updated date\n    year: headerView.getUint8(1) + 1900,\n    month: headerView.getUint8(2),\n    day: headerView.getUint8(3),\n    // Number of records in data file\n    nRecords: headerView.getUint32(4, LITTLE_ENDIAN),\n    // Length of header in bytes\n    headerLength: headerView.getUint16(8, LITTLE_ENDIAN),\n    // Length of each record\n    recordLength: headerView.getUint16(10, LITTLE_ENDIAN),\n    // Not sure if this is usually set\n    languageDriver: headerView.getUint8(29)\n  };\n}\n\n/**\n * @param view\n */\nfunction parseFieldDescriptors(view: DataView, textDecoder: TextDecoder): DBFField[] {\n  // NOTE: this might overestimate the number of fields if the \"Database\n  // Container\" container exists and is included in the headerLength\n  const nFields = (view.byteLength - 1) / 32;\n  const fields: DBFField[] = [];\n  let offset = 0;\n  for (let i = 0; i < nFields; i++) {\n    const name = textDecoder\n      .decode(new Uint8Array(view.buffer, view.byteOffset + offset, 11))\n      // eslint-disable-next-line no-control-regex\n      .replace(/\\u0000/g, '');\n\n    fields.push({\n      name,\n      dataType: String.fromCharCode(view.getUint8(offset + 11)),\n      fieldLength: view.getUint8(offset + 16),\n      decimal: view.getUint8(offset + 17)\n    });\n    offset += 32;\n  }\n  return fields;\n}\n\n/*\n * @param {BinaryChunkReader} binaryReader\nfunction parseRows(binaryReader, fields, nRecords, recordLength, textDecoder) {\n  const rows = [];\n  for (let i = 0; i < nRecords; i++) {\n    const recordView = binaryReader.getDataView(recordLength - 1);\n    binaryReader.skip(1);\n    // @ts-ignore\n    rows.push(parseRow(recordView, fields, textDecoder));\n  }\n  return rows;\n}\n */\n\n/**\n *\n * @param view\n * @param fields\n * @param textDecoder\n * @returns\n */\nfunction parseRow(\n  view: DataView,\n  fields: DBFField[],\n  textDecoder: TextDecoder\n): {[key: string]: any} {\n  const out: {[key: string]: string | number | boolean | null} = {};\n  let offset = 0;\n  for (const field of fields) {\n    const text = textDecoder.decode(\n      new Uint8Array(view.buffer, view.byteOffset + offset, field.fieldLength)\n    );\n    out[field.name] = parseField(text, field.dataType);\n    offset += field.fieldLength;\n  }\n\n  return out;\n}\n\n/**\n * Should NaN be coerced to null?\n * @param text\n * @param dataType\n * @returns Field depends on a type of the data\n */\nfunction parseField(text: string, dataType: string): string | number | boolean | null {\n  switch (dataType) {\n    case 'B':\n      return parseNumber(text);\n    case 'C':\n      return parseCharacter(text);\n    case 'F':\n      return parseNumber(text);\n    case 'N':\n      return parseNumber(text);\n    case 'O':\n      return parseNumber(text);\n    case 'D':\n      return parseDate(text);\n    case 'L':\n      return parseBoolean(text);\n    default:\n      throw new Error('Unsupported data type');\n  }\n}\n\n/**\n * Parse YYYYMMDD to date in milliseconds\n * @param str YYYYMMDD\n * @returns new Date as a number\n */\nfunction parseDate(str: any): number {\n  return Date.UTC(str.slice(0, 4), parseInt(str.slice(4, 6), 10) - 1, str.slice(6, 8));\n}\n\n/**\n * Read boolean value\n * any of Y, y, T, t coerce to true\n * any of N, n, F, f coerce to false\n * otherwise null\n * @param value\n * @returns boolean | null\n */\nfunction parseBoolean(value: string): boolean | null {\n  return /^[nf]$/i.test(value) ? false : /^[yt]$/i.test(value) ? true : null;\n}\n\n/**\n * Return null instead of NaN\n * @param text\n * @returns number | null\n */\nfunction parseNumber(text: string): number | null {\n  const number = parseFloat(text);\n  return isNaN(number) ? null : number;\n}\n\n/**\n *\n * @param text\n * @returns string | null\n */\nfunction parseCharacter(text: string): string | null {\n  return text.trim() || null;\n}\n\n/**\n * Create a standard Arrow-style `Field` from field descriptor.\n * TODO - use `fieldLength` and `decimal` to generate smaller types?\n * @param param0\n * @returns Field\n */\n// eslint-disable\nfunction makeField({name, dataType, fieldLength, decimal}: DBFField): Field {\n  switch (dataType) {\n    case 'B':\n      return {name, type: 'float64', nullable: true, metadata: {}};\n    case 'C':\n      return {name, type: 'utf8', nullable: true, metadata: {}};\n    case 'F':\n      return {name, type: 'float64', nullable: true, metadata: {}};\n    case 'N':\n      return {name, type: 'float64', nullable: true, metadata: {}};\n    case 'O':\n      return {name, type: 'float64', nullable: true, metadata: {}};\n    case 'D':\n      return {name, type: 'timestamp-millisecond', nullable: true, metadata: {}};\n    case 'L':\n      return {name, type: 'bool', nullable: true, metadata: {}};\n    default:\n      throw new Error('Unsupported data type');\n  }\n}\n"],"mappings":"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"}