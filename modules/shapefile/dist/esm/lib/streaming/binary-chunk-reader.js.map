{"version":3,"file":"binary-chunk-reader.js","names":["BinaryChunkReader","constructor","options","_defineProperty","maxRewindBytes","offset","arrayBuffers","ended","write","arrayBuffer","push","end","hasAvailableBytes","bytes","bytesAvailable","byteLength","findBufferOffsets","selectedBuffers","i","length","buf","start","Math","abs","getDataView","bufferOffsets","Error","bufferIndex","view","DataView","disposeBuffers","_combineArrayBuffers","shift","bufferOffset","result","Uint8Array","resultOffset","sourceArray","set","subarray","buffer","skip","rewind"],"sources":["../../../../src/lib/streaming/binary-chunk-reader.ts"],"sourcesContent":["type BinaryChunkReaderOptions = {\n  maxRewindBytes: number;\n};\n\nexport default class BinaryChunkReader {\n  offset: number;\n  arrayBuffers: ArrayBuffer[];\n  ended: boolean;\n  maxRewindBytes: number;\n\n  constructor(options?: BinaryChunkReaderOptions) {\n    const {maxRewindBytes = 0} = options || {};\n\n    /** current global offset into current array buffer*/\n    this.offset = 0;\n    /** current buffer from iterator */\n    this.arrayBuffers = [];\n    this.ended = false;\n\n    /** bytes behind offset to hold on to */\n    this.maxRewindBytes = maxRewindBytes;\n  }\n  /**\n   * @param arrayBuffer\n   */\n  write(arrayBuffer: ArrayBuffer): void {\n    this.arrayBuffers.push(arrayBuffer);\n  }\n\n  end(): void {\n    this.arrayBuffers = [];\n    this.ended = true;\n  }\n\n  /**\n   * Has enough bytes available in array buffers\n   *\n   * @param bytes Number of bytes\n   * @return boolean\n   */\n  hasAvailableBytes(bytes: number): boolean {\n    let bytesAvailable = -this.offset;\n    for (const arrayBuffer of this.arrayBuffers) {\n      bytesAvailable += arrayBuffer.byteLength;\n      if (bytesAvailable >= bytes) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Find offsets of byte ranges within this.arrayBuffers\n   *\n   * @param  bytes Byte length to read\n   * @return Arrays with byte ranges pointing to this.arrayBuffers, Output type is nested array, e.g. [ [0, [1, 2]], ...]\n   */\n  findBufferOffsets(bytes: number): any[] | null {\n    let offset = -this.offset;\n    const selectedBuffers: any = [];\n\n    for (let i = 0; i < this.arrayBuffers.length; i++) {\n      const buf = this.arrayBuffers[i];\n\n      // Current buffer isn't long enough to reach global offset\n      if (offset + buf.byteLength <= 0) {\n        offset += buf.byteLength;\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      // Find start/end offsets for this buffer\n      // When offset < 0, need to skip over Math.abs(offset) bytes\n      // When offset > 0, implies bytes in previous buffer, start at 0\n      const start = offset <= 0 ? Math.abs(offset) : 0;\n      let end: number;\n\n      // Length of requested bytes is contained in current buffer\n      if (start + bytes <= buf.byteLength) {\n        end = start + bytes;\n        selectedBuffers.push([i, [start, end]]);\n        return selectedBuffers;\n      }\n\n      // Will need to look into next buffer\n      end = buf.byteLength;\n      selectedBuffers.push([i, [start, end]]);\n\n      // Need to read fewer bytes in next iter\n      bytes -= buf.byteLength - start;\n      offset += buf.byteLength;\n    }\n\n    // Should only finish loop if exhausted all arrays\n    return null;\n  }\n\n  /**\n   * Get the required number of bytes from the iterator\n   *\n   * @param bytes Number of bytes\n   * @return DataView with data\n   */\n  getDataView(bytes: number): DataView | null {\n    const bufferOffsets = this.findBufferOffsets(bytes);\n    // return `null` if not enough data, except if end() already called, in\n    // which case throw an error.\n    if (!bufferOffsets && this.ended) {\n      throw new Error('binary data exhausted');\n    }\n\n    if (!bufferOffsets) {\n      // @ts-ignore\n      return null;\n    }\n\n    // If only one arrayBuffer needed, return DataView directly\n    if (bufferOffsets.length === 1) {\n      const [bufferIndex, [start, end]] = bufferOffsets[0];\n      const arrayBuffer = this.arrayBuffers[bufferIndex];\n      const view = new DataView(arrayBuffer, start, end - start);\n\n      this.offset += bytes;\n      this.disposeBuffers();\n      return view;\n    }\n\n    // Concatenate portions of multiple ArrayBuffers\n    const view = new DataView(this._combineArrayBuffers(bufferOffsets));\n    this.offset += bytes;\n    this.disposeBuffers();\n    return view;\n  }\n\n  /**\n   * Dispose of old array buffers\n   */\n  disposeBuffers(): void {\n    while (\n      this.arrayBuffers.length > 0 &&\n      this.offset - this.maxRewindBytes >= this.arrayBuffers[0].byteLength\n    ) {\n      this.offset -= this.arrayBuffers[0].byteLength;\n      this.arrayBuffers.shift();\n    }\n  }\n\n  /**\n   * Copy multiple ArrayBuffers into one contiguous ArrayBuffer\n   *\n   * In contrast to concatenateArrayBuffers, this only copies the necessary\n   * portions of the source arrays, rather than first copying the entire arrays\n   * then taking a part of them.\n   *\n   * @param bufferOffsets List of internal array offsets\n   * @return New contiguous ArrayBuffer\n   */\n  _combineArrayBuffers(bufferOffsets: any[]): ArrayBufferLike {\n    let byteLength: number = 0;\n    for (const bufferOffset of bufferOffsets) {\n      const [start, end] = bufferOffset[1];\n      byteLength += end - start;\n    }\n\n    const result = new Uint8Array(byteLength);\n\n    // Copy the subarrays\n    let resultOffset: number = 0;\n    for (const bufferOffset of bufferOffsets) {\n      const [bufferIndex, [start, end]] = bufferOffset;\n      const sourceArray = new Uint8Array(this.arrayBuffers[bufferIndex]);\n      result.set(sourceArray.subarray(start, end), resultOffset);\n      resultOffset += end - start;\n    }\n\n    return result.buffer;\n  }\n  /**\n   * @param bytes\n   */\n  skip(bytes: number): void {\n    this.offset += bytes;\n  }\n  /**\n   * @param bytes\n   */\n  rewind(bytes: number): void {\n    // TODO - only works if offset is already set\n    this.offset -= bytes;\n  }\n}\n"],"mappings":"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"}