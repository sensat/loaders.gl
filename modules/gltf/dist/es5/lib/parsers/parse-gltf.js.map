{"version":3,"file":"parse-gltf.js","names":["_loaderUtils","require","_images","_textures","_assert","_parseGlb","_resolveUrl","_getTypedArray","_gltfExtensions","_normalizeGltfV","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","isGLTF","arrayBuffer","options","byteOffset","isGLB","parseGLTF","_x","_x2","_parseGLTF","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","gltf","arrayBufferOrString","_options$gltf","_options$gltf2","_options$gltf3","context","promises","_promise","promise","_args","wrap","_callee$","_context","prev","undefined","parseGLTFContainerSync","normalizeGLTFV1","normalize","preprocessExtensions","loadBuffers","json","buffers","loadImages","push","decodeExtensions","Promise","all","abrupt","stop","data","uri","baseUri","ArrayBuffer","textDecoder","TextDecoder","decode","parseJSON","glb","parseGLBSync","assert","type","concat","_glb","fill","header","hasBinChunk","binChunks","byteLength","images","_x3","_x4","_x5","_loadBuffers","_callee2","buffer","_context$fetch","_response$arrayBuffer","fetch","response","_callee2$","_context2","resolveUrl","sent","_x6","_x7","_x8","_loadImages","_callee3","imageIndices","_iterator2","_step2","imageIndex","_callee3$","_context3","getReferencesImageIndices","loadImage","Set","textures","_iterator","_step","texture","source","add","sort","_x9","_x10","_x11","_x12","_x13","_loadImage","_callee4","image","index","parse","array","parsedImage","_callee4$","_context4","hasOwnProperty","bufferView","Number","isFinite","getTypedArrayForBufferView","sliceArrayBuffer","ImageLoader","BasisLoader","mimeType","basis","format","selectSupportedBasisFormat","compressed","mipmaps","width","height"],"sources":["../../../../src/lib/parsers/parse-gltf.ts"],"sourcesContent":["/* eslint-disable camelcase, max-statements, no-restricted-globals */\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport type {GLTFLoaderOptions} from '../../gltf-loader';\nimport type {GLTFWithBuffers} from '../types/gltf-types';\nimport type {GLB} from '../types/glb-types';\nimport type {ParseGLBOptions} from './parse-glb';\n\nimport {parseJSON, sliceArrayBuffer} from '@loaders.gl/loader-utils';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {BasisLoader, selectSupportedBasisFormat} from '@loaders.gl/textures';\n\nimport {assert} from '../utils/assert';\nimport {isGLB, parseGLBSync} from './parse-glb';\nimport {resolveUrl} from '../gltf-utils/resolve-url';\nimport {getTypedArrayForBufferView} from '../gltf-utils/get-typed-array';\nimport {preprocessExtensions, decodeExtensions} from '../api/gltf-extensions';\nimport {normalizeGLTFV1} from '../api/normalize-gltf-v1';\n\n/**  */\nexport type ParseGLTFOptions = ParseGLBOptions & {\n  normalize?: boolean;\n  loadImages?: boolean;\n  loadBuffers?: boolean;\n  decompressMeshes?: boolean;\n  excludeExtensions?: string[];\n\n  /** @deprecated not supported in v4. `postProcessGLTF()` must be called by the application */\n  postProcess?: false;\n};\n\n/** Check if an array buffer appears to contain GLTF data */\nexport function isGLTF(arrayBuffer: ArrayBuffer, options?: ParseGLTFOptions): boolean {\n  const byteOffset = 0;\n  return isGLB(arrayBuffer, byteOffset, options);\n}\n\nexport async function parseGLTF(\n  gltf: GLTFWithBuffers,\n  arrayBufferOrString,\n  byteOffset = 0,\n  options: GLTFLoaderOptions,\n  context: LoaderContext\n): Promise<GLTFWithBuffers> {\n  parseGLTFContainerSync(gltf, arrayBufferOrString, byteOffset, options);\n\n  normalizeGLTFV1(gltf, {normalize: options?.gltf?.normalize});\n\n  preprocessExtensions(gltf, options, context);\n\n  const promises: Promise<any>[] = [];\n\n  // Load linked buffers asynchronously and decodes base64 buffers in parallel\n  if (options?.gltf?.loadBuffers && gltf.json.buffers) {\n    await loadBuffers(gltf, options, context);\n  }\n\n  if (options?.gltf?.loadImages) {\n    const promise = loadImages(gltf, options, context);\n    promises.push(promise);\n  }\n\n  const promise = decodeExtensions(gltf, options, context);\n  promises.push(promise);\n\n  // Parallelize image loading and buffer loading/extension decoding\n  await Promise.all(promises);\n\n  return gltf;\n}\n\n/**\n *\n * @param gltf\n * @param data - can be ArrayBuffer (GLB), ArrayBuffer (Binary JSON), String (JSON), or Object (parsed JSON)\n * @param byteOffset\n * @param options\n */\nfunction parseGLTFContainerSync(gltf, data, byteOffset, options) {\n  // Initialize gltf container\n  if (options.uri) {\n    gltf.baseUri = options.uri;\n  }\n\n  // If data is binary and starting with magic bytes, assume binary JSON text, convert to string\n  if (data instanceof ArrayBuffer && !isGLB(data, byteOffset, options)) {\n    const textDecoder = new TextDecoder();\n    data = textDecoder.decode(data);\n  }\n\n  if (typeof data === 'string') {\n    // If string, try to parse as JSON\n    gltf.json = parseJSON(data);\n  } else if (data instanceof ArrayBuffer) {\n    // If still ArrayBuffer, parse as GLB container\n    const glb: GLB = {} as GLB;\n    byteOffset = parseGLBSync(glb, data, byteOffset, options.glb);\n\n    assert(glb.type === 'glTF', `Invalid GLB magic string ${glb.type}`);\n\n    gltf._glb = glb;\n    gltf.json = glb.json;\n  } else {\n    assert(false, 'GLTF: must be ArrayBuffer or string');\n  }\n\n  // Populate buffers\n  // Create an external buffers array to hold binary data\n  const buffers = gltf.json.buffers || [];\n  gltf.buffers = new Array(buffers.length).fill(null);\n\n  // Populates JSON and some bin chunk info\n  if (gltf._glb && gltf._glb.header.hasBinChunk) {\n    const {binChunks} = gltf._glb;\n    gltf.buffers[0] = {\n      arrayBuffer: binChunks[0].arrayBuffer,\n      byteOffset: binChunks[0].byteOffset,\n      byteLength: binChunks[0].byteLength\n    };\n\n    // TODO - this modifies JSON and is a post processing thing\n    // gltf.json.buffers[0].data = gltf.buffers[0].arrayBuffer;\n    // gltf.json.buffers[0].byteOffset = gltf.buffers[0].byteOffset;\n  }\n\n  // Populate images\n  const images = gltf.json.images || [];\n  gltf.images = new Array(images.length).fill({});\n}\n\n/** Asynchronously fetch and parse buffers, store in buffers array outside of json\n * TODO - traverse gltf and determine which buffers are actually needed\n */\nasync function loadBuffers(gltf: GLTFWithBuffers, options, context: LoaderContext) {\n  // TODO\n  const buffers = gltf.json.buffers || [];\n  for (let i = 0; i < buffers.length; ++i) {\n    const buffer = buffers[i];\n    if (buffer.uri) {\n      const {fetch} = context;\n      assert(fetch);\n\n      const uri = resolveUrl(buffer.uri, options);\n      const response = await context?.fetch?.(uri);\n      const arrayBuffer = await response?.arrayBuffer?.();\n\n      gltf.buffers[i] = {\n        arrayBuffer,\n        byteOffset: 0,\n        byteLength: arrayBuffer.byteLength\n      };\n\n      delete buffer.uri;\n    } else if (gltf.buffers[i] === null) {\n      gltf.buffers[i] = {\n        arrayBuffer: new ArrayBuffer(buffer.byteLength),\n        byteOffset: 0,\n        byteLength: buffer.byteLength\n      };\n    }\n  }\n}\n\n/**\n * Loads all images\n * TODO - traverse gltf and determine which images are actually needed\n * @param gltf\n * @param options\n * @param context\n * @returns\n */\nasync function loadImages(gltf: GLTFWithBuffers, options, context: LoaderContext) {\n  const imageIndices = getReferencesImageIndices(gltf);\n\n  const images = gltf.json.images || [];\n\n  const promises: Promise<any>[] = [];\n  for (const imageIndex of imageIndices) {\n    promises.push(loadImage(gltf, images[imageIndex], imageIndex, options, context));\n  }\n\n  return await Promise.all(promises);\n}\n\n/** Make sure we only load images that are actually referenced by textures */\nfunction getReferencesImageIndices(gltf: GLTFWithBuffers): number[] {\n  const imageIndices = new Set<number>();\n\n  const textures = gltf.json.textures || [];\n  for (const texture of textures) {\n    if (texture.source !== undefined) {\n      imageIndices.add(texture.source);\n    }\n  }\n\n  return Array.from(imageIndices).sort();\n}\n\n/** Asynchronously fetches and parses one image, store in images array outside of json */\nasync function loadImage(\n  gltf: GLTFWithBuffers,\n  image,\n  index: number,\n  options,\n  context: LoaderContext\n) {\n  const {fetch, parse} = context;\n\n  let arrayBuffer;\n\n  if (image.uri && !image.hasOwnProperty('bufferView')) {\n    const uri = resolveUrl(image.uri, options);\n    const response = await fetch(uri);\n    arrayBuffer = await response.arrayBuffer();\n    image.bufferView = {\n      data: arrayBuffer\n    };\n  }\n\n  if (Number.isFinite(image.bufferView)) {\n    const array = getTypedArrayForBufferView(gltf.json, gltf.buffers, image.bufferView);\n    arrayBuffer = sliceArrayBuffer(array.buffer, array.byteOffset, array.byteLength);\n  }\n\n  assert(arrayBuffer, 'glTF image has no data');\n\n  // Call `parse`\n  let parsedImage = await parse(\n    arrayBuffer,\n    [ImageLoader, BasisLoader],\n    {mimeType: image.mimeType, basis: options.basis || {format: selectSupportedBasisFormat()}},\n    context\n  );\n\n  if (parsedImage && parsedImage[0]) {\n    parsedImage = {\n      compressed: true,\n      mipmaps: false,\n      width: parsedImage[0].width,\n      height: parsedImage[0].height,\n      data: parsedImage[0]\n    };\n  }\n  // TODO making sure ImageLoader is overridable by using array of loaders\n  // const parsedImage = await parse(arrayBuffer, [ImageLoader]);\n\n  // Store the loaded image\n  gltf.images = gltf.images || [];\n  gltf.images[index] = parsedImage;\n}\n"],"mappings":"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"}