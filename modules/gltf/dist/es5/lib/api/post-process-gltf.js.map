{"version":3,"file":"post-process-gltf.js","names":["_assert","require","_gltfUtils","_DEFAULT_SAMPLER_PARA","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER_PARAMETERS","makeDefaultSampler","id","parameters","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","_classCallCheck2","_createClass2","value","postProcess","gltf","options","undefined","json","_gltf$buffers","buffers","_gltf$images","images","_gltf$baseUri","baseUri","assert","jsonUnprocessed","_resolveTree","_this","bufferViews","map","bufView","_resolveBufferView","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","_resolveNodeChildren","skins","skin","_resolveSkin","scenes","scene","_resolveScene","getScene","index","_get","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","cameras","getTexture","getSampler","getImage","getBufferView","getBuffer","array","_typeof2","console","warn","concat","_this2","gltfNode","_this3","camera","reduce","accum","meshIndex","primitives","_this4","children","child","gltfSkin","inverseBindMatrices","gltfMesh","_this5","gltfPrimitive","primitive","attributes","indices","attribute","gltfMaterial","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","gltfAccessor","bytesPerComponent","components","bytesPerElement","bufferView","sparse","buffer","_getAccessorArrayType","getAccessorArrayTypeAndLength","ArrayType","byteLength","byteOffset","cutBuffer","arrayBuffer","slice","byteStride","_getValueFromInterleavedBuffer","count","result","Uint8Array","elementOffset","set","gltfTexture","gltfSampler","glEnum","_enumSamplerParameter","gltfImage","preloadedImage","gltfBufferView","bufferIndex","data","_resolveCamera","gltfCamera","perspective","orthographic","postProcessGLTF"],"sources":["../../../../src/lib/api/post-process-gltf.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {GLTFWithBuffers} from '../types/gltf-types';\nimport type {ParseGLTFOptions} from '../parsers/parse-gltf';\n\nimport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFBufferView,\n  GLTFCamera,\n  GLTFImage,\n  GLTFMaterial,\n  GLTFMesh,\n  GLTFNode,\n  GLTFSampler,\n  GLTFScene,\n  GLTFSkin,\n  GLTFTexture\n} from '../types/gltf-json-schema';\n\nimport type {\n  GLTFPostprocessed,\n  GLTFAccessorPostprocessed,\n  GLTFBufferPostprocessed,\n  GLTFBufferViewPostprocessed,\n  GLTFCameraPostprocessed,\n  GLTFImagePostprocessed,\n  GLTFMaterialPostprocessed,\n  GLTFMeshPostprocessed,\n  GLTFNodePostprocessed,\n  GLTFSamplerPostprocessed,\n  GLTFScenePostprocessed,\n  GLTFSkinPostprocessed,\n  GLTFTexturePostprocessed,\n  GLTFMeshPrimitivePostprocessed\n} from '../types/gltf-postprocessed-schema';\n\nimport {assert} from '../utils/assert';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER_PARAMETERS = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT\n};\n\nfunction makeDefaultSampler(): GLTFSamplerPostprocessed {\n  return {\n    id: 'default-sampler',\n    parameters: DEFAULT_SAMPLER_PARAMETERS\n  };\n}\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  baseUri: string = '';\n  // @ts-expect-error\n  jsonUnprocessed: GLTF;\n  // @ts-expect-error\n  json: GLTFPostprocessed;\n  buffers: {\n    arrayBuffer: ArrayBuffer;\n    byteOffset: number;\n    byteLength: number;\n  }[] = [];\n  images: any[] = [];\n\n  postProcess(gltf: GLTFWithBuffers, options = {}) {\n    const {json, buffers = [], images = []} = gltf;\n    // @ts-expect-error\n    const {baseUri = ''} = gltf;\n    assert(json);\n\n    this.baseUri = baseUri;\n    this.buffers = buffers;\n    this.images = images;\n    this.jsonUnprocessed = json;\n\n    this.json = this._resolveTree(gltf.json, options);\n\n    return this.json;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity, max-statements\n  _resolveTree(gltf: GLTF, options = {}): GLTFPostprocessed {\n    // @ts-expect-error\n    const json: GLTFPostprocessed = {...gltf};\n    this.json = json;\n\n    if (gltf.bufferViews) {\n      json.bufferViews = gltf.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (gltf.images) {\n      json.images = gltf.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (gltf.samplers) {\n      json.samplers = gltf.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (gltf.textures) {\n      json.textures = gltf.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (gltf.accessors) {\n      json.accessors = gltf.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (gltf.materials) {\n      json.materials = gltf.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (gltf.meshes) {\n      json.meshes = gltf.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (gltf.nodes) {\n      json.nodes = gltf.nodes.map((node, i) => this._resolveNode(node, i));\n      json.nodes = json.nodes.map((node, i) => this._resolveNodeChildren(node));\n    }\n    if (gltf.skins) {\n      json.skins = gltf.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (gltf.scenes) {\n      json.scenes = gltf.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (typeof this.json.scene === 'number' && json.scenes) {\n      json.scene = json.scenes[this.json.scene];\n    }\n\n    return json;\n  }\n\n  getScene(index: number): GLTFScenePostprocessed {\n    return this._get(this.json.scenes, index);\n  }\n\n  getNode(index: number): GLTFNodePostprocessed {\n    return this._get(this.json.nodes, index);\n  }\n\n  getSkin(index: number): GLTFSkinPostprocessed {\n    return this._get(this.json.skins, index);\n  }\n\n  getMesh(index: number): GLTFMeshPostprocessed {\n    return this._get(this.json.meshes, index);\n  }\n\n  getMaterial(index: number): GLTFMaterialPostprocessed {\n    return this._get(this.json.materials, index);\n  }\n\n  getAccessor(index: number): GLTFAccessorPostprocessed {\n    return this._get(this.json.accessors, index);\n  }\n\n  getCamera(index: number): GLTFCameraPostprocessed {\n    return this._get(this.json.cameras, index);\n  }\n\n  getTexture(index: number): GLTFTexturePostprocessed {\n    return this._get(this.json.textures, index);\n  }\n\n  getSampler(index: number): GLTFSamplerPostprocessed {\n    return this._get(this.json.samplers, index);\n  }\n\n  getImage(index: number): GLTFImagePostprocessed {\n    return this._get(this.json.images, index);\n  }\n\n  getBufferView(index: number): GLTFBufferViewPostprocessed {\n    return this._get(this.json.bufferViews, index);\n  }\n\n  getBuffer(index: number): GLTFBufferPostprocessed {\n    return this._get(this.json.buffers, index);\n  }\n\n  _get<T>(array: T[] | undefined, index: number): T {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = array && array[index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object as T;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene: GLTFScene, index: number): GLTFScenePostprocessed {\n    return {\n      ...scene,\n      // @ts-ignore\n      id: scene.id || `scene-${index}`,\n      nodes: (scene.nodes || []).map((node) => this.getNode(node))\n    };\n  }\n\n  _resolveNode(gltfNode: GLTFNode, index: number): GLTFNodePostprocessed {\n    // @ts-expect-error\n    const node: GLTFNodePostprocessed = {\n      ...gltfNode,\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfNode?.id || `node-${index}`\n    };\n    if (gltfNode.mesh !== undefined) {\n      node.mesh = this.getMesh(gltfNode.mesh);\n    }\n    if (gltfNode.camera !== undefined) {\n      node.camera = this.getCamera(gltfNode.camera);\n    }\n    if (gltfNode.skin !== undefined) {\n      node.skin = this.getSkin(gltfNode.skin);\n    }\n\n    // TODO deprecated - Delete in v4.0?\n    // @ts-expect-error node.meshes does not seem to be part of the GLTF standard\n    if (gltfNode.meshes !== undefined && gltfNode.meshes.length) {\n      // @ts-expect-error\n      node.mesh = gltfNode.meshes.reduce(\n        (accum, meshIndex) => {\n          const mesh = this.getMesh(meshIndex);\n          accum.id = mesh.id;\n          accum.primitives = accum.primitives.concat(mesh.primitives);\n          return accum;\n        },\n        {primitives: []}\n      );\n    }\n\n    return node;\n  }\n\n  _resolveNodeChildren(node: GLTFNodePostprocessed): GLTFNodePostprocessed {\n    if (node.children) {\n      // @ts-expect-error node.children are numbers at this stage\n      node.children = node.children.map((child) => this.getNode(child));\n    }\n    return node;\n  }\n\n  _resolveSkin(gltfSkin: GLTFSkin, index: number): GLTFSkinPostprocessed {\n    const inverseBindMatrices =\n      typeof gltfSkin.inverseBindMatrices === 'number'\n        ? this.getAccessor(gltfSkin.inverseBindMatrices)\n        : undefined;\n\n    return {\n      ...gltfSkin,\n      id: gltfSkin.id || `skin-${index}`,\n      inverseBindMatrices\n    };\n  }\n\n  _resolveMesh(gltfMesh: GLTFMesh, index: number): GLTFMeshPostprocessed {\n    const mesh: GLTFMeshPostprocessed = {\n      ...gltfMesh,\n      id: gltfMesh.id || `mesh-${index}`,\n      primitives: []\n    };\n    if (gltfMesh.primitives) {\n      mesh.primitives = gltfMesh.primitives.map((gltfPrimitive) => {\n        const primitive: GLTFMeshPrimitivePostprocessed = {\n          ...gltfPrimitive,\n          attributes: {},\n          indices: undefined,\n          material: undefined\n        };\n        const attributes = gltfPrimitive.attributes;\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (gltfPrimitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(gltfPrimitive.indices);\n        }\n        if (gltfPrimitive.material !== undefined) {\n          primitive.material = this.getMaterial(gltfPrimitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(gltfMaterial: GLTFMaterial, index: number): GLTFMaterialPostprocessed {\n    // @ts-expect-error\n    const material: GLTFMaterialPostprocessed = {\n      ...gltfMaterial,\n      // @ts-expect-error\n      id: gltfMaterial.id || `material-${index}`\n    };\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlusionTexture = {...material.occlusionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emissiveTexture = {...material.emissiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emissiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(gltfAccessor: GLTFAccessor, index: number): GLTFAccessorPostprocessed {\n    // Look up enums\n    const bytesPerComponent = getBytesFromComponentType(gltfAccessor.componentType);\n    const components = getSizeFromAccessorType(gltfAccessor.type);\n    const bytesPerElement = bytesPerComponent * components;\n\n    const accessor: GLTFAccessorPostprocessed = {\n      ...gltfAccessor,\n      // @ts-expect-error\n      id: gltfAccessor.id || `accessor-${index}`,\n      bytesPerComponent,\n      components,\n      bytesPerElement,\n      value: undefined!,\n      bufferView: undefined!,\n      sparse: undefined!\n    };\n    if (gltfAccessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(gltfAccessor.bufferView);\n    }\n\n    // Create TypedArray for the accessor\n    // Note: The canonical way to instantiate is to ignore this array and create\n    // WebGLBuffer's using the bufferViews.\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {ArrayType, byteLength} = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset =\n        (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      if (accessor.bufferView.byteStride) {\n        cutBuffer = this._getValueFromInterleavedBuffer(\n          buffer,\n          byteOffset,\n          accessor.bufferView.byteStride,\n          accessor.bytesPerElement,\n          accessor.count\n        );\n      }\n      accessor.value = new ArrayType(cutBuffer);\n    }\n\n    return accessor;\n  }\n\n  /**\n   * Take values of particular accessor from interleaved buffer\n   * various parts of the buffer\n   * @param buffer\n   * @param byteOffset\n   * @param byteStride\n   * @param bytesPerElement\n   * @param count\n   * @returns\n   */\n  _getValueFromInterleavedBuffer(\n    buffer,\n    byteOffset: number,\n    byteStride: number,\n    bytesPerElement: number,\n    count: number\n  ): ArrayBufferLike {\n    const result = new Uint8Array(count * bytesPerElement);\n    for (let i = 0; i < count; i++) {\n      const elementOffset = byteOffset + i * byteStride;\n      result.set(\n        new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)),\n        i * bytesPerElement\n      );\n    }\n    return result.buffer;\n  }\n\n  _resolveTexture(gltfTexture: GLTFTexture, index: number): GLTFTexturePostprocessed {\n    return {\n      ...gltfTexture,\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfTexture.id || `texture-${index}`,\n      sampler:\n        typeof gltfTexture.sampler === 'number'\n          ? this.getSampler(gltfTexture.sampler)\n          : makeDefaultSampler(),\n      source: typeof gltfTexture.source === 'number' ? this.getImage(gltfTexture.source) : undefined\n    };\n  }\n\n  _resolveSampler(gltfSampler: GLTFSampler, index: number): GLTFSamplerPostprocessed {\n    const sampler: GLTFSamplerPostprocessed = {\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfSampler.id || `sampler-${index}`,\n      ...gltfSampler,\n      parameters: {}\n    };\n    // Map textual parameters to GL parameter values\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key: string): number {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(gltfImage: GLTFImage, index: number): GLTFImagePostprocessed {\n    const image: GLTFImagePostprocessed = {\n      ...gltfImage,\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfImage.id || `image-${index}`,\n      image: null!,\n      bufferView:\n        gltfImage.bufferView !== undefined ? this.getBufferView(gltfImage.bufferView) : undefined\n    };\n\n    // Check if image has been preloaded by the GLTFLoader\n    // If so, link it into the JSON and drop the URI\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(gltfBufferView: GLTFBufferView, index: number): GLTFBufferViewPostprocessed {\n    const bufferIndex = gltfBufferView.buffer;\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    // Add offset of buffer, then offset of buffer view\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n    if (gltfBufferView.byteOffset) {\n      byteOffset += gltfBufferView.byteOffset;\n    }\n\n    const bufferView: GLTFBufferViewPostprocessed = {\n      // // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: `bufferView-${index}`,\n      ...gltfBufferView,\n      // ...this.buffers[bufferIndex],\n      buffer: this.buffers[bufferIndex],\n      data: new Uint8Array(arrayBuffer, byteOffset, gltfBufferView.byteLength)\n    };\n\n    return bufferView;\n  }\n\n  _resolveCamera(gltfCamera: GLTFCamera, index): GLTFCameraPostprocessed {\n    const camera: GLTFCameraPostprocessed = {\n      ...gltfCamera,\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfCamera.id || `camera-${index}`\n    };\n\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport function postProcessGLTF(\n  gltf: GLTFWithBuffers,\n  options?: ParseGLTFOptions\n): GLTFPostprocessed {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"mappings":"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"}