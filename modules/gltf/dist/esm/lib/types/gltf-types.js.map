{"version":3,"file":"gltf-types.js","names":[],"sources":["../../../../src/lib/types/gltf-types.ts"],"sourcesContent":["/* eslint-disable camelcase */\n\nimport {ImageType} from '@loaders.gl/images';\nimport type {GLTF} from './gltf-json-schema';\n\n/** GLTFLoader removes processed extensions from `extensionsUsed` and `extensionsUsed`\n * `processedExtensions` is used to track those extensions\n */\nexport type GLTFWithBuffers = {\n  json: GLTF;\n  binary?: ArrayBuffer;\n  buffers: GLTFExternalBuffer[];\n  images?: GLTFExternalImage[];\n};\n\ntype GLTFExternalBuffer = {\n  arrayBuffer: ArrayBuffer;\n  byteOffset: number;\n  byteLength: number;\n};\n\ntype GLTFExternalImage =\n  | ImageType\n  | {\n      compressed: true;\n      mipmaps: false;\n      width: number;\n      height: number;\n      data: Uint8Array;\n    };\n\nexport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFBuffer,\n  GLTFBufferView,\n  // GLTFCamera,\n  GLTFMeshPrimitive,\n  GLTFMesh,\n  GLTFNode,\n  GLTFMaterial,\n  GLTFSampler,\n  GLTFScene,\n  GLTFSkin,\n  GLTFTexture,\n  GLTFImage,\n  GLTF_KHR_binary_glTF,\n  GLTF_KHR_draco_mesh_compression,\n  GLTF_KHR_texture_basisu,\n  GLTF_EXT_meshopt_compression,\n  GLTF_EXT_texture_webp,\n  GLTF_EXT_feature_metadata,\n  GLTF_EXT_mesh_features\n} from './gltf-json-schema';\n\nexport type {\n  GLTFPostprocessed,\n  GLTFAccessorPostprocessed,\n  GLTFImagePostprocessed,\n  GLTFNodePostprocessed,\n  GLTFMeshPostprocessed,\n  GLTFMeshPrimitivePostprocessed,\n  GLTFMaterialPostprocessed,\n  GLTFTexturePostprocessed\n} from './gltf-postprocessed-schema';\n"],"mappings":""}