{"version":3,"file":"post-process-gltf.js","names":["assert","getAccessorArrayTypeAndLength","COMPONENTS","SCALAR","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","BYTES","GL_SAMPLER","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","TEXTURE_WRAP_S","TEXTURE_WRAP_T","REPEAT","LINEAR","NEAREST_MIPMAP_LINEAR","SAMPLER_PARAMETER_GLTF_TO_GL","magFilter","minFilter","wrapS","wrapT","DEFAULT_SAMPLER_PARAMETERS","makeDefaultSampler","id","parameters","getBytesFromComponentType","componentType","getSizeFromAccessorType","type","GLTFPostProcessor","constructor","_defineProperty","postProcess","gltf","options","arguments","length","undefined","json","buffers","images","baseUri","jsonUnprocessed","_resolveTree","bufferViews","map","bufView","i","_resolveBufferView","image","_resolveImage","samplers","sampler","_resolveSampler","textures","texture","_resolveTexture","accessors","accessor","_resolveAccessor","materials","material","_resolveMaterial","meshes","mesh","_resolveMesh","nodes","node","_resolveNode","_resolveNodeChildren","skins","skin","_resolveSkin","scenes","scene","_resolveScene","getScene","index","_get","getNode","getSkin","getMesh","getMaterial","getAccessor","getCamera","cameras","getTexture","getSampler","getImage","getBufferView","getBuffer","array","object","console","warn","concat","gltfNode","camera","reduce","accum","meshIndex","primitives","children","child","gltfSkin","inverseBindMatrices","gltfMesh","gltfPrimitive","primitive","attributes","indices","attribute","gltfMaterial","normalTexture","occlusionTexture","emissiveTexture","emissiveFactor","pbrMetallicRoughness","mr","baseColorTexture","metallicRoughnessTexture","gltfAccessor","bytesPerComponent","components","bytesPerElement","value","bufferView","sparse","buffer","ArrayType","byteLength","byteOffset","cutBuffer","arrayBuffer","slice","byteStride","_getValueFromInterleavedBuffer","count","result","Uint8Array","elementOffset","set","gltfTexture","source","gltfSampler","key","glEnum","_enumSamplerParameter","gltfImage","preloadedImage","gltfBufferView","bufferIndex","data","_resolveCamera","gltfCamera","perspective","orthographic","postProcessGLTF"],"sources":["../../../../src/lib/api/post-process-gltf.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {GLTFWithBuffers} from '../types/gltf-types';\nimport type {ParseGLTFOptions} from '../parsers/parse-gltf';\n\nimport type {\n  GLTF,\n  GLTFAccessor,\n  GLTFBufferView,\n  GLTFCamera,\n  GLTFImage,\n  GLTFMaterial,\n  GLTFMesh,\n  GLTFNode,\n  GLTFSampler,\n  GLTFScene,\n  GLTFSkin,\n  GLTFTexture\n} from '../types/gltf-json-schema';\n\nimport type {\n  GLTFPostprocessed,\n  GLTFAccessorPostprocessed,\n  GLTFBufferPostprocessed,\n  GLTFBufferViewPostprocessed,\n  GLTFCameraPostprocessed,\n  GLTFImagePostprocessed,\n  GLTFMaterialPostprocessed,\n  GLTFMeshPostprocessed,\n  GLTFNodePostprocessed,\n  GLTFSamplerPostprocessed,\n  GLTFScenePostprocessed,\n  GLTFSkinPostprocessed,\n  GLTFTexturePostprocessed,\n  GLTFMeshPrimitivePostprocessed\n} from '../types/gltf-postprocessed-schema';\n\nimport {assert} from '../utils/assert';\nimport {getAccessorArrayTypeAndLength} from '../gltf-utils/gltf-utils';\n\n// This is a post processor for loaded glTF files\n// The goal is to make the loaded data easier to use in WebGL applications\n//\n// Functions:\n// * Resolve indexed arrays structure of glTF into a linked tree.\n// * Translate stringified enum keys and values into WebGL constants.\n// * Load images (optional)\n\n// ENUM LOOKUP\n\nconst COMPONENTS = {\n  SCALAR: 1,\n  VEC2: 2,\n  VEC3: 3,\n  VEC4: 4,\n  MAT2: 4,\n  MAT3: 9,\n  MAT4: 16\n};\n\nconst BYTES = {\n  5120: 1, // BYTE\n  5121: 1, // UNSIGNED_BYTE\n  5122: 2, // SHORT\n  5123: 2, // UNSIGNED_SHORT\n  5125: 4, // UNSIGNED_INT\n  5126: 4 // FLOAT\n};\n\nconst GL_SAMPLER = {\n  // Sampler parameters\n  TEXTURE_MAG_FILTER: 0x2800,\n  TEXTURE_MIN_FILTER: 0x2801,\n  TEXTURE_WRAP_S: 0x2802,\n  TEXTURE_WRAP_T: 0x2803,\n\n  // Sampler default values\n  REPEAT: 0x2901,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_LINEAR: 0x2702\n};\n\nconst SAMPLER_PARAMETER_GLTF_TO_GL = {\n  magFilter: GL_SAMPLER.TEXTURE_MAG_FILTER,\n  minFilter: GL_SAMPLER.TEXTURE_MIN_FILTER,\n  wrapS: GL_SAMPLER.TEXTURE_WRAP_S,\n  wrapT: GL_SAMPLER.TEXTURE_WRAP_T\n};\n\n// When undefined, a sampler with repeat wrapping and auto filtering should be used.\n// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#texture\nconst DEFAULT_SAMPLER_PARAMETERS = {\n  [GL_SAMPLER.TEXTURE_MAG_FILTER]: GL_SAMPLER.LINEAR,\n  [GL_SAMPLER.TEXTURE_MIN_FILTER]: GL_SAMPLER.NEAREST_MIPMAP_LINEAR,\n  [GL_SAMPLER.TEXTURE_WRAP_S]: GL_SAMPLER.REPEAT,\n  [GL_SAMPLER.TEXTURE_WRAP_T]: GL_SAMPLER.REPEAT\n};\n\nfunction makeDefaultSampler(): GLTFSamplerPostprocessed {\n  return {\n    id: 'default-sampler',\n    parameters: DEFAULT_SAMPLER_PARAMETERS\n  };\n}\n\nfunction getBytesFromComponentType(componentType) {\n  return BYTES[componentType];\n}\n\nfunction getSizeFromAccessorType(type) {\n  return COMPONENTS[type];\n}\n\nclass GLTFPostProcessor {\n  baseUri: string = '';\n  // @ts-expect-error\n  jsonUnprocessed: GLTF;\n  // @ts-expect-error\n  json: GLTFPostprocessed;\n  buffers: {\n    arrayBuffer: ArrayBuffer;\n    byteOffset: number;\n    byteLength: number;\n  }[] = [];\n  images: any[] = [];\n\n  postProcess(gltf: GLTFWithBuffers, options = {}) {\n    const {json, buffers = [], images = []} = gltf;\n    // @ts-expect-error\n    const {baseUri = ''} = gltf;\n    assert(json);\n\n    this.baseUri = baseUri;\n    this.buffers = buffers;\n    this.images = images;\n    this.jsonUnprocessed = json;\n\n    this.json = this._resolveTree(gltf.json, options);\n\n    return this.json;\n  }\n\n  // Convert indexed glTF structure into tree structure\n  // cross-link index resolution, enum lookup, convenience calculations\n  // eslint-disable-next-line complexity, max-statements\n  _resolveTree(gltf: GLTF, options = {}): GLTFPostprocessed {\n    // @ts-expect-error\n    const json: GLTFPostprocessed = {...gltf};\n    this.json = json;\n\n    if (gltf.bufferViews) {\n      json.bufferViews = gltf.bufferViews.map((bufView, i) => this._resolveBufferView(bufView, i));\n    }\n    if (gltf.images) {\n      json.images = gltf.images.map((image, i) => this._resolveImage(image, i));\n    }\n    if (gltf.samplers) {\n      json.samplers = gltf.samplers.map((sampler, i) => this._resolveSampler(sampler, i));\n    }\n    if (gltf.textures) {\n      json.textures = gltf.textures.map((texture, i) => this._resolveTexture(texture, i));\n    }\n    if (gltf.accessors) {\n      json.accessors = gltf.accessors.map((accessor, i) => this._resolveAccessor(accessor, i));\n    }\n    if (gltf.materials) {\n      json.materials = gltf.materials.map((material, i) => this._resolveMaterial(material, i));\n    }\n    if (gltf.meshes) {\n      json.meshes = gltf.meshes.map((mesh, i) => this._resolveMesh(mesh, i));\n    }\n    if (gltf.nodes) {\n      json.nodes = gltf.nodes.map((node, i) => this._resolveNode(node, i));\n      json.nodes = json.nodes.map((node, i) => this._resolveNodeChildren(node));\n    }\n    if (gltf.skins) {\n      json.skins = gltf.skins.map((skin, i) => this._resolveSkin(skin, i));\n    }\n    if (gltf.scenes) {\n      json.scenes = gltf.scenes.map((scene, i) => this._resolveScene(scene, i));\n    }\n    if (typeof this.json.scene === 'number' && json.scenes) {\n      json.scene = json.scenes[this.json.scene];\n    }\n\n    return json;\n  }\n\n  getScene(index: number): GLTFScenePostprocessed {\n    return this._get(this.json.scenes, index);\n  }\n\n  getNode(index: number): GLTFNodePostprocessed {\n    return this._get(this.json.nodes, index);\n  }\n\n  getSkin(index: number): GLTFSkinPostprocessed {\n    return this._get(this.json.skins, index);\n  }\n\n  getMesh(index: number): GLTFMeshPostprocessed {\n    return this._get(this.json.meshes, index);\n  }\n\n  getMaterial(index: number): GLTFMaterialPostprocessed {\n    return this._get(this.json.materials, index);\n  }\n\n  getAccessor(index: number): GLTFAccessorPostprocessed {\n    return this._get(this.json.accessors, index);\n  }\n\n  getCamera(index: number): GLTFCameraPostprocessed {\n    return this._get(this.json.cameras, index);\n  }\n\n  getTexture(index: number): GLTFTexturePostprocessed {\n    return this._get(this.json.textures, index);\n  }\n\n  getSampler(index: number): GLTFSamplerPostprocessed {\n    return this._get(this.json.samplers, index);\n  }\n\n  getImage(index: number): GLTFImagePostprocessed {\n    return this._get(this.json.images, index);\n  }\n\n  getBufferView(index: number): GLTFBufferViewPostprocessed {\n    return this._get(this.json.bufferViews, index);\n  }\n\n  getBuffer(index: number): GLTFBufferPostprocessed {\n    return this._get(this.json.buffers, index);\n  }\n\n  _get<T>(array: T[] | undefined, index: number): T {\n    // check if already resolved\n    if (typeof index === 'object') {\n      return index;\n    }\n    const object = array && array[index];\n    if (!object) {\n      console.warn(`glTF file error: Could not find ${array}[${index}]`); // eslint-disable-line\n    }\n    return object as T;\n  }\n\n  // PARSING HELPERS\n\n  _resolveScene(scene: GLTFScene, index: number): GLTFScenePostprocessed {\n    return {\n      ...scene,\n      // @ts-ignore\n      id: scene.id || `scene-${index}`,\n      nodes: (scene.nodes || []).map((node) => this.getNode(node))\n    };\n  }\n\n  _resolveNode(gltfNode: GLTFNode, index: number): GLTFNodePostprocessed {\n    // @ts-expect-error\n    const node: GLTFNodePostprocessed = {\n      ...gltfNode,\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfNode?.id || `node-${index}`\n    };\n    if (gltfNode.mesh !== undefined) {\n      node.mesh = this.getMesh(gltfNode.mesh);\n    }\n    if (gltfNode.camera !== undefined) {\n      node.camera = this.getCamera(gltfNode.camera);\n    }\n    if (gltfNode.skin !== undefined) {\n      node.skin = this.getSkin(gltfNode.skin);\n    }\n\n    // TODO deprecated - Delete in v4.0?\n    // @ts-expect-error node.meshes does not seem to be part of the GLTF standard\n    if (gltfNode.meshes !== undefined && gltfNode.meshes.length) {\n      // @ts-expect-error\n      node.mesh = gltfNode.meshes.reduce(\n        (accum, meshIndex) => {\n          const mesh = this.getMesh(meshIndex);\n          accum.id = mesh.id;\n          accum.primitives = accum.primitives.concat(mesh.primitives);\n          return accum;\n        },\n        {primitives: []}\n      );\n    }\n\n    return node;\n  }\n\n  _resolveNodeChildren(node: GLTFNodePostprocessed): GLTFNodePostprocessed {\n    if (node.children) {\n      // @ts-expect-error node.children are numbers at this stage\n      node.children = node.children.map((child) => this.getNode(child));\n    }\n    return node;\n  }\n\n  _resolveSkin(gltfSkin: GLTFSkin, index: number): GLTFSkinPostprocessed {\n    const inverseBindMatrices =\n      typeof gltfSkin.inverseBindMatrices === 'number'\n        ? this.getAccessor(gltfSkin.inverseBindMatrices)\n        : undefined;\n\n    return {\n      ...gltfSkin,\n      id: gltfSkin.id || `skin-${index}`,\n      inverseBindMatrices\n    };\n  }\n\n  _resolveMesh(gltfMesh: GLTFMesh, index: number): GLTFMeshPostprocessed {\n    const mesh: GLTFMeshPostprocessed = {\n      ...gltfMesh,\n      id: gltfMesh.id || `mesh-${index}`,\n      primitives: []\n    };\n    if (gltfMesh.primitives) {\n      mesh.primitives = gltfMesh.primitives.map((gltfPrimitive) => {\n        const primitive: GLTFMeshPrimitivePostprocessed = {\n          ...gltfPrimitive,\n          attributes: {},\n          indices: undefined,\n          material: undefined\n        };\n        const attributes = gltfPrimitive.attributes;\n        for (const attribute in attributes) {\n          primitive.attributes[attribute] = this.getAccessor(attributes[attribute]);\n        }\n        if (gltfPrimitive.indices !== undefined) {\n          primitive.indices = this.getAccessor(gltfPrimitive.indices);\n        }\n        if (gltfPrimitive.material !== undefined) {\n          primitive.material = this.getMaterial(gltfPrimitive.material);\n        }\n        return primitive;\n      });\n    }\n    return mesh;\n  }\n\n  _resolveMaterial(gltfMaterial: GLTFMaterial, index: number): GLTFMaterialPostprocessed {\n    // @ts-expect-error\n    const material: GLTFMaterialPostprocessed = {\n      ...gltfMaterial,\n      // @ts-expect-error\n      id: gltfMaterial.id || `material-${index}`\n    };\n    if (material.normalTexture) {\n      material.normalTexture = {...material.normalTexture};\n      material.normalTexture.texture = this.getTexture(material.normalTexture.index);\n    }\n    if (material.occlusionTexture) {\n      material.occlusionTexture = {...material.occlusionTexture};\n      material.occlusionTexture.texture = this.getTexture(material.occlusionTexture.index);\n    }\n    if (material.emissiveTexture) {\n      material.emissiveTexture = {...material.emissiveTexture};\n      material.emissiveTexture.texture = this.getTexture(material.emissiveTexture.index);\n    }\n    if (!material.emissiveFactor) {\n      material.emissiveFactor = material.emissiveTexture ? [1, 1, 1] : [0, 0, 0];\n    }\n\n    if (material.pbrMetallicRoughness) {\n      material.pbrMetallicRoughness = {...material.pbrMetallicRoughness};\n      const mr = material.pbrMetallicRoughness;\n      if (mr.baseColorTexture) {\n        mr.baseColorTexture = {...mr.baseColorTexture};\n        mr.baseColorTexture.texture = this.getTexture(mr.baseColorTexture.index);\n      }\n      if (mr.metallicRoughnessTexture) {\n        mr.metallicRoughnessTexture = {...mr.metallicRoughnessTexture};\n        mr.metallicRoughnessTexture.texture = this.getTexture(mr.metallicRoughnessTexture.index);\n      }\n    }\n    return material;\n  }\n\n  _resolveAccessor(gltfAccessor: GLTFAccessor, index: number): GLTFAccessorPostprocessed {\n    // Look up enums\n    const bytesPerComponent = getBytesFromComponentType(gltfAccessor.componentType);\n    const components = getSizeFromAccessorType(gltfAccessor.type);\n    const bytesPerElement = bytesPerComponent * components;\n\n    const accessor: GLTFAccessorPostprocessed = {\n      ...gltfAccessor,\n      // @ts-expect-error\n      id: gltfAccessor.id || `accessor-${index}`,\n      bytesPerComponent,\n      components,\n      bytesPerElement,\n      value: undefined!,\n      bufferView: undefined!,\n      sparse: undefined!\n    };\n    if (gltfAccessor.bufferView !== undefined) {\n      // Draco encoded meshes don't have bufferView\n      accessor.bufferView = this.getBufferView(gltfAccessor.bufferView);\n    }\n\n    // Create TypedArray for the accessor\n    // Note: The canonical way to instantiate is to ignore this array and create\n    // WebGLBuffer's using the bufferViews.\n    if (accessor.bufferView) {\n      const buffer = accessor.bufferView.buffer;\n      const {ArrayType, byteLength} = getAccessorArrayTypeAndLength(accessor, accessor.bufferView);\n      const byteOffset =\n        (accessor.bufferView.byteOffset || 0) + (accessor.byteOffset || 0) + buffer.byteOffset;\n      let cutBuffer = buffer.arrayBuffer.slice(byteOffset, byteOffset + byteLength);\n      if (accessor.bufferView.byteStride) {\n        cutBuffer = this._getValueFromInterleavedBuffer(\n          buffer,\n          byteOffset,\n          accessor.bufferView.byteStride,\n          accessor.bytesPerElement,\n          accessor.count\n        );\n      }\n      accessor.value = new ArrayType(cutBuffer);\n    }\n\n    return accessor;\n  }\n\n  /**\n   * Take values of particular accessor from interleaved buffer\n   * various parts of the buffer\n   * @param buffer\n   * @param byteOffset\n   * @param byteStride\n   * @param bytesPerElement\n   * @param count\n   * @returns\n   */\n  _getValueFromInterleavedBuffer(\n    buffer,\n    byteOffset: number,\n    byteStride: number,\n    bytesPerElement: number,\n    count: number\n  ): ArrayBufferLike {\n    const result = new Uint8Array(count * bytesPerElement);\n    for (let i = 0; i < count; i++) {\n      const elementOffset = byteOffset + i * byteStride;\n      result.set(\n        new Uint8Array(buffer.arrayBuffer.slice(elementOffset, elementOffset + bytesPerElement)),\n        i * bytesPerElement\n      );\n    }\n    return result.buffer;\n  }\n\n  _resolveTexture(gltfTexture: GLTFTexture, index: number): GLTFTexturePostprocessed {\n    return {\n      ...gltfTexture,\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfTexture.id || `texture-${index}`,\n      sampler:\n        typeof gltfTexture.sampler === 'number'\n          ? this.getSampler(gltfTexture.sampler)\n          : makeDefaultSampler(),\n      source: typeof gltfTexture.source === 'number' ? this.getImage(gltfTexture.source) : undefined\n    };\n  }\n\n  _resolveSampler(gltfSampler: GLTFSampler, index: number): GLTFSamplerPostprocessed {\n    const sampler: GLTFSamplerPostprocessed = {\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfSampler.id || `sampler-${index}`,\n      ...gltfSampler,\n      parameters: {}\n    };\n    // Map textual parameters to GL parameter values\n    for (const key in sampler) {\n      const glEnum = this._enumSamplerParameter(key);\n      if (glEnum !== undefined) {\n        sampler.parameters[glEnum] = sampler[key];\n      }\n    }\n    return sampler;\n  }\n\n  _enumSamplerParameter(key: string): number {\n    return SAMPLER_PARAMETER_GLTF_TO_GL[key];\n  }\n\n  _resolveImage(gltfImage: GLTFImage, index: number): GLTFImagePostprocessed {\n    const image: GLTFImagePostprocessed = {\n      ...gltfImage,\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfImage.id || `image-${index}`,\n      image: null!,\n      bufferView:\n        gltfImage.bufferView !== undefined ? this.getBufferView(gltfImage.bufferView) : undefined\n    };\n\n    // Check if image has been preloaded by the GLTFLoader\n    // If so, link it into the JSON and drop the URI\n    const preloadedImage = this.images[index];\n    if (preloadedImage) {\n      image.image = preloadedImage;\n    }\n\n    return image;\n  }\n\n  _resolveBufferView(gltfBufferView: GLTFBufferView, index: number): GLTFBufferViewPostprocessed {\n    const bufferIndex = gltfBufferView.buffer;\n    const arrayBuffer = this.buffers[bufferIndex].arrayBuffer;\n    // Add offset of buffer, then offset of buffer view\n    let byteOffset = this.buffers[bufferIndex].byteOffset || 0;\n    if (gltfBufferView.byteOffset) {\n      byteOffset += gltfBufferView.byteOffset;\n    }\n\n    const bufferView: GLTFBufferViewPostprocessed = {\n      // // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: `bufferView-${index}`,\n      ...gltfBufferView,\n      // ...this.buffers[bufferIndex],\n      buffer: this.buffers[bufferIndex],\n      data: new Uint8Array(arrayBuffer, byteOffset, gltfBufferView.byteLength)\n    };\n\n    return bufferView;\n  }\n\n  _resolveCamera(gltfCamera: GLTFCamera, index): GLTFCameraPostprocessed {\n    const camera: GLTFCameraPostprocessed = {\n      ...gltfCamera,\n      // @ts-expect-error id could already be present, glTF standard does not prevent it\n      id: gltfCamera.id || `camera-${index}`\n    };\n\n    // TODO - create 4x4 matrices\n    if (camera.perspective) {\n      // camera.matrix = createPerspectiveMatrix(camera.perspective);\n    }\n    if (camera.orthographic) {\n      // camera.matrix = createOrthographicMatrix(camera.orthographic);\n    }\n    return camera;\n  }\n}\n\nexport function postProcessGLTF(\n  gltf: GLTFWithBuffers,\n  options?: ParseGLTFOptions\n): GLTFPostprocessed {\n  return new GLTFPostProcessor().postProcess(gltf, options);\n}\n"],"mappings":"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"}