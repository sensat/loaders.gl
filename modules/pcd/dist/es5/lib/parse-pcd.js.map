{"version":3,"file":"parse-pcd.js","names":["_schema","require","_decompressLzf","_getPcdSchema","LITTLE_ENDIAN","parsePCD","data","textData","TextDecoder","decode","pcdHeader","parsePCDHeader","attributes","parsePCDASCII","parsePCDBinary","parsePCDBinaryCompressed","Error","concat","getMeshAttributes","header","getMeshHeader","metadata","Object","fromEntries","JSON","stringify","boundingBox","schema","getPCDSchema","loader","loaderData","mode","topology","width","height","pointCount","vertexCount","getMeshBoundingBox","normalizedAttributes","POSITION","value","Float32Array","position","size","normal","length","NORMAL","color","COLOR_0","Uint8Array","intensity","label","result1","search","result2","exec","substr","headerLen","str","replace","version","fields","type","count","viewpoint","points","parseFloat","split","parseInt","map","x","i","push","offset","sizeSum","rowSize","pcdData","lines","line","undefined","y","z","rgb","floatValue","binaryColor","dataview","DataView","buffer","getUint8","normal_x","normal_y","normal_z","row","getFloat32","getInt32","sizes","Uint32Array","slice","compressedSize","decompressedSize","decompressed","decompressLZF","intensityIndex","indexOf","labelIndex"],"sources":["../../../src/lib/parse-pcd.ts"],"sourcesContent":["// PCD Loader, adapted from THREE.js (MIT license)\n// Description: A loader for PCD ascii and binary files.\n// Limitations: Compressed binary files are not supported.\n//\n// Attributions per original THREE.js source file:\n// @author Filipe Caixeta / http://filipecaixeta.com.br\n// @author Mugen87 / https://github.com/Mugen87\n\nimport {MeshAttribute, MeshAttributes} from '@loaders.gl/schema';\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\nimport {decompressLZF} from './decompress-lzf';\nimport {getPCDSchema} from './get-pcd-schema';\nimport type {PCDHeader, PCDMesh} from './pcd-types';\n\ntype MeshHeader = {\n  vertexCount: number;\n  boundingBox: [[number, number, number], [number, number, number]];\n};\n\ntype NormalizedAttributes = {\n  POSITION: {\n    value: Float32Array;\n    size: number;\n  };\n  NORMAL?: {\n    value: Float32Array;\n    size: number;\n  };\n  COLOR_0?: {\n    value: Uint8Array;\n    size: number;\n  };\n};\n\ntype HeaderAttributes = {\n  [attributeName: string]: number[];\n};\n\nconst LITTLE_ENDIAN: boolean = true;\n\n/**\n *\n * @param data\n * @returns\n */\nexport default function parsePCD(data: ArrayBufferLike): PCDMesh {\n  // parse header (always ascii format)\n  const textData = new TextDecoder().decode(data);\n  const pcdHeader = parsePCDHeader(textData);\n\n  let attributes: any = {};\n\n  // parse data\n  switch (pcdHeader.data) {\n    case 'ascii':\n      attributes = parsePCDASCII(pcdHeader, textData);\n      break;\n\n    case 'binary':\n      attributes = parsePCDBinary(pcdHeader, data);\n      break;\n\n    case 'binary_compressed':\n      attributes = parsePCDBinaryCompressed(pcdHeader, data);\n      break;\n\n    default:\n      throw new Error(`PCD: ${pcdHeader.data} files are not supported`);\n  }\n\n  attributes = getMeshAttributes(attributes);\n\n  const header = getMeshHeader(pcdHeader, attributes);\n\n  const metadata = Object.fromEntries([\n    ['mode', '0'],\n    ['boundingBox', JSON.stringify(header.boundingBox)]\n  ]);\n\n  const schema = getPCDSchema(pcdHeader, metadata);\n\n  return {\n    loader: 'pcd',\n    loaderData: pcdHeader,\n    header,\n    schema,\n    mode: 0, // POINTS\n    topology: 'point-list',\n    attributes\n  };\n}\n\n// Create a header that contains common data for PointCloud category loaders\nfunction getMeshHeader(pcdHeader: PCDHeader, attributes: NormalizedAttributes): MeshHeader {\n  if (typeof pcdHeader.width === 'number' && typeof pcdHeader.height === 'number') {\n    const pointCount = pcdHeader.width * pcdHeader.height; // Supports \"organized\" point sets\n    return {\n      vertexCount: pointCount,\n      boundingBox: getMeshBoundingBox(attributes)\n    };\n  }\n  return {\n    vertexCount: pcdHeader.vertexCount,\n    boundingBox: pcdHeader.boundingBox\n  };\n}\n\n/**\n * @param attributes\n * @returns Normalized attributes\n */\nfunction getMeshAttributes(attributes: HeaderAttributes): {[attributeName: string]: MeshAttribute} {\n  const normalizedAttributes: MeshAttributes = {\n    POSITION: {\n      // Binary PCD is only 32 bit\n      value: new Float32Array(attributes.position),\n      size: 3\n    }\n  };\n\n  if (attributes.normal && attributes.normal.length > 0) {\n    normalizedAttributes.NORMAL = {\n      value: new Float32Array(attributes.normal),\n      size: 3\n    };\n  }\n\n  if (attributes.color && attributes.color.length > 0) {\n    // TODO - RGBA\n    normalizedAttributes.COLOR_0 = {\n      value: new Uint8Array(attributes.color),\n      size: 3\n    };\n  }\n\n  if (attributes.intensity && attributes.intensity.length > 0) {\n    // TODO - RGBA\n    normalizedAttributes.COLOR_0 = {\n      value: new Uint8Array(attributes.color),\n      size: 3\n    };\n  }\n\n  if (attributes.label && attributes.label.length > 0) {\n    // TODO - RGBA\n    normalizedAttributes.COLOR_0 = {\n      value: new Uint8Array(attributes.label),\n      size: 3\n    };\n  }\n\n  return normalizedAttributes;\n}\n\n/**\n * Incoming data parsing\n * @param data\n * @returns Header\n */\n/* eslint-disable complexity, max-statements */\nfunction parsePCDHeader(data: string): PCDHeader {\n  const result1 = data.search(/[\\r\\n]DATA\\s(\\S*)\\s/i);\n  const result2 = /[\\r\\n]DATA\\s(\\S*)\\s/i.exec(data.substr(result1 - 1));\n\n  const pcdHeader: any = {};\n  pcdHeader.data = result2 && result2[1];\n  if (result2 !== null) {\n    pcdHeader.headerLen = (result2 && result2[0].length) + result1;\n  }\n  pcdHeader.str = data.substr(0, pcdHeader.headerLen);\n\n  // remove comments\n\n  pcdHeader.str = pcdHeader.str.replace(/\\#.*/gi, '');\n\n  // parse\n\n  pcdHeader.version = /VERSION (.*)/i.exec(pcdHeader.str);\n  pcdHeader.fields = /FIELDS (.*)/i.exec(pcdHeader.str);\n  pcdHeader.size = /SIZE (.*)/i.exec(pcdHeader.str);\n  pcdHeader.type = /TYPE (.*)/i.exec(pcdHeader.str);\n  pcdHeader.count = /COUNT (.*)/i.exec(pcdHeader.str);\n  pcdHeader.width = /WIDTH (.*)/i.exec(pcdHeader.str);\n  pcdHeader.height = /HEIGHT (.*)/i.exec(pcdHeader.str);\n  pcdHeader.viewpoint = /VIEWPOINT (.*)/i.exec(pcdHeader.str);\n  pcdHeader.points = /POINTS (.*)/i.exec(pcdHeader.str);\n\n  // evaluate\n\n  if (pcdHeader.version !== null) {\n    pcdHeader.version = parseFloat(pcdHeader.version[1]);\n  }\n\n  if (pcdHeader.fields !== null) {\n    pcdHeader.fields = pcdHeader.fields[1].split(' ');\n  }\n\n  if (pcdHeader.type !== null) {\n    pcdHeader.type = pcdHeader.type[1].split(' ');\n  }\n\n  if (pcdHeader.width !== null) {\n    pcdHeader.width = parseInt(pcdHeader.width[1], 10);\n  }\n\n  if (pcdHeader.height !== null) {\n    pcdHeader.height = parseInt(pcdHeader.height[1], 10);\n  }\n\n  if (pcdHeader.viewpoint !== null) {\n    pcdHeader.viewpoint = pcdHeader.viewpoint[1];\n  }\n\n  if (pcdHeader.points !== null) {\n    pcdHeader.points = parseInt(pcdHeader.points[1], 10);\n  }\n\n  if (\n    pcdHeader.points === null &&\n    typeof pcdHeader.width === 'number' &&\n    typeof pcdHeader.height === 'number'\n  ) {\n    pcdHeader.points = pcdHeader.width * pcdHeader.height;\n  }\n\n  if (pcdHeader.size !== null) {\n    pcdHeader.size = pcdHeader.size[1].split(' ').map((x) => parseInt(x, 10));\n  }\n\n  if (pcdHeader.count !== null) {\n    pcdHeader.count = pcdHeader.count[1].split(' ').map((x) => parseInt(x, 10));\n  } else {\n    pcdHeader.count = [];\n    if (pcdHeader.fields !== null) {\n      for (let i = 0; i < pcdHeader.fields.length; i++) {\n        pcdHeader.count.push(1);\n      }\n    }\n  }\n\n  pcdHeader.offset = {};\n\n  let sizeSum = 0;\n  if (pcdHeader.fields !== null && pcdHeader.size !== null) {\n    for (let i = 0; i < pcdHeader.fields.length; i++) {\n      if (pcdHeader.data === 'ascii') {\n        pcdHeader.offset[pcdHeader.fields[i]] = i;\n      } else {\n        pcdHeader.offset[pcdHeader.fields[i]] = sizeSum;\n        sizeSum += pcdHeader.size[i];\n      }\n    }\n  }\n\n  // for binary only\n  pcdHeader.rowSize = sizeSum;\n\n  return pcdHeader;\n}\n\n/**\n * @param pcdHeader\n * @param textData\n * @returns [attributes]\n */\n// eslint-enable-next-line complexity, max-statements\nfunction parsePCDASCII(pcdHeader: PCDHeader, textData: string): HeaderAttributes {\n  const position: number[] = [];\n  const normal: number[] = [];\n  const color: number[] = [];\n  const intensity: number[] = [];\n  const label: number[] = [];\n\n  const offset = pcdHeader.offset;\n  const pcdData = textData.substr(pcdHeader.headerLen);\n  const lines = pcdData.split('\\n');\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i] !== '') {\n      const line = lines[i].split(' ');\n\n      if (offset.x !== undefined) {\n        position.push(parseFloat(line[offset.x]));\n        position.push(parseFloat(line[offset.y]));\n        position.push(parseFloat(line[offset.z]));\n      }\n\n      if (offset.rgb !== undefined) {\n        const floatValue = parseFloat(line[offset.rgb]);\n        const binaryColor = new Float32Array([floatValue]);\n        const dataview = new DataView(binaryColor.buffer, 0);\n        color.push(dataview.getUint8(0));\n        color.push(dataview.getUint8(1));\n        color.push(dataview.getUint8(2));\n        // TODO - handle alpha channel / RGBA?\n      }\n\n      if (offset.normal_x !== undefined) {\n        normal.push(parseFloat(line[offset.normal_x]));\n        normal.push(parseFloat(line[offset.normal_y]));\n        normal.push(parseFloat(line[offset.normal_z]));\n      }\n\n      if (offset.intensity !== undefined) {\n        intensity.push(parseFloat(line[offset.intensity]));\n      }\n\n      if (offset.label !== undefined) {\n        label.push(parseInt(line[offset.label]));\n      }\n    }\n  }\n\n  return {position, normal, color};\n}\n\n/**\n * @param pcdHeader\n * @param data\n * @returns [attributes]\n */\nfunction parsePCDBinary(pcdHeader: PCDHeader, data: ArrayBufferLike): HeaderAttributes {\n  const position: number[] = [];\n  const normal: number[] = [];\n  const color: number[] = [];\n  const intensity: number[] = [];\n  const label: number[] = [];\n\n  const dataview = new DataView(data, pcdHeader.headerLen);\n  const offset = pcdHeader.offset;\n\n  for (let i = 0, row = 0; i < pcdHeader.points; i++, row += pcdHeader.rowSize) {\n    if (offset.x !== undefined) {\n      position.push(dataview.getFloat32(row + offset.x, LITTLE_ENDIAN));\n      position.push(dataview.getFloat32(row + offset.y, LITTLE_ENDIAN));\n      position.push(dataview.getFloat32(row + offset.z, LITTLE_ENDIAN));\n    }\n\n    if (offset.rgb !== undefined) {\n      color.push(dataview.getUint8(row + offset.rgb + 0));\n      color.push(dataview.getUint8(row + offset.rgb + 1));\n      color.push(dataview.getUint8(row + offset.rgb + 2));\n    }\n\n    if (offset.normal_x !== undefined) {\n      normal.push(dataview.getFloat32(row + offset.normal_x, LITTLE_ENDIAN));\n      normal.push(dataview.getFloat32(row + offset.normal_y, LITTLE_ENDIAN));\n      normal.push(dataview.getFloat32(row + offset.normal_z, LITTLE_ENDIAN));\n    }\n\n    if (offset.intensity !== undefined) {\n      intensity.push(dataview.getFloat32(row + offset.intensity, LITTLE_ENDIAN));\n    }\n\n    if (offset.label !== undefined) {\n      label.push(dataview.getInt32(row + offset.label, LITTLE_ENDIAN));\n    }\n  }\n\n  return {position, normal, color, intensity, label};\n}\n\n/** Parse compressed PCD data in in binary_compressed form ( https://pointclouds.org/documentation/tutorials/pcd_file_format.html)\n * from https://github.com/mrdoob/three.js/blob/master/examples/jsm/loaders/PCDLoader.js\n * @license MIT (http://opensource.org/licenses/MIT)\n * @param pcdHeader\n * @param data\n * @returns [attributes]\n */\n// eslint-enable-next-line complexity, max-statements\nfunction parsePCDBinaryCompressed(pcdHeader: PCDHeader, data: ArrayBufferLike): HeaderAttributes {\n  const position: number[] = [];\n  const normal: number[] = [];\n  const color: number[] = [];\n  const intensity: number[] = [];\n  const label: number[] = [];\n\n  const sizes = new Uint32Array(data.slice(pcdHeader.headerLen, pcdHeader.headerLen + 8));\n  const compressedSize = sizes[0];\n  const decompressedSize = sizes[1];\n  const decompressed = decompressLZF(\n    new Uint8Array(data, pcdHeader.headerLen + 8, compressedSize),\n    decompressedSize\n  );\n  const dataview = new DataView(decompressed.buffer);\n\n  const offset = pcdHeader.offset;\n\n  for (let i = 0; i < pcdHeader.points; i++) {\n    if (offset.x !== undefined) {\n      position.push(\n        dataview.getFloat32(pcdHeader.points * offset.x + pcdHeader.size[0] * i, LITTLE_ENDIAN)\n      );\n      position.push(\n        dataview.getFloat32(pcdHeader.points * offset.y + pcdHeader.size[1] * i, LITTLE_ENDIAN)\n      );\n      position.push(\n        dataview.getFloat32(pcdHeader.points * offset.z + pcdHeader.size[2] * i, LITTLE_ENDIAN)\n      );\n    }\n\n    if (offset.rgb !== undefined) {\n      color.push(\n        dataview.getUint8(pcdHeader.points * offset.rgb + pcdHeader.size[3] * i + 0) / 255.0\n      );\n      color.push(\n        dataview.getUint8(pcdHeader.points * offset.rgb + pcdHeader.size[3] * i + 1) / 255.0\n      );\n      color.push(\n        dataview.getUint8(pcdHeader.points * offset.rgb + pcdHeader.size[3] * i + 2) / 255.0\n      );\n    }\n\n    if (offset.normal_x !== undefined) {\n      normal.push(\n        dataview.getFloat32(\n          pcdHeader.points * offset.normal_x + pcdHeader.size[4] * i,\n          LITTLE_ENDIAN\n        )\n      );\n      normal.push(\n        dataview.getFloat32(\n          pcdHeader.points * offset.normal_y + pcdHeader.size[5] * i,\n          LITTLE_ENDIAN\n        )\n      );\n      normal.push(\n        dataview.getFloat32(\n          pcdHeader.points * offset.normal_z + pcdHeader.size[6] * i,\n          LITTLE_ENDIAN\n        )\n      );\n    }\n\n    if (offset.intensity !== undefined) {\n      const intensityIndex = pcdHeader.fields.indexOf('intensity');\n      intensity.push(\n        dataview.getFloat32(\n          pcdHeader.points * offset.intensity + pcdHeader.size[intensityIndex] * i,\n          LITTLE_ENDIAN\n        )\n      );\n    }\n\n    if (offset.label !== undefined) {\n      const labelIndex = pcdHeader.fields.indexOf('label');\n      label.push(\n        dataview.getInt32(\n          pcdHeader.points * offset.label + pcdHeader.size[labelIndex] * i,\n          LITTLE_ENDIAN\n        )\n      );\n    }\n  }\n\n  return {\n    position,\n    normal,\n    color,\n    intensity,\n    label\n  };\n}\n"],"mappings":"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"}