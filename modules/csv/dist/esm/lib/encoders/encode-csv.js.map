{"version":3,"file":"encode-csv.js","names":["makeArrayRowIterator","getTableNumCols","csvFormatRows","encodeTableAsCSV","table","_options$csv","_table$schema","options","arguments","length","undefined","csv","useDisplayNames","fields","schema","columnNames","map","f","_f$metadata","displayName","metadata","name","formattedData","row","formattedRow","columnIndex","value","preformatFieldValue","push","Date","toISOString","JSON","stringify","String"],"sources":["../../../../src/lib/encoders/encode-csv.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Table, makeArrayRowIterator, getTableNumCols} from '@loaders.gl/schema';\nimport {csvFormatRows} from 'd3-dsv';\n\ntype EncodableData = string | null;\n\nexport type CSVWriterOptions = {\n  csv?: {\n    useDisplayNames?: boolean;\n  };\n  /** @deprecated */\n  useDisplayNames?: boolean;\n};\n\n/**\n * Encode a Table object as CSV\n */\nexport function encodeTableAsCSV(\n  table: Table,\n  options: CSVWriterOptions = {csv: {useDisplayNames: true}}\n): string {\n  const useDisplayNames = options.useDisplayNames || options.csv?.useDisplayNames;\n\n  const fields = table.schema?.fields || [];\n\n  const columnNames = fields.map((f) => {\n    // This is a leaky abstraction, assuming Kepler metadata\n    const displayName = f.metadata?.displayName;\n    return useDisplayNames && typeof displayName === 'string' ? displayName : f.name;\n  });\n  const formattedData: EncodableData[][] = [columnNames];\n\n  for (const row of makeArrayRowIterator(table)) {\n    const formattedRow: EncodableData[] = [];\n    for (let columnIndex = 0; columnIndex < getTableNumCols(table); ++columnIndex) {\n      const value = row[columnIndex];\n      formattedRow[columnIndex] = preformatFieldValue(value);\n    }\n    formattedData.push(formattedRow);\n  }\n\n  return csvFormatRows(formattedData);\n}\n\n/**\n * Stringifies a value\n * @todo Why is it called parse?\n */\nconst preformatFieldValue = (value: unknown): EncodableData => {\n  if (value === null || value === undefined) {\n    // TODO: It would be nice to distinguish between missing values and the empty string\n    // https://github.com/d3/d3-dsv/issues/84\n    return null;\n  }\n  if (value instanceof Date) {\n    // d3-dsv formats dates without timezones if they don't have time info;\n    // this forces them to always use fully-qualified ISO time strings\n    return value.toISOString();\n  }\n  if (typeof value === 'object') {\n    return JSON.stringify(value);\n  }\n  return String(value);\n};\n"],"mappings":"AAGA,SAAeA,oBAAoB,EAAEC,eAAe,QAAO,oBAAoB;AAC/E,SAAQC,aAAa,QAAO,QAAQ;AAepC,OAAO,SAASC,gBAAgBA,CAC9BC,KAAY,EAEJ;EAAA,IAAAC,YAAA,EAAAC,aAAA;EAAA,IADRC,OAAyB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG;IAACG,GAAG,EAAE;MAACC,eAAe,EAAE;IAAI;EAAC,CAAC;EAE1D,MAAMA,eAAe,GAAGL,OAAO,CAACK,eAAe,MAAAP,YAAA,GAAIE,OAAO,CAACI,GAAG,cAAAN,YAAA,uBAAXA,YAAA,CAAaO,eAAe;EAE/E,MAAMC,MAAM,GAAG,EAAAP,aAAA,GAAAF,KAAK,CAACU,MAAM,cAAAR,aAAA,uBAAZA,aAAA,CAAcO,MAAM,KAAI,EAAE;EAEzC,MAAME,WAAW,GAAGF,MAAM,CAACG,GAAG,CAAEC,CAAC,IAAK;IAAA,IAAAC,WAAA;IAEpC,MAAMC,WAAW,IAAAD,WAAA,GAAGD,CAAC,CAACG,QAAQ,cAAAF,WAAA,uBAAVA,WAAA,CAAYC,WAAW;IAC3C,OAAOP,eAAe,IAAI,OAAOO,WAAW,KAAK,QAAQ,GAAGA,WAAW,GAAGF,CAAC,CAACI,IAAI;EAClF,CAAC,CAAC;EACF,MAAMC,aAAgC,GAAG,CAACP,WAAW,CAAC;EAEtD,KAAK,MAAMQ,GAAG,IAAIvB,oBAAoB,CAACI,KAAK,CAAC,EAAE;IAC7C,MAAMoB,YAA6B,GAAG,EAAE;IACxC,KAAK,IAAIC,WAAW,GAAG,CAAC,EAAEA,WAAW,GAAGxB,eAAe,CAACG,KAAK,CAAC,EAAE,EAAEqB,WAAW,EAAE;MAC7E,MAAMC,KAAK,GAAGH,GAAG,CAACE,WAAW,CAAC;MAC9BD,YAAY,CAACC,WAAW,CAAC,GAAGE,mBAAmB,CAACD,KAAK,CAAC;IACxD;IACAJ,aAAa,CAACM,IAAI,CAACJ,YAAY,CAAC;EAClC;EAEA,OAAOtB,aAAa,CAACoB,aAAa,CAAC;AACrC;AAMA,MAAMK,mBAAmB,GAAID,KAAc,IAAoB;EAC7D,IAAIA,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKhB,SAAS,EAAE;IAGzC,OAAO,IAAI;EACb;EACA,IAAIgB,KAAK,YAAYG,IAAI,EAAE;IAGzB,OAAOH,KAAK,CAACI,WAAW,CAAC,CAAC;EAC5B;EACA,IAAI,OAAOJ,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOK,IAAI,CAACC,SAAS,CAACN,KAAK,CAAC;EAC9B;EACA,OAAOO,MAAM,CAACP,KAAK,CAAC;AACtB,CAAC"}