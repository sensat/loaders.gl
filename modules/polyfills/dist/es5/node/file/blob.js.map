{"version":3,"file":"blob.js","names":["_blobStream","require","_Symbol$toStringTag","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","toStringTag","BlobPolyfill","init","arguments","undefined","options","_classCallCheck2","default","_defineProperty2","parts","size","_iterator","_step","part","bytes","TextEncoder","encode","push","byteLength","_this$parts","apply","_toConsumableArray2","ArrayBuffer","Uint8Array","isView","buffer","byteOffset","String","type","readType","_createClass2","key","start","end","offset","Math","max","min","limit","span","blob","blobSize","blobParts","_iterator2","_step2","chunk","subarray","_arrayBuffer","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","abrupt","_toArrayBuffer","stop","arrayBuffer","_text","_callee2","decoder","text","_iterator3","_step3","_callee2$","_context2","TextDecoder","decode","stream","BlobStream","get","_iterator4","_step4","set","exports","input","toLowerCase"],"sources":["../../../../src/node/file/blob.ts"],"sourcesContent":["// Forked from @gozala's web-blob under MIT license https://github.com/Gozala/web-blob\nimport {BlobStream} from './blob-stream';\n\n/**\n * Forked from @gozala's web-blob under MIT license\n * @see https://github.com/Gozala/web-blob\n */\nexport class BlobPolyfill {\n  // implements Blob {\n  /** The MIME type of the data contained in the Blob. If type is unknown, string is empty. */\n  readonly type: string;\n  /** The size, in bytes, of the data contained in the Blob object. */\n  size: number;\n  private parts: Uint8Array[];\n  /**\n   * @param [init]\n   * @param [options]\n   */\n  constructor(init: BlobPart[] = [], options: BlobPropertyBag = {}) {\n    this.parts = [];\n\n    this.size = 0;\n    for (const part of init) {\n      if (typeof part === 'string') {\n        const bytes = new TextEncoder().encode(part);\n        this.parts.push(bytes);\n        this.size += bytes.byteLength;\n      } else if (part instanceof BlobPolyfill) {\n        this.size += part.size;\n        // @ts-ignore - `parts` is marked private so TS will complain about\n        // accessing it.\n        this.parts.push(...part.parts);\n      } else if (part instanceof ArrayBuffer) {\n        this.parts.push(new Uint8Array(part));\n        this.size += part.byteLength;\n      } else if (part instanceof Uint8Array) {\n        this.parts.push(part);\n        this.size += part.byteLength;\n      } else if (ArrayBuffer.isView(part)) {\n        const {buffer, byteOffset, byteLength} = part;\n        this.parts.push(new Uint8Array(buffer, byteOffset, byteLength));\n        this.size += byteLength;\n      } else {\n        const bytes = new TextEncoder().encode(String(part));\n        this.parts.push(bytes);\n        this.size += bytes.byteLength;\n      }\n    }\n\n    /** @private */\n    this.type = readType(options.type);\n  }\n\n  /**\n   * Returns a new Blob object containing the data in the specified range of\n   * bytes of the blob on which it's called.\n   * @param start=0 - An index into the Blob indicating the first\n   * byte to include in the new Blob. If you specify a negative value, it's\n   * treated as an offset from the end of the Blob toward the beginning. For\n   * example, `-10` would be the 10th from last byte in the Blob. The default\n   * value is `0`. If you specify a value for start that is larger than the\n   * size of the source Blob, the returned Blob has size 0 and contains no\n   * data.\n   * @param end - An index into the `Blob` indicating the first byte\n   *  that will *not* be included in the new `Blob` (i.e. the byte exactly at\n   * this index is not included). If you specify a negative value, it's treated\n   * as an offset from the end of the Blob toward the beginning. For example,\n   * `-10` would be the 10th from last byte in the `Blob`. The default value is\n   * size.\n   * @param type - The content type to assign to the new Blob;\n   * this will be the value of its type property. The default value is an empty\n   * string.\n   */\n  slice(start: number = 0, end: number = this.size, type: string = ''): Blob {\n    const {size, parts: parts} = this;\n    let offset = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n\n    let limit = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n    const span = Math.max(limit - offset, 0);\n    const blob = new BlobPolyfill([], {type});\n\n    if (span === 0) {\n      // @ts-ignore\n      return blob;\n    }\n\n    let blobSize = 0;\n    const blobParts: Uint8Array[] = [];\n    for (const part of parts) {\n      const {byteLength} = part;\n      if (offset > 0 && byteLength <= offset) {\n        offset -= byteLength;\n        limit -= byteLength;\n      } else {\n        const chunk = part.subarray(offset, Math.min(byteLength, limit));\n        blobParts.push(chunk);\n        blobSize += chunk.byteLength;\n        // no longer need to take that into account\n        offset = 0;\n\n        // don't add the overflow to new blobParts\n        if (blobSize >= span) {\n          break;\n        }\n      }\n    }\n\n    blob.parts = blobParts;\n    blob.size = blobSize;\n\n    // @ts-ignore\n    return blob;\n  }\n\n  /**\n   * Returns a promise that resolves with an ArrayBuffer containing the entire\n   * contents of the Blob as binary data.\n   */\n  // eslint-disable-next-line require-await\n  async arrayBuffer(): Promise<ArrayBuffer> {\n    return this._toArrayBuffer();\n  }\n\n  /**\n   * Returns a promise that resolves with a USVString containing the entire\n   * contents of the Blob interpreted as UTF-8 text.\n   */\n  // eslint-disable-next-line require-await\n  async text(): Promise<string> {\n    const decoder = new TextDecoder();\n    let text = '';\n    for (const part of this.parts) {\n      text += decoder.decode(part);\n    }\n    return text;\n  }\n\n  /**\n   */\n  // @ts-ignore\n  stream(): BlobStream<any> {\n    return new BlobStream<any>(this.parts);\n  }\n\n  /**\n   * @returns {string}\n   */\n  toString() {\n    return '[object Blob]';\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Blob';\n  }\n\n  _toArrayBuffer(): ArrayBuffer {\n    const buffer = new ArrayBuffer(this.size);\n    const bytes = new Uint8Array(buffer);\n    let offset = 0;\n    for (const part of this.parts) {\n      bytes.set(part, offset);\n      offset += part.byteLength;\n    }\n    return buffer;\n  }\n}\n\n/**\n */\nfunction readType(input: string = ''): string {\n  const type = String(input).toLowerCase();\n  return /[^\\u0020-\\u007E]/.test(type) ? '' : type;\n}\n"],"mappings":"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"}