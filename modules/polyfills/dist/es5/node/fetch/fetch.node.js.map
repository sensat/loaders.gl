{"version":3,"file":"fetch.node.js","names":["_http","_interopRequireDefault","require","_https","_response","_headers","_decodeDataUri2","_fetchFile","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","isDataURL","url","startsWith","isRequestURL","fetchNode","_x","_x2","_fetchNode","_asyncToGenerator2","_regenerator","mark","_callee","options","_decodeDataUri","arrayBuffer","mimeType","response","syntheticResponseHeaders","originalUrl","body","headers","_getStatus","status","statusText","followRedirect","redirectUrl","wrap","_callee$","_context","prev","next","fetchFileNode","abrupt","sent","decodeDataUri","Response","endsWith","slice","createHTTPRequestReadStream","getHeaders","getStatus","undefined","has","generateRedirectUrl","get","t0","String","stop","_x3","_x4","_createHTTPRequestReadStream","_callee2","_callee2$","_context2","Promise","resolve","reject","requestOptions","getRequestOptions","req","https","request","res","http","on","error","end","location","URL","pathname","href","originalHeaders","_i","_Object$keys","toLowerCase","urlObject","hostname","path","method","fetch","port","httpResponse","statusCode","statusMessage","additionalHeaders","httpHeaders","header","contentLength","getContentLength","Number","isFinite","assign","Headers"],"sources":["../../../../src/node/fetch/fetch.node.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport http from 'http';\nimport https from 'https';\nimport {Response} from './response.node';\nimport {Headers} from './headers.node';\nimport {decodeDataUri} from './utils/decode-data-uri.node';\n\nimport {fetchFileNode} from './fetch-file.node';\n\nconst isDataURL = (url: string): boolean => url.startsWith('data:');\nconst isRequestURL = (url: string): boolean => url.startsWith('http:') || url.startsWith('https:');\n\n/**\n * Emulation of Browser fetch for Node.js\n * @param url\n * @param options\n */\n// eslint-disable-next-line complexity\nexport async function fetchNode(url: string, options): Promise<Response> {\n  try {\n    // Handle file streams in node\n    if (!isRequestURL(url) && !isDataURL(url)) {\n      return await fetchFileNode(url, options);\n    }\n\n    // Handle data urls in node, to match `fetch``\n    // Note - this loses the MIME type, data URIs are handled directly in fetch\n    if (isDataURL(url)) {\n      const {arrayBuffer, mimeType} = decodeDataUri(url);\n      const response = new Response(arrayBuffer, {\n        headers: {'content-type': mimeType},\n        url\n      });\n      return response;\n    }\n\n    // Automatically decompress gzipped files with .gz extension\n    const syntheticResponseHeaders = {};\n    const originalUrl = url;\n    if (url.endsWith('.gz')) {\n      url = url.slice(0, -3);\n      syntheticResponseHeaders['content-encoding'] = 'gzip';\n    }\n\n    // Need to create the stream in advance since Response constructor needs to be sync\n    const body = await createHTTPRequestReadStream(originalUrl, options);\n    const headers = getHeaders(url, body, syntheticResponseHeaders);\n    const {status, statusText} = getStatus(body);\n\n    const followRedirect =\n      !options || options.followRedirect || options.followRedirect === undefined;\n\n    if (status >= 300 && status < 400 && headers.has('location') && followRedirect) {\n      const redirectUrl = generateRedirectUrl(url, headers.get('location'));\n\n      // Redirect\n      return await fetchNode(redirectUrl, options);\n    }\n    return new Response(body, {headers, status, statusText, url});\n  } catch (error) {\n    // TODO - what error code to use here?\n    return new Response(null, {status: 400, statusText: String(error), url});\n  }\n}\n\n/** Returns a promise that resolves to a readable stream */\nexport async function createHTTPRequestReadStream(\n  url: string,\n  options\n): Promise<http.IncomingMessage> {\n  // HANDLE HTTP/HTTPS REQUESTS IN NODE\n  // TODO: THIS IS BAD SINCE WE RETURN A PROMISE INSTEAD OF A STREAM\n  return await new Promise((resolve, reject) => {\n    const requestOptions = getRequestOptions(url, options);\n    const req = url.startsWith('https:')\n      ? https.request(requestOptions, (res) => resolve(res))\n      : http.request(requestOptions, (res) => resolve(res));\n    req.on('error', (error) => reject(error));\n    req.end();\n  });\n}\n\n/**\n * Generate redirect url from location without origin and protocol.\n * @param originalUrl\n * @param redirectUrl\n */\nfunction generateRedirectUrl(originalUrl: string, location: string): string {\n  if (location.startsWith('http')) {\n    return location;\n  }\n  // If url doesn't have origin and protocol just extend current url origin with location.\n  const url = new URL(originalUrl);\n  url.pathname = location;\n\n  return url.href;\n}\n\n// HELPER FUNCTIONS\n\nfunction getRequestOptions(url: string, options?: {fetch?: typeof fetch; headers?}) {\n  // Ensure header keys are lower case so that we can merge without duplicates\n  const originalHeaders = options?.headers || {};\n  const headers = {};\n  for (const key of Object.keys(originalHeaders)) {\n    headers[key.toLowerCase()] = originalHeaders[key];\n  }\n\n  // Add default accept-encoding to headers\n  headers['accept-encoding'] = headers['accept-encoding'] || 'gzip,br,deflate';\n\n  const urlObject = new URL(url);\n  return {\n    hostname: urlObject.hostname,\n    path: urlObject.pathname,\n    method: 'GET',\n    // Add options and user provided 'options.fetch' overrides if available\n    ...options,\n    ...options?.fetch,\n    // Override with updated headers with accepted encodings:\n    headers,\n    port: urlObject.port\n  };\n}\n\nfunction getStatus(httpResponse: http.IncomingMessage): {status: number; statusText: string} {\n  if (httpResponse.statusCode) {\n    return {status: httpResponse.statusCode, statusText: httpResponse.statusMessage || 'NA'};\n  }\n  return {status: 200, statusText: 'OK'};\n}\n\nfunction getHeaders(url, httpResponse, additionalHeaders = {}) {\n  const headers = {};\n\n  if (httpResponse && httpResponse.headers) {\n    const httpHeaders = httpResponse.headers;\n    for (const key in httpHeaders) {\n      const header = httpHeaders[key];\n      headers[key.toLowerCase()] = String(header);\n    }\n  }\n\n  // Fix up content length if we can for best progress experience\n  if (!headers['content-length']) {\n    const contentLength = getContentLength(url);\n    if (Number.isFinite(contentLength)) {\n      headers['content-length'] = contentLength;\n    }\n  }\n\n  Object.assign(headers, additionalHeaders);\n\n  return new Headers(headers);\n}\n\n/** Needs to be read from actual headers */\nfunction getContentLength(url: string): number | null {\n  // TODO - remove media type etc\n  return isDataURL(url) ? url.length - 'data:'.length : null;\n}\n"],"mappings":";;;;;;;;;;;AAEA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,MAAA,GAAAF,sBAAA,CAAAC,OAAA;AACA,IAAAE,SAAA,GAAAF,OAAA;AACA,IAAAG,QAAA,GAAAH,OAAA;AACA,IAAAI,eAAA,GAAAJ,OAAA;AAEA,IAAAK,UAAA,GAAAL,OAAA;AAAgD,SAAAM,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAC,MAAA,CAAAD,IAAA,CAAAF,MAAA,OAAAG,MAAA,CAAAC,qBAAA,QAAAC,OAAA,GAAAF,MAAA,CAAAC,qBAAA,CAAAJ,MAAA,GAAAC,cAAA,KAAAI,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAJ,MAAA,CAAAK,wBAAA,CAAAR,MAAA,EAAAO,GAAA,EAAAE,UAAA,OAAAP,IAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,IAAA,EAAAG,OAAA,YAAAH,IAAA;AAAA,SAAAU,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,UAAAG,MAAA,WAAAF,SAAA,CAAAD,CAAA,IAAAC,SAAA,CAAAD,CAAA,QAAAA,CAAA,OAAAf,OAAA,CAAAI,MAAA,CAAAc,MAAA,OAAAC,OAAA,WAAAC,GAAA,QAAAC,gBAAA,CAAAC,OAAA,EAAAR,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA,SAAAhB,MAAA,CAAAmB,yBAAA,GAAAnB,MAAA,CAAAoB,gBAAA,CAAAV,MAAA,EAAAV,MAAA,CAAAmB,yBAAA,CAAAL,MAAA,KAAAlB,OAAA,CAAAI,MAAA,CAAAc,MAAA,GAAAC,OAAA,WAAAC,GAAA,IAAAhB,MAAA,CAAAqB,cAAA,CAAAX,MAAA,EAAAM,GAAA,EAAAhB,MAAA,CAAAK,wBAAA,CAAAS,MAAA,EAAAE,GAAA,iBAAAN,MAAA;AAEhD,IAAMY,SAAS,GAAG,SAAZA,SAASA,CAAIC,GAAW;EAAA,OAAcA,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC;AAAA;AACnE,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAIF,GAAW;EAAA,OAAcA,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC,IAAID,GAAG,CAACC,UAAU,CAAC,QAAQ,CAAC;AAAA;AAAC,SAQ7EE,SAASA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,UAAA,CAAArB,KAAA,OAAAI,SAAA;AAAA;AAAA,SAAAiB,WAAA;EAAAA,UAAA,OAAAC,kBAAA,CAAAZ,OAAA,EAAAa,YAAA,CAAAb,OAAA,CAAAc,IAAA,CAAxB,SAAAC,QAAyBV,GAAW,EAAEW,OAAO;IAAA,IAAAC,cAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAC,QAAA,EAAAC,wBAAA,EAAAC,WAAA,EAAAC,IAAA,EAAAC,OAAA,EAAAC,UAAA,EAAAC,MAAA,EAAAC,UAAA,EAAAC,cAAA,EAAAC,WAAA;IAAA,OAAAhB,YAAA,CAAAb,OAAA,CAAA8B,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAA,MAG5C,CAAC1B,YAAY,CAACF,GAAG,CAAC,IAAI,CAACD,SAAS,CAACC,GAAG,CAAC;YAAA2B,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAC1B,IAAAC,wBAAa,EAAC9B,GAAG,EAAEW,OAAO,CAAC;QAAA;UAAA,OAAAgB,QAAA,CAAAI,MAAA,WAAAJ,QAAA,CAAAK,IAAA;QAAA;UAAA,KAKtCjC,SAAS,CAACC,GAAG,CAAC;YAAA2B,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAjB,cAAA,GACgB,IAAAqB,6BAAa,EAACjC,GAAG,CAAC,EAA3Ca,WAAW,GAAAD,cAAA,CAAXC,WAAW,EAAEC,QAAQ,GAAAF,cAAA,CAARE,QAAQ;UACtBC,QAAQ,GAAG,IAAImB,kBAAQ,CAACrB,WAAW,EAAE;YACzCM,OAAO,EAAE;cAAC,cAAc,EAAEL;YAAQ,CAAC;YACnCd,GAAG,EAAHA;UACF,CAAC,CAAC;UAAA,OAAA2B,QAAA,CAAAI,MAAA,WACKhB,QAAQ;QAAA;UAIXC,wBAAwB,GAAG,CAAC,CAAC;UAC7BC,WAAW,GAAGjB,GAAG;UACvB,IAAIA,GAAG,CAACmC,QAAQ,CAAC,KAAK,CAAC,EAAE;YACvBnC,GAAG,GAAGA,GAAG,CAACoC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACtBpB,wBAAwB,CAAC,kBAAkB,CAAC,GAAG,MAAM;UACvD;UAACW,QAAA,CAAAE,IAAA;UAAA,OAGkBQ,2BAA2B,CAACpB,WAAW,EAAEN,OAAO,CAAC;QAAA;UAA9DO,IAAI,GAAAS,QAAA,CAAAK,IAAA;UACJb,OAAO,GAAGmB,UAAU,CAACtC,GAAG,EAAEkB,IAAI,EAAEF,wBAAwB,CAAC;UAAAI,UAAA,GAClCmB,SAAS,CAACrB,IAAI,CAAC,EAArCG,MAAM,GAAAD,UAAA,CAANC,MAAM,EAAEC,UAAU,GAAAF,UAAA,CAAVE,UAAU;UAEnBC,cAAc,GAClB,CAACZ,OAAO,IAAIA,OAAO,CAACY,cAAc,IAAIZ,OAAO,CAACY,cAAc,KAAKiB,SAAS;UAAA,MAExEnB,MAAM,IAAI,GAAG,IAAIA,MAAM,GAAG,GAAG,IAAIF,OAAO,CAACsB,GAAG,CAAC,UAAU,CAAC,IAAIlB,cAAc;YAAAI,QAAA,CAAAE,IAAA;YAAA;UAAA;UACtEL,WAAW,GAAGkB,mBAAmB,CAAC1C,GAAG,EAAEmB,OAAO,CAACwB,GAAG,CAAC,UAAU,CAAC,CAAC;UAAAhB,QAAA,CAAAE,IAAA;UAAA,OAGxD1B,SAAS,CAACqB,WAAW,EAAEb,OAAO,CAAC;QAAA;UAAA,OAAAgB,QAAA,CAAAI,MAAA,WAAAJ,QAAA,CAAAK,IAAA;QAAA;UAAA,OAAAL,QAAA,CAAAI,MAAA,WAEvC,IAAIG,kBAAQ,CAAChB,IAAI,EAAE;YAACC,OAAO,EAAPA,OAAO;YAAEE,MAAM,EAANA,MAAM;YAAEC,UAAU,EAAVA,UAAU;YAAEtB,GAAG,EAAHA;UAAG,CAAC,CAAC;QAAA;UAAA2B,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAiB,EAAA,GAAAjB,QAAA;UAAA,OAAAA,QAAA,CAAAI,MAAA,WAGtD,IAAIG,kBAAQ,CAAC,IAAI,EAAE;YAACb,MAAM,EAAE,GAAG;YAAEC,UAAU,EAAEuB,MAAM,CAAAlB,QAAA,CAAAiB,EAAM,CAAC;YAAE5C,GAAG,EAAHA;UAAG,CAAC,CAAC;QAAA;QAAA;UAAA,OAAA2B,QAAA,CAAAmB,IAAA;MAAA;IAAA,GAAApC,OAAA;EAAA,CAE3E;EAAA,OAAAJ,UAAA,CAAArB,KAAA,OAAAI,SAAA;AAAA;AAAA,SAGqBgD,2BAA2BA,CAAAU,GAAA,EAAAC,GAAA;EAAA,OAAAC,4BAAA,CAAAhE,KAAA,OAAAI,SAAA;AAAA;AAAA,SAAA4D,6BAAA;EAAAA,4BAAA,OAAA1C,kBAAA,CAAAZ,OAAA,EAAAa,YAAA,CAAAb,OAAA,CAAAc,IAAA,CAA1C,SAAAyC,SACLlD,GAAW,EACXW,OAAO;IAAA,OAAAH,YAAA,CAAAb,OAAA,CAAA8B,IAAA,UAAA0B,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAxB,IAAA,GAAAwB,SAAA,CAAAvB,IAAA;QAAA;UAAAuB,SAAA,CAAAvB,IAAA;UAAA,OAIM,IAAIwB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;YAC5C,IAAMC,cAAc,GAAGC,iBAAiB,CAACzD,GAAG,EAAEW,OAAO,CAAC;YACtD,IAAM+C,GAAG,GAAG1D,GAAG,CAACC,UAAU,CAAC,QAAQ,CAAC,GAChC0D,cAAK,CAACC,OAAO,CAACJ,cAAc,EAAE,UAACK,GAAG;cAAA,OAAKP,OAAO,CAACO,GAAG,CAAC;YAAA,EAAC,GACpDC,aAAI,CAACF,OAAO,CAACJ,cAAc,EAAE,UAACK,GAAG;cAAA,OAAKP,OAAO,CAACO,GAAG,CAAC;YAAA,EAAC;YACvDH,GAAG,CAACK,EAAE,CAAC,OAAO,EAAE,UAACC,KAAK;cAAA,OAAKT,MAAM,CAACS,KAAK,CAAC;YAAA,EAAC;YACzCN,GAAG,CAACO,GAAG,CAAC,CAAC;UACX,CAAC,CAAC;QAAA;UAAA,OAAAb,SAAA,CAAArB,MAAA,WAAAqB,SAAA,CAAApB,IAAA;QAAA;QAAA;UAAA,OAAAoB,SAAA,CAAAN,IAAA;MAAA;IAAA,GAAAI,QAAA;EAAA,CACH;EAAA,OAAAD,4BAAA,CAAAhE,KAAA,OAAAI,SAAA;AAAA;AAOD,SAASqD,mBAAmBA,CAACzB,WAAmB,EAAEiD,QAAgB,EAAU;EAC1E,IAAIA,QAAQ,CAACjE,UAAU,CAAC,MAAM,CAAC,EAAE;IAC/B,OAAOiE,QAAQ;EACjB;EAEA,IAAMlE,GAAG,GAAG,IAAImE,GAAG,CAAClD,WAAW,CAAC;EAChCjB,GAAG,CAACoE,QAAQ,GAAGF,QAAQ;EAEvB,OAAOlE,GAAG,CAACqE,IAAI;AACjB;AAIA,SAASZ,iBAAiBA,CAACzD,GAAW,EAAEW,OAA0C,EAAE;EAElF,IAAM2D,eAAe,GAAG,CAAA3D,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,OAAO,KAAI,CAAC,CAAC;EAC9C,IAAMA,OAAO,GAAG,CAAC,CAAC;EAClB,SAAAoD,EAAA,MAAAC,YAAA,GAAkB/F,MAAM,CAACD,IAAI,CAAC8F,eAAe,CAAC,EAAAC,EAAA,GAAAC,YAAA,CAAAlF,MAAA,EAAAiF,EAAA,IAAE;IAA3C,IAAM9E,GAAG,GAAA+E,YAAA,CAAAD,EAAA;IACZpD,OAAO,CAAC1B,GAAG,CAACgF,WAAW,CAAC,CAAC,CAAC,GAAGH,eAAe,CAAC7E,GAAG,CAAC;EACnD;EAGA0B,OAAO,CAAC,iBAAiB,CAAC,GAAGA,OAAO,CAAC,iBAAiB,CAAC,IAAI,iBAAiB;EAE5E,IAAMuD,SAAS,GAAG,IAAIP,GAAG,CAACnE,GAAG,CAAC;EAC9B,OAAAd,aAAA,CAAAA,aAAA,CAAAA,aAAA;IACEyF,QAAQ,EAAED,SAAS,CAACC,QAAQ;IAC5BC,IAAI,EAAEF,SAAS,CAACN,QAAQ;IACxBS,MAAM,EAAE;EAAK,GAEVlE,OAAO,GACPA,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmE,KAAK;IAEjB3D,OAAO,EAAPA,OAAO;IACP4D,IAAI,EAAEL,SAAS,CAACK;EAAI;AAExB;AAEA,SAASxC,SAASA,CAACyC,YAAkC,EAAwC;EAC3F,IAAIA,YAAY,CAACC,UAAU,EAAE;IAC3B,OAAO;MAAC5D,MAAM,EAAE2D,YAAY,CAACC,UAAU;MAAE3D,UAAU,EAAE0D,YAAY,CAACE,aAAa,IAAI;IAAI,CAAC;EAC1F;EACA,OAAO;IAAC7D,MAAM,EAAE,GAAG;IAAEC,UAAU,EAAE;EAAI,CAAC;AACxC;AAEA,SAASgB,UAAUA,CAACtC,GAAG,EAAEgF,YAAY,EAA0B;EAAA,IAAxBG,iBAAiB,GAAA9F,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAmD,SAAA,GAAAnD,SAAA,MAAG,CAAC,CAAC;EAC3D,IAAM8B,OAAO,GAAG,CAAC,CAAC;EAElB,IAAI6D,YAAY,IAAIA,YAAY,CAAC7D,OAAO,EAAE;IACxC,IAAMiE,WAAW,GAAGJ,YAAY,CAAC7D,OAAO;IACxC,KAAK,IAAM1B,GAAG,IAAI2F,WAAW,EAAE;MAC7B,IAAMC,MAAM,GAAGD,WAAW,CAAC3F,GAAG,CAAC;MAC/B0B,OAAO,CAAC1B,GAAG,CAACgF,WAAW,CAAC,CAAC,CAAC,GAAG5B,MAAM,CAACwC,MAAM,CAAC;IAC7C;EACF;EAGA,IAAI,CAAClE,OAAO,CAAC,gBAAgB,CAAC,EAAE;IAC9B,IAAMmE,aAAa,GAAGC,gBAAgB,CAACvF,GAAG,CAAC;IAC3C,IAAIwF,MAAM,CAACC,QAAQ,CAACH,aAAa,CAAC,EAAE;MAClCnE,OAAO,CAAC,gBAAgB,CAAC,GAAGmE,aAAa;IAC3C;EACF;EAEA7G,MAAM,CAACiH,MAAM,CAACvE,OAAO,EAAEgE,iBAAiB,CAAC;EAEzC,OAAO,IAAIQ,gBAAO,CAACxE,OAAO,CAAC;AAC7B;AAGA,SAASoE,gBAAgBA,CAACvF,GAAW,EAAiB;EAEpD,OAAOD,SAAS,CAACC,GAAG,CAAC,GAAGA,GAAG,CAACV,MAAM,GAAG,OAAO,CAACA,MAAM,GAAG,IAAI;AAC5D"}