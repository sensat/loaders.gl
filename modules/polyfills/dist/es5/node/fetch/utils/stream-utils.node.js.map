{"version":3,"file":"stream-utils.node.js","names":["_zlib","_interopRequireDefault","require","_decodeDataUri","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","decompressReadStream","readStream","headers","get","pipe","zlib","createBrotliDecompress","createGunzip","createDeflate","concatenateReadStream","_x","_concatenateReadStream","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","arrayBufferChunks","wrap","_callee$","_context","prev","Promise","resolve","reject","on","error","read","chunk","Error","push","toArrayBuffer","arrayBuffer","concatenateArrayBuffers","abrupt","sent","stop","sources","sourceArrays","map","source2","ArrayBuffer","Uint8Array","byteLength","reduce","typedArray","result","offset","_iterator","_step","sourceArray","set","buffer"],"sources":["../../../../../src/node/fetch/utils/stream-utils.node.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport zlib from 'zlib';\n\nimport {toArrayBuffer} from './decode-data-uri.node';\n\n/**\n *\n */\nexport function decompressReadStream(readStream, headers) {\n  switch (headers.get('content-encoding')) {\n    case 'br':\n      return readStream.pipe(zlib.createBrotliDecompress());\n    case 'gzip':\n      return readStream.pipe(zlib.createGunzip());\n    case 'deflate':\n      return readStream.pipe(zlib.createDeflate());\n    default:\n      // No compression or an unknown one, just return it as is\n      return readStream;\n  }\n}\n\n/**\n *\n * @param readStream\n * @returns\n */\nexport async function concatenateReadStream(readStream): Promise<ArrayBuffer> {\n  const arrayBufferChunks: ArrayBuffer[] = [];\n\n  return await new Promise((resolve, reject) => {\n    readStream.on('error', (error) => reject(error));\n\n    // Once the readable callback has been added, stream switches to \"flowing mode\"\n    // In Node 10 (but not 12 and 14) this causes `data` and `end` to never be called unless we read data here\n    readStream.on('readable', () => readStream.read());\n\n    readStream.on('data', (chunk) => {\n      if (typeof chunk === 'string') {\n        reject(new Error('Read stream not binary'));\n      }\n      arrayBufferChunks.push(toArrayBuffer(chunk));\n    });\n\n    readStream.on('end', () => {\n      const arrayBuffer = concatenateArrayBuffers(arrayBufferChunks);\n      resolve(arrayBuffer);\n    });\n  });\n}\n\n/**\n * Concatenate a sequence of ArrayBuffers\n * @return A concatenated ArrayBuffer\n * @note duplicates loader-utils since polyfills should be independent\n */\nexport function concatenateArrayBuffers(sources: (ArrayBuffer | Uint8Array)[]): ArrayBuffer {\n  // Make sure all inputs are wrapped in typed arrays\n  const sourceArrays = sources.map((source2) =>\n    source2 instanceof ArrayBuffer ? new Uint8Array(source2) : source2\n  );\n\n  // Get length of all inputs\n  const byteLength = sourceArrays.reduce((length, typedArray) => length + typedArray.byteLength, 0);\n\n  // Allocate array with space for all inputs\n  const result = new Uint8Array(byteLength);\n\n  // Copy the subarrays\n  let offset = 0;\n  for (const sourceArray of sourceArrays) {\n    result.set(sourceArray, offset);\n    offset += sourceArray.byteLength;\n  }\n\n  // We work with ArrayBuffers, discard the typed array wrapper\n  return result.buffer;\n}\n"],"mappings":"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"}