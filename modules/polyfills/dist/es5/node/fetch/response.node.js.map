{"version":3,"file":"response.node.js","names":["_assert","require","_streamUtils","_headers","_stream","isBoolean","x","isFunction","isObject","_typeof2","default","isReadableNodeStream","read","pipe","readable","Response","body","options","_classCallCheck2","_defineProperty2","_ref","headers","_ref$status","status","_ref$statusText","statusText","url","ok","Headers","_body","decompressReadStream","Readable","from","TextEncoder","encode","ArrayBuffer","_createClass2","key","get","assert","bodyUsed","value","_arrayBuffer","_asyncToGenerator2","_regenerator","mark","_callee","data","wrap","_callee$","_context","prev","next","abrupt","concatenateReadStream","sent","stop","arrayBuffer","apply","arguments","_text","_callee2","textDecoder","_callee2$","_context2","TextDecoder","decode","text","_json","_callee3","_callee3$","_context3","JSON","parse","json","_blob","_callee4","_callee4$","_context4","Blob","Error","t0","t1","t2","blob","exports"],"sources":["../../../../src/node/fetch/response.node.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {assert} from '../../utils/assert';\nimport {decompressReadStream, concatenateReadStream} from './utils/stream-utils.node';\nimport {Headers} from './headers.node';\n\nconst isBoolean = (x) => typeof x === 'boolean';\nconst isFunction = (x) => typeof x === 'function';\nconst isObject = (x) => x !== null && typeof x === 'object';\nconst isReadableNodeStream = (x) =>\n  isObject(x) && isFunction(x.read) && isFunction(x.pipe) && isBoolean(x.readable);\n\n/**\n * Polyfill for Browser Response\n *\n * Under Node.js we return a mock \"fetch response object\"\n * so that apps can use the same API as in the browser.\n *\n * Note: This is intended to be a \"lightweight\" implementation and will have limitations.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/Response\n */\nimport {Readable} from 'stream';\n\nexport class Response {\n  readonly ok: boolean;\n  readonly status: number;\n  readonly statusText: string;\n  readonly headers: Headers;\n  readonly url: string;\n  bodyUsed: boolean = false;\n  private readonly _body;\n\n  // TODO - handle ArrayBuffer, ArrayBufferView, Buffer\n  constructor(\n    body,\n    options: {\n      headers?;\n      status?: number;\n      statusText?: string;\n      url: string;\n    }\n  ) {\n    const {headers, status = 200, statusText = 'OK', url} = options || {};\n\n    this.url = url;\n    this.ok = status === 200;\n    this.status = status; // TODO - handle errors and set status\n    this.statusText = statusText;\n    this.headers = new Headers(options?.headers || {});\n\n    // Check for content-encoding and create a decompression stream\n    if (isReadableNodeStream(body)) {\n      this._body = decompressReadStream(body, headers);\n    } else if (typeof body === 'string') {\n      this._body = Readable.from([new TextEncoder().encode(body)]);\n    } else {\n      this._body = Readable.from([body || new ArrayBuffer(0)]);\n    }\n  }\n\n  // Subset of Properties\n\n  // Returns a readable stream to the \"body\" of the response (or file)\n  get body() {\n    assert(!this.bodyUsed);\n    assert(isReadableNodeStream(this._body)); // Not implemented: conversion of ArrayBuffer etc to stream\n    this.bodyUsed = true;\n    return this._body;\n  }\n\n  // Subset of Methods\n\n  async arrayBuffer() {\n    if (!isReadableNodeStream(this._body)) {\n      return this._body || new ArrayBuffer(0);\n    }\n    const data = await concatenateReadStream(this._body);\n    return data;\n  }\n\n  async text() {\n    const arrayBuffer = await this.arrayBuffer();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(arrayBuffer);\n  }\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n\n  async blob() {\n    if (typeof Blob === 'undefined') {\n      throw new Error('Blob polyfill not installed');\n    }\n    return new Blob([await this.arrayBuffer()]);\n  }\n}\n"],"mappings":"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"}