{"version":3,"file":"response.node.js","names":["assert","decompressReadStream","concatenateReadStream","Headers","isBoolean","x","isFunction","isObject","isReadableNodeStream","read","pipe","readable","Readable","Response","constructor","body","options","_defineProperty","headers","status","statusText","url","ok","_body","from","TextEncoder","encode","ArrayBuffer","bodyUsed","arrayBuffer","data","text","textDecoder","TextDecoder","decode","json","JSON","parse","blob","Blob","Error"],"sources":["../../../../src/node/fetch/response.node.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {assert} from '../../utils/assert';\nimport {decompressReadStream, concatenateReadStream} from './utils/stream-utils.node';\nimport {Headers} from './headers.node';\n\nconst isBoolean = (x) => typeof x === 'boolean';\nconst isFunction = (x) => typeof x === 'function';\nconst isObject = (x) => x !== null && typeof x === 'object';\nconst isReadableNodeStream = (x) =>\n  isObject(x) && isFunction(x.read) && isFunction(x.pipe) && isBoolean(x.readable);\n\n/**\n * Polyfill for Browser Response\n *\n * Under Node.js we return a mock \"fetch response object\"\n * so that apps can use the same API as in the browser.\n *\n * Note: This is intended to be a \"lightweight\" implementation and will have limitations.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/Response\n */\nimport {Readable} from 'stream';\n\nexport class Response {\n  readonly ok: boolean;\n  readonly status: number;\n  readonly statusText: string;\n  readonly headers: Headers;\n  readonly url: string;\n  bodyUsed: boolean = false;\n  private readonly _body;\n\n  // TODO - handle ArrayBuffer, ArrayBufferView, Buffer\n  constructor(\n    body,\n    options: {\n      headers?;\n      status?: number;\n      statusText?: string;\n      url: string;\n    }\n  ) {\n    const {headers, status = 200, statusText = 'OK', url} = options || {};\n\n    this.url = url;\n    this.ok = status === 200;\n    this.status = status; // TODO - handle errors and set status\n    this.statusText = statusText;\n    this.headers = new Headers(options?.headers || {});\n\n    // Check for content-encoding and create a decompression stream\n    if (isReadableNodeStream(body)) {\n      this._body = decompressReadStream(body, headers);\n    } else if (typeof body === 'string') {\n      this._body = Readable.from([new TextEncoder().encode(body)]);\n    } else {\n      this._body = Readable.from([body || new ArrayBuffer(0)]);\n    }\n  }\n\n  // Subset of Properties\n\n  // Returns a readable stream to the \"body\" of the response (or file)\n  get body() {\n    assert(!this.bodyUsed);\n    assert(isReadableNodeStream(this._body)); // Not implemented: conversion of ArrayBuffer etc to stream\n    this.bodyUsed = true;\n    return this._body;\n  }\n\n  // Subset of Methods\n\n  async arrayBuffer() {\n    if (!isReadableNodeStream(this._body)) {\n      return this._body || new ArrayBuffer(0);\n    }\n    const data = await concatenateReadStream(this._body);\n    return data;\n  }\n\n  async text() {\n    const arrayBuffer = await this.arrayBuffer();\n    const textDecoder = new TextDecoder();\n    return textDecoder.decode(arrayBuffer);\n  }\n\n  async json() {\n    const text = await this.text();\n    return JSON.parse(text);\n  }\n\n  async blob() {\n    if (typeof Blob === 'undefined') {\n      throw new Error('Blob polyfill not installed');\n    }\n    return new Blob([await this.arrayBuffer()]);\n  }\n}\n"],"mappings":"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"}