{"version":3,"file":"fetch-file.node.js","names":["fs","Response","Headers","isRequestURL","url","startsWith","fetchFileNode","options","noqueryUrl","split","body","Promise","resolve","reject","stream","createReadStream","encoding","once","on","error","status","statusText","headers","getHeadersForFile","message","stats","statSync","size","endsWith","slice"],"sources":["../../../../src/node/fetch/fetch-file.node.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport fs from 'fs'; // `fs` will be empty object in browsers (see package.json \"browser\" field).\nimport {Response} from './response.node';\nimport {Headers} from './headers.node';\n\nexport function isRequestURL(url: string): boolean {\n  return url.startsWith('http:') || url.startsWith('https:');\n}\n\nexport async function fetchFileNode(url: string, options): Promise<Response> {\n  const noqueryUrl = url.split('?')[0];\n\n  try {\n    // Now open the stream\n    const body = await new Promise((resolve, reject) => {\n      // @ts-ignore\n      const stream = fs.createReadStream(noqueryUrl, {encoding: null});\n      stream.once('readable', () => resolve(stream));\n      stream.on('error', (error) => reject(error));\n    });\n\n    const status = 200;\n    const statusText = 'OK';\n    const headers = getHeadersForFile(noqueryUrl);\n    return new Response(body, {headers, status, statusText, url});\n  } catch (error) {\n    const status = 400;\n    const statusText = (error as Error).message;\n    const headers = {};\n    return new Response((error as Error).message, {headers, status, statusText, url});\n  }\n}\n\nfunction getHeadersForFile(noqueryUrl: string): Headers {\n  const headers = {};\n\n  // Fix up content length if we can for best progress experience\n  if (!headers['content-length']) {\n    const stats = fs.statSync(noqueryUrl);\n    headers['content-length'] = stats.size;\n  }\n\n  // Automatically decompress gzipped files with .gz extension\n  if (noqueryUrl.endsWith('.gz')) {\n    noqueryUrl = noqueryUrl.slice(0, -3);\n    headers['content-encoding'] = 'gzip';\n  }\n\n  return new Headers(headers);\n}\n"],"mappings":"AAEA,OAAOA,EAAE,MAAM,IAAI;AACnB,SAAQC,QAAQ,QAAO,iBAAiB;AACxC,SAAQC,OAAO,QAAO,gBAAgB;AAEtC,OAAO,SAASC,YAAYA,CAACC,GAAW,EAAW;EACjD,OAAOA,GAAG,CAACC,UAAU,CAAC,OAAO,CAAC,IAAID,GAAG,CAACC,UAAU,CAAC,QAAQ,CAAC;AAC5D;AAEA,OAAO,eAAeC,aAAaA,CAACF,GAAW,EAAEG,OAAO,EAAqB;EAC3E,MAAMC,UAAU,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEpC,IAAI;IAEF,MAAMC,IAAI,GAAG,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAElD,MAAMC,MAAM,GAAGd,EAAE,CAACe,gBAAgB,CAACP,UAAU,EAAE;QAACQ,QAAQ,EAAE;MAAI,CAAC,CAAC;MAChEF,MAAM,CAACG,IAAI,CAAC,UAAU,EAAE,MAAML,OAAO,CAACE,MAAM,CAAC,CAAC;MAC9CA,MAAM,CAACI,EAAE,CAAC,OAAO,EAAGC,KAAK,IAAKN,MAAM,CAACM,KAAK,CAAC,CAAC;IAC9C,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,UAAU,GAAG,IAAI;IACvB,MAAMC,OAAO,GAAGC,iBAAiB,CAACf,UAAU,CAAC;IAC7C,OAAO,IAAIP,QAAQ,CAACS,IAAI,EAAE;MAACY,OAAO;MAAEF,MAAM;MAAEC,UAAU;MAAEjB;IAAG,CAAC,CAAC;EAC/D,CAAC,CAAC,OAAOe,KAAK,EAAE;IACd,MAAMC,MAAM,GAAG,GAAG;IAClB,MAAMC,UAAU,GAAIF,KAAK,CAAWK,OAAO;IAC3C,MAAMF,OAAO,GAAG,CAAC,CAAC;IAClB,OAAO,IAAIrB,QAAQ,CAAEkB,KAAK,CAAWK,OAAO,EAAE;MAACF,OAAO;MAAEF,MAAM;MAAEC,UAAU;MAAEjB;IAAG,CAAC,CAAC;EACnF;AACF;AAEA,SAASmB,iBAAiBA,CAACf,UAAkB,EAAW;EACtD,MAAMc,OAAO,GAAG,CAAC,CAAC;EAGlB,IAAI,CAACA,OAAO,CAAC,gBAAgB,CAAC,EAAE;IAC9B,MAAMG,KAAK,GAAGzB,EAAE,CAAC0B,QAAQ,CAAClB,UAAU,CAAC;IACrCc,OAAO,CAAC,gBAAgB,CAAC,GAAGG,KAAK,CAACE,IAAI;EACxC;EAGA,IAAInB,UAAU,CAACoB,QAAQ,CAAC,KAAK,CAAC,EAAE;IAC9BpB,UAAU,GAAGA,UAAU,CAACqB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACpCP,OAAO,CAAC,kBAAkB,CAAC,GAAG,MAAM;EACtC;EAEA,OAAO,IAAIpB,OAAO,CAACoB,OAAO,CAAC;AAC7B"}