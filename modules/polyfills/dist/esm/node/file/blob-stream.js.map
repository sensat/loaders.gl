{"version":3,"file":"blob-stream.js","names":["ReadableStreamPolyfill","BlobStreamController","_Symbol$asyncIterator","Symbol","asyncIterator","BlobStream","constructor","chunks","values","type","_defineProperty","_chunks","_options","reader","getReader","releaseLock"],"sources":["../../../../src/node/file/blob-stream.ts"],"sourcesContent":["/**\n * Forked from @gozala's web-blob under MIT license\n * @see https://github.com/Gozala/web-blob\n */\nimport {ReadableStreamPolyfill} from './readable-stream';\nimport {BlobStreamController} from './blob-stream-controller';\n\n/**\n * Blob stream is a `ReadableStream` extension optimized to have minimal\n * overhead when consumed as `AsyncIterable<Uint8Array>`.\n * extends {ReadableStream<Uint8Array>}\n * implements {AsyncIterable<Uint8Array>}\n */\n// @ts-ignore\nexport class BlobStream<T> extends ReadableStreamPolyfill<T> {\n  private readonly _chunks: Uint8Array[];\n  /**\n   * @param chunks\n   */\n  constructor(chunks) {\n    // @ts-ignore\n    super(new BlobStreamController(chunks.values()), {type: 'bytes'});\n    /** @private */\n    this._chunks = chunks;\n  }\n\n  /**\n   * @property [_options.preventCancel]\n   */\n  // @ts-ignore\n  async *[Symbol.asyncIterator](_options?: {preventCancel?: boolean}): AsyncIterable<Uint8Array> {\n    const reader = this.getReader();\n    yield* this._chunks;\n    reader.releaseLock();\n  }\n}\n"],"mappings":";;AAIA,SAAQA,sBAAsB,QAAO,mBAAmB;AACxD,SAAQC,oBAAoB,QAAO,0BAA0B;AAACC,qBAAA,GAyBpDC,MAAM,CAACC,aAAa;AAhB9B,OAAO,MAAMC,UAAU,SAAYL,sBAAsB,CAAI;EAK3DM,WAAWA,CAACC,MAAM,EAAE;IAElB,KAAK,CAAC,IAAIN,oBAAoB,CAACM,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE;MAACC,IAAI,EAAE;IAAO,CAAC,CAAC;IAACC,eAAA;IAElE,IAAI,CAACC,OAAO,GAAGJ,MAAM;EACvB;EAMA,QAAAL,qBAAA,EAA8BU,QAAoC,EAA6B;IAC7F,MAAMC,MAAM,GAAG,IAAI,CAACC,SAAS,CAAC,CAAC;IAC/B,OAAO,IAAI,CAACH,OAAO;IACnBE,MAAM,CAACE,WAAW,CAAC,CAAC;EACtB;AACF"}