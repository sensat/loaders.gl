{"version":3,"file":"blob.js","names":["BlobStream","_Symbol$toStringTag","Symbol","toStringTag","BlobPolyfill","constructor","init","arguments","length","undefined","options","_defineProperty","parts","size","part","bytes","TextEncoder","encode","push","byteLength","ArrayBuffer","Uint8Array","isView","buffer","byteOffset","String","type","readType","slice","start","end","offset","Math","max","min","limit","span","blob","blobSize","blobParts","chunk","subarray","arrayBuffer","_toArrayBuffer","text","decoder","TextDecoder","decode","stream","toString","set","input","toLowerCase","test"],"sources":["../../../../src/node/file/blob.ts"],"sourcesContent":["// Forked from @gozala's web-blob under MIT license https://github.com/Gozala/web-blob\nimport {BlobStream} from './blob-stream';\n\n/**\n * Forked from @gozala's web-blob under MIT license\n * @see https://github.com/Gozala/web-blob\n */\nexport class BlobPolyfill {\n  // implements Blob {\n  /** The MIME type of the data contained in the Blob. If type is unknown, string is empty. */\n  readonly type: string;\n  /** The size, in bytes, of the data contained in the Blob object. */\n  size: number;\n  private parts: Uint8Array[];\n  /**\n   * @param [init]\n   * @param [options]\n   */\n  constructor(init: BlobPart[] = [], options: BlobPropertyBag = {}) {\n    this.parts = [];\n\n    this.size = 0;\n    for (const part of init) {\n      if (typeof part === 'string') {\n        const bytes = new TextEncoder().encode(part);\n        this.parts.push(bytes);\n        this.size += bytes.byteLength;\n      } else if (part instanceof BlobPolyfill) {\n        this.size += part.size;\n        // @ts-ignore - `parts` is marked private so TS will complain about\n        // accessing it.\n        this.parts.push(...part.parts);\n      } else if (part instanceof ArrayBuffer) {\n        this.parts.push(new Uint8Array(part));\n        this.size += part.byteLength;\n      } else if (part instanceof Uint8Array) {\n        this.parts.push(part);\n        this.size += part.byteLength;\n      } else if (ArrayBuffer.isView(part)) {\n        const {buffer, byteOffset, byteLength} = part;\n        this.parts.push(new Uint8Array(buffer, byteOffset, byteLength));\n        this.size += byteLength;\n      } else {\n        const bytes = new TextEncoder().encode(String(part));\n        this.parts.push(bytes);\n        this.size += bytes.byteLength;\n      }\n    }\n\n    /** @private */\n    this.type = readType(options.type);\n  }\n\n  /**\n   * Returns a new Blob object containing the data in the specified range of\n   * bytes of the blob on which it's called.\n   * @param start=0 - An index into the Blob indicating the first\n   * byte to include in the new Blob. If you specify a negative value, it's\n   * treated as an offset from the end of the Blob toward the beginning. For\n   * example, `-10` would be the 10th from last byte in the Blob. The default\n   * value is `0`. If you specify a value for start that is larger than the\n   * size of the source Blob, the returned Blob has size 0 and contains no\n   * data.\n   * @param end - An index into the `Blob` indicating the first byte\n   *  that will *not* be included in the new `Blob` (i.e. the byte exactly at\n   * this index is not included). If you specify a negative value, it's treated\n   * as an offset from the end of the Blob toward the beginning. For example,\n   * `-10` would be the 10th from last byte in the `Blob`. The default value is\n   * size.\n   * @param type - The content type to assign to the new Blob;\n   * this will be the value of its type property. The default value is an empty\n   * string.\n   */\n  slice(start: number = 0, end: number = this.size, type: string = ''): Blob {\n    const {size, parts: parts} = this;\n    let offset = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n\n    let limit = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n    const span = Math.max(limit - offset, 0);\n    const blob = new BlobPolyfill([], {type});\n\n    if (span === 0) {\n      // @ts-ignore\n      return blob;\n    }\n\n    let blobSize = 0;\n    const blobParts: Uint8Array[] = [];\n    for (const part of parts) {\n      const {byteLength} = part;\n      if (offset > 0 && byteLength <= offset) {\n        offset -= byteLength;\n        limit -= byteLength;\n      } else {\n        const chunk = part.subarray(offset, Math.min(byteLength, limit));\n        blobParts.push(chunk);\n        blobSize += chunk.byteLength;\n        // no longer need to take that into account\n        offset = 0;\n\n        // don't add the overflow to new blobParts\n        if (blobSize >= span) {\n          break;\n        }\n      }\n    }\n\n    blob.parts = blobParts;\n    blob.size = blobSize;\n\n    // @ts-ignore\n    return blob;\n  }\n\n  /**\n   * Returns a promise that resolves with an ArrayBuffer containing the entire\n   * contents of the Blob as binary data.\n   */\n  // eslint-disable-next-line require-await\n  async arrayBuffer(): Promise<ArrayBuffer> {\n    return this._toArrayBuffer();\n  }\n\n  /**\n   * Returns a promise that resolves with a USVString containing the entire\n   * contents of the Blob interpreted as UTF-8 text.\n   */\n  // eslint-disable-next-line require-await\n  async text(): Promise<string> {\n    const decoder = new TextDecoder();\n    let text = '';\n    for (const part of this.parts) {\n      text += decoder.decode(part);\n    }\n    return text;\n  }\n\n  /**\n   */\n  // @ts-ignore\n  stream(): BlobStream<any> {\n    return new BlobStream<any>(this.parts);\n  }\n\n  /**\n   * @returns {string}\n   */\n  toString() {\n    return '[object Blob]';\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Blob';\n  }\n\n  _toArrayBuffer(): ArrayBuffer {\n    const buffer = new ArrayBuffer(this.size);\n    const bytes = new Uint8Array(buffer);\n    let offset = 0;\n    for (const part of this.parts) {\n      bytes.set(part, offset);\n      offset += part.byteLength;\n    }\n    return buffer;\n  }\n}\n\n/**\n */\nfunction readType(input: string = ''): string {\n  const type = String(input).toLowerCase();\n  return /[^\\u0020-\\u007E]/.test(type) ? '' : type;\n}\n"],"mappings":"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"}