{"version":3,"file":"md5-hash.js","names":["Hash","md5WASM","hexToBase64","MD5Hash","constructor","options","arguments","length","undefined","_defineProperty","hash","input","md5Promise","Promise","resolve","reject","then","catch","hex"],"sources":["../../../src/lib/md5-hash.ts"],"sourcesContent":["// Fork of https://github.com/briantbutton/md5-wasm under MIT license\nimport {Hash} from './hash';\nimport md5WASM from './algorithms/md5-wasm';\nimport {hexToBase64} from './utils/digest-utils';\n\n/**\n * A transform that calculates MD5 hashes, passing data through\n */\nexport class MD5Hash extends Hash {\n  readonly name = 'md5';\n  readonly options;\n\n  constructor(options = {}) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * Atomic hash calculation\n   * @returns base64 encoded hash\n   */\n  async hash(input: ArrayBuffer): Promise<string> {\n    const md5Promise = new Promise<string>((resolve, reject) =>\n      // @ts-expect-error\n      md5WASM(input).then(resolve).catch(reject)\n    );\n    const hex = await md5Promise;\n    return hexToBase64(hex);\n  }\n}\n"],"mappings":";AACA,SAAQA,IAAI,QAAO,QAAQ;AAC3B,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAAQC,WAAW,QAAO,sBAAsB;AAKhD,OAAO,MAAMC,OAAO,SAASH,IAAI,CAAC;EAIhCI,WAAWA,CAAA,EAAe;IAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACtB,KAAK,CAAC,CAAC;IAACG,eAAA,eAJM,KAAK;IAAAA,eAAA;IAKnB,IAAI,CAACJ,OAAO,GAAGA,OAAO;EACxB;EAMA,MAAMK,IAAIA,CAACC,KAAkB,EAAmB;IAC9C,MAAMC,UAAU,GAAG,IAAIC,OAAO,CAAS,CAACC,OAAO,EAAEC,MAAM,KAErDd,OAAO,CAACU,KAAK,CAAC,CAACK,IAAI,CAACF,OAAO,CAAC,CAACG,KAAK,CAACF,MAAM,CAC3C,CAAC;IACD,MAAMG,GAAG,GAAG,MAAMN,UAAU;IAC5B,OAAOV,WAAW,CAACgB,GAAG,CAAC;EACzB;AACF"}