{"version":3,"file":"node-hash.js","names":["_hash2","require","_crypto","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","constructor","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","prototype","valueOf","call","e","_asyncIterator","iterable","method","async","sync","retry","Symbol","asyncIterator","iterator","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Object","Promise","reject","done","resolve","value","then","n","next","return","_return","ret","throw","_throw","thr","NodeHash","_Hash","_inherits2","_super","options","_this2$options","_this2$options$crypto","_this2","_classCallCheck2","_defineProperty2","_assertThisInitialized2","crypto","algorithm","Error","name","_createClass2","key","_hash","_asyncToGenerator2","_regenerator","mark","_callee","input","_this$options","_this$options$crypto","_this$options$crypto$","hash","inputArray","wrap","_callee$","_context","prev","preload","createHash","toLowerCase","Uint8Array","abrupt","update","digest","stop","_x","hashBatches","_this","_wrapAsyncGenerator2","_callee2","_this$options2","_this$options2$crypto","_this$options2$crypto2","_this$options3","_this$options3$crypto","_this$options3$crypto2","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","chunk","_callee2$","_context2","_awaitAsyncGenerator2","sent","t0","finish","onEnd","Hash","exports"],"sources":["../../../src/lib/node-hash.ts"],"sourcesContent":["// This dependency is too big, application must provide it\nimport {Hash} from './hash';\nimport {createHash} from 'crypto'; // Node.js builtin\n\ntype CryptoHashOptions = {\n  crypto: {\n    algorithm: string;\n    onEnd?: (result: {hash: string}) => any;\n  };\n};\n\n/**\n * Calculates Cryptographic Hash using Node.js crypto library\n * @deprecated Warning, experimental class\n */\nexport class NodeHash extends Hash {\n  readonly name = 'crypto-node';\n\n  options: CryptoHashOptions;\n  // @ts-ignore\n  private _algorithm;\n  // @ts-ignore\n  private _hash;\n\n  constructor(options: CryptoHashOptions) {\n    super();\n    this.options = options;\n    if (!this.options?.crypto?.algorithm) {\n      throw new Error(this.name);\n    }\n  }\n\n  /**\n   * Atomic hash calculation\n   * @returns base64 encoded hash\n   */\n  async hash(input: ArrayBuffer): Promise<string> {\n    await this.preload();\n    const hash = createHash(this.options?.crypto?.algorithm?.toLowerCase());\n    const inputArray = new Uint8Array(input);\n    return hash.update(inputArray).digest('base64');\n  }\n\n  async *hashBatches(\n    asyncIterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>\n  ): AsyncIterable<ArrayBuffer> {\n    await this.preload();\n    const hash = createHash(this.options?.crypto?.algorithm?.toLowerCase());\n    for await (const chunk of asyncIterator) {\n      // https://stackoverflow.com/questions/25567468/how-to-decrypt-an-arraybuffer\n      const inputArray = new Uint8Array(chunk);\n      hash.update(inputArray);\n      yield chunk;\n    }\n    this.options?.crypto?.onEnd?.({hash: hash.digest('base64')});\n  }\n}\n"],"mappings":"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"}