{"version":3,"file":"parse-wfs.js","names":["_xml","require","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","parseWFSCapabilities","text","options","_options","_XMLLoader$parseTextS","xml","removeNSPrefix","parsedXML","XMLLoader","parseTextSync","call","xmlCapabilities","Capabilities","uncapitalizeKeys","_typeof2","newObject","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray2","value","uncapitalize","str","charAt","toLowerCase","slice"],"sources":["../../../../src/lib/wfs/parse-wfs.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {XMLLoader} from '@loaders.gl/xml';\n\nexport type WFSCapabilities = {};\n\n/**\n * Parses a typed data structure from raw XML for `GetCapabilities` response\n * @note Error handlings is fairly weak\n */\nexport function parseWFSCapabilities(text: string, options): WFSCapabilities {\n  // Remove namespaces in XML\n  options = {...options, xml: {...options?.xml, removeNSPrefix: true}};\n  const parsedXML = XMLLoader.parseTextSync?.(text, options);\n  const xmlCapabilities: any = parsedXML.Capabilities || parsedXML;\n  return uncapitalizeKeys(xmlCapabilities);\n}\n\n/** Uncapitalize all keys of an object */\nfunction uncapitalizeKeys(object: any): any {\n  if (object && typeof object === 'object') {\n    const newObject = {};\n    for (const [key, value] of Object.entries(object)) {\n      newObject[uncapitalize(key)] = uncapitalizeKeys(value);\n    }\n    return newObject;\n  }\n  return object;\n}\n\n/** Uncapitalize first letter of a string */\nfunction uncapitalize(str: string): string {\n  return typeof str === 'string' ? str.charAt(0).toLowerCase() + str.slice(1) : str;\n}\n"],"mappings":"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"}