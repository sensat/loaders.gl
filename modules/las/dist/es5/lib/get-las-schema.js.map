{"version":3,"file":"get-las-schema.js","names":["_schema","require","getLASSchema","lasHeader","attributes","metadataMap","makeMetadataFromLasHeader","schema","deduceMeshSchema","metadata","las_pointsOffset","pointsOffset","toString","las_pointsFormatId","pointsFormatId","las_pointsStructSize","pointsStructSize","las_pointsCount","pointsCount","las_scale","JSON","stringify","scale","las_offset","offset","maxs","undefined","las_maxs","mins","las_mins","las_totalToRead","totalToRead","las_pointsFortotalReadmatId","totalRead","versionAsString","las_versionAsString","isCompressed","las_isCompressed"],"sources":["../../../src/lib/get-las-schema.ts"],"sourcesContent":["import {Schema, MeshAttributes, deduceMeshSchema} from '@loaders.gl/schema';\nimport type {LASHeader} from './las-types';\n\n/**\n * Gets schema from PLY header\n * @param lasHeader\n * @param metadata\n * @returns Schema\n */\nexport function getLASSchema(lasHeader: LASHeader, attributes: MeshAttributes): Schema {\n  const metadataMap = makeMetadataFromLasHeader(lasHeader);\n  const schema = deduceMeshSchema(attributes, metadataMap);\n  return schema;\n}\n\n/**\n * Make arrow like schema metadata by LASHeader properties\n * @param lasHeader\n * @returns\n */\nexport function makeMetadataFromLasHeader(lasHeader: LASHeader): Record<string, string> {\n  const metadata: Record<string, string> = {};\n  /* eslint-disable camelcase */\n  metadata.las_pointsOffset = lasHeader.pointsOffset.toString(10);\n  metadata.las_pointsFormatId = lasHeader.pointsFormatId.toString(10);\n  metadata.las_pointsStructSize = lasHeader.pointsStructSize.toString(10);\n  metadata.las_pointsCount = lasHeader.pointsCount.toString(10);\n  metadata.las_scale = JSON.stringify(lasHeader.scale);\n  metadata.las_offset = JSON.stringify(lasHeader.offset);\n  if (lasHeader.maxs !== undefined) {\n    metadata.las_maxs = JSON.stringify(lasHeader.maxs);\n  }\n  if (lasHeader.mins !== undefined) {\n    metadata.las_mins = JSON.stringify(lasHeader.mins);\n  }\n  metadata.las_totalToRead = lasHeader.totalToRead.toString(10);\n  metadata.las_pointsFortotalReadmatId = lasHeader.totalRead.toString(10);\n  if (lasHeader.versionAsString !== undefined) {\n    metadata.las_versionAsString = lasHeader.versionAsString;\n  }\n  if (lasHeader.isCompressed !== undefined) {\n    metadata.las_isCompressed = lasHeader.isCompressed.toString();\n  }\n  return metadata;\n}\n"],"mappings":";;;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AASO,SAASC,YAAYA,CAACC,SAAoB,EAAEC,UAA0B,EAAU;EACrF,IAAMC,WAAW,GAAGC,yBAAyB,CAACH,SAAS,CAAC;EACxD,IAAMI,MAAM,GAAG,IAAAC,wBAAgB,EAACJ,UAAU,EAAEC,WAAW,CAAC;EACxD,OAAOE,MAAM;AACf;AAOO,SAASD,yBAAyBA,CAACH,SAAoB,EAA0B;EACtF,IAAMM,QAAgC,GAAG,CAAC,CAAC;EAE3CA,QAAQ,CAACC,gBAAgB,GAAGP,SAAS,CAACQ,YAAY,CAACC,QAAQ,CAAC,EAAE,CAAC;EAC/DH,QAAQ,CAACI,kBAAkB,GAAGV,SAAS,CAACW,cAAc,CAACF,QAAQ,CAAC,EAAE,CAAC;EACnEH,QAAQ,CAACM,oBAAoB,GAAGZ,SAAS,CAACa,gBAAgB,CAACJ,QAAQ,CAAC,EAAE,CAAC;EACvEH,QAAQ,CAACQ,eAAe,GAAGd,SAAS,CAACe,WAAW,CAACN,QAAQ,CAAC,EAAE,CAAC;EAC7DH,QAAQ,CAACU,SAAS,GAAGC,IAAI,CAACC,SAAS,CAAClB,SAAS,CAACmB,KAAK,CAAC;EACpDb,QAAQ,CAACc,UAAU,GAAGH,IAAI,CAACC,SAAS,CAAClB,SAAS,CAACqB,MAAM,CAAC;EACtD,IAAIrB,SAAS,CAACsB,IAAI,KAAKC,SAAS,EAAE;IAChCjB,QAAQ,CAACkB,QAAQ,GAAGP,IAAI,CAACC,SAAS,CAAClB,SAAS,CAACsB,IAAI,CAAC;EACpD;EACA,IAAItB,SAAS,CAACyB,IAAI,KAAKF,SAAS,EAAE;IAChCjB,QAAQ,CAACoB,QAAQ,GAAGT,IAAI,CAACC,SAAS,CAAClB,SAAS,CAACyB,IAAI,CAAC;EACpD;EACAnB,QAAQ,CAACqB,eAAe,GAAG3B,SAAS,CAAC4B,WAAW,CAACnB,QAAQ,CAAC,EAAE,CAAC;EAC7DH,QAAQ,CAACuB,2BAA2B,GAAG7B,SAAS,CAAC8B,SAAS,CAACrB,QAAQ,CAAC,EAAE,CAAC;EACvE,IAAIT,SAAS,CAAC+B,eAAe,KAAKR,SAAS,EAAE;IAC3CjB,QAAQ,CAAC0B,mBAAmB,GAAGhC,SAAS,CAAC+B,eAAe;EAC1D;EACA,IAAI/B,SAAS,CAACiC,YAAY,KAAKV,SAAS,EAAE;IACxCjB,QAAQ,CAAC4B,gBAAgB,GAAGlC,SAAS,CAACiC,YAAY,CAACxB,QAAQ,CAAC,CAAC;EAC/D;EACA,OAAOH,QAAQ;AACjB"}