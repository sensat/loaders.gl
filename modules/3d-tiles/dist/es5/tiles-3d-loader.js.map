{"version":3,"file":"tiles-3d-loader.js","names":["_loaderUtils","require","_tiles","_version","_parse3dTile","_parse3dTileHeader","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","Tiles3DLoader","id","name","module","version","VERSION","extensions","mimeTypes","tests","parse","options","loadGLTF","decodeQuantizedPositions","isTileset","assetGltfUpAxis","exports","_x","_parse","_asyncToGenerator2","_regenerator","mark","_callee","data","context","loaderOptions","_args","wrap","_callee$","_context","prev","next","undefined","url","indexOf","abrupt","parseTileset","parseTile","stop","_x2","_x3","_x4","_parseTileset","_callee2","_tilesetJson$root","tilesetJson","tilesetUrl","basePath","normalizedRoot","tilesetJsonPostprocessed","_callee2$","_context2","JSON","TextDecoder","decode","getBaseUri","normalizeTileHeaders","sent","loader","queryString","root","type","TILESET_TYPE","TILES3D","lodMetricType","LOD_METRIC_TYPE","GEOMETRIC_ERROR","lodMetricValue","geometricError","_x5","_x6","_x7","_parseTile","_callee3","arrayBuffer","tile","byteOffset","_callee3$","_context3","content","featureIds","parse3DTile","path","dirname"],"sources":["../../src/tiles-3d-loader.ts"],"sourcesContent":["import type {LoaderWithParser, LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\n// / import type { GLTFLoaderOptions } from '@loaders.gl/gltf';\nimport type {DracoLoaderOptions} from '@loaders.gl/draco';\nimport type {ImageLoaderOptions} from '@loaders.gl/images';\n\nimport {path} from '@loaders.gl/loader-utils';\nimport {TILESET_TYPE, LOD_METRIC_TYPE} from '@loaders.gl/tiles';\nimport {VERSION} from './lib/utils/version';\nimport {parse3DTile} from './lib/parsers/parse-3d-tile';\nimport {normalizeTileHeaders} from './lib/parsers/parse-3d-tile-header';\nimport {Tiles3DTilesetJSON, Tiles3DTilesetJSONPostprocessed} from './types';\n\nexport type Tiles3DLoaderOptions = LoaderOptions &\n  // GLTFLoaderOptions & - TODO not yet exported\n  DracoLoaderOptions &\n  ImageLoaderOptions & {\n    '3d-tiles'?: {\n      /** Whether to parse any embedded glTF binaries (or extract memory for independent glTF parsing) */\n      loadGLTF?: boolean;\n      /** If renderer doesn't support quantized positions, loader can decode them on CPU */\n      decodeQuantizedPositions?: boolean;\n      /** Whether this is a tileset or a tile */\n      isTileset?: boolean | 'auto';\n      /** Controls which axis is \"up\" in glTF files */\n      assetGltfUpAxis?: 'x' | 'y' | 'z' | null;\n    };\n  };\n\n/**\n * Loader for 3D Tiles\n */\nexport const Tiles3DLoader: LoaderWithParser = {\n  id: '3d-tiles',\n  name: '3D Tiles',\n  module: '3d-tiles',\n  version: VERSION,\n  extensions: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  mimeTypes: ['application/octet-stream'],\n  tests: ['cmpt', 'pnts', 'b3dm', 'i3dm'],\n  parse,\n  options: {\n    '3d-tiles': {\n      loadGLTF: true,\n      decodeQuantizedPositions: false,\n      isTileset: 'auto',\n      assetGltfUpAxis: null\n    }\n  }\n};\n\n/** Parses a tileset or tile */\nasync function parse(data, options: Tiles3DLoaderOptions = {}, context?: LoaderContext) {\n  // auto detect file type\n  const loaderOptions = options['3d-tiles'] || {};\n  let isTileset;\n  if (loaderOptions.isTileset === 'auto') {\n    isTileset = context?.url && context.url.indexOf('.json') !== -1;\n  } else {\n    isTileset = loaderOptions.isTileset;\n  }\n\n  return isTileset ? parseTileset(data, options, context) : parseTile(data, options, context);\n}\n\n/** Parse a tileset */\nasync function parseTileset(\n  data: ArrayBuffer,\n  options?: Tiles3DLoaderOptions,\n  context?: LoaderContext\n): Promise<Tiles3DTilesetJSONPostprocessed> {\n  const tilesetJson: Tiles3DTilesetJSON = JSON.parse(new TextDecoder().decode(data));\n\n  const tilesetUrl = context?.url || '';\n  const basePath = getBaseUri(tilesetUrl);\n  const normalizedRoot = await normalizeTileHeaders(tilesetJson, basePath, options || {});\n  const tilesetJsonPostprocessed: Tiles3DTilesetJSONPostprocessed = {\n    ...tilesetJson,\n    loader: Tiles3DLoader,\n    url: tilesetUrl,\n    queryString: context?.queryString || '',\n    basePath,\n    root: normalizedRoot || tilesetJson.root,\n    type: TILESET_TYPE.TILES3D,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    lodMetricValue: tilesetJson.root?.geometricError || 0\n  };\n  return tilesetJsonPostprocessed;\n}\n\n/** Parse a tile */\nasync function parseTile(\n  arrayBuffer: ArrayBuffer,\n  options?: Tiles3DLoaderOptions,\n  context?: LoaderContext\n) {\n  const tile = {\n    content: {\n      featureIds: null\n    }\n  };\n  const byteOffset = 0;\n  await parse3DTile(arrayBuffer, byteOffset, options, context, tile.content);\n  return tile.content;\n}\n\n/** Get base name */\nfunction getBaseUri(tilesetUrl: string): string {\n  return path.dirname(tilesetUrl);\n}\n"],"mappings":"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"}