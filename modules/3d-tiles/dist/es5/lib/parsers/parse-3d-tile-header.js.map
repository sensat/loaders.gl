{"version":3,"file":"parse-3d-tile-header.js","names":["_tile3dSubtreeLoader","require","_core","_tiles","_parse3dImplicitTiles","_s2CornersToObb","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","getTileType","tile","tileContentUrl","undefined","TILE_TYPE","EMPTY","contentUrl","split","fileExtension","pop","POINTCLOUD","SCENEGRAPH","getRefine","refine","TILE_REFINEMENT","REPLACE","ADD","resolveUri","uri","basePath","urlSchemeRegex","url","URL","concat","decodeURI","startsWith","normalizeTileData","content","_tile$content","contentUri","tilePostprocessed","id","lodMetricType","LOD_METRIC_TYPE","GEOMETRIC_ERROR","lodMetricValue","geometricError","transformMatrix","transform","type","normalizeTileHeaders","_x","_x2","_x3","_normalizeTileHeaders","_asyncToGenerator2","_regenerator","mark","_callee","tileset","options","root","rootImplicitTilingExtension","stack","children","childrenPostprocessed","_iterator","_step","childHeader","childImplicitTilingExtension","childHeaderPostprocessed","wrap","_callee$","_context","prev","getImplicitTilingExtensionData","normalizeImplicitTileHeaders","sent","t0","finish","abrupt","stop","_x4","_x5","_x6","_x7","_x8","_normalizeImplicitTileHeaders","_callee2","implicitTilingExtension","_tile$content2","_tileset$root","_tile$boundingVolume$","subdivisionScheme","maximumLevel","subtreeLevels","subtreesUriTemplate","replacedUrlTemplate","subtreeUrl","subtree","contentUrlTemplate","rootLodMetricValue","s2VolumeInfo","box","s2VolumeBox","rootBoundingVolume","implicitOptions","_callee2$","_context2","subtrees","replaceContentUrlTemplate","load","Tile3DSubtreeLoader","boundingVolume","extensions","convertS2BoundingVolumetoOBB","normalizeImplicitTileData","_x9","_x10","_x11","_x12","_normalizeImplicitTileData","_callee3","rootSubtree","_yield$parseImplicitT","tileContent","_callee3$","_context3","parseImplicitTiles","replace","_tile$extensions","implicitTiling"],"sources":["../../../../src/lib/parsers/parse-3d-tile-header.ts"],"sourcesContent":["import type {Tiles3DLoaderOptions} from '../../tiles-3d-loader';\nimport type {LoaderOptions} from '@loaders.gl/loader-utils';\nimport {Tile3DSubtreeLoader} from '../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\nimport {LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE} from '@loaders.gl/tiles';\nimport {\n  ImplicitTilingExensionData,\n  Subtree,\n  Tiles3DTileContentJSON,\n  Tiles3DTileJSON,\n  Tiles3DTileJSONPostprocessed,\n  Tiles3DTilesetJSON\n} from '../../types';\nimport type {S2VolumeBox} from './helpers/parse-3d-implicit-tiles';\nimport {parseImplicitTiles, replaceContentUrlTemplate} from './helpers/parse-3d-implicit-tiles';\nimport type {S2VolumeInfo} from '../utils/obb/s2-corners-to-obb';\nimport {convertS2BoundingVolumetoOBB} from '../utils/obb/s2-corners-to-obb';\n\nfunction getTileType(tile: Tiles3DTileJSON, tileContentUrl: string = ''): TILE_TYPE | string {\n  if (!tileContentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  const contentUrl = tileContentUrl.split('?')[0]; // Discard query string\n  const fileExtension = contentUrl.split('.').pop();\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n    case 'i3dm':\n    case 'b3dm':\n    case 'glb':\n    case 'gltf':\n      return TILE_TYPE.SCENEGRAPH;\n    default:\n      return fileExtension || TILE_TYPE.EMPTY;\n  }\n}\n\nfunction getRefine(refine?: string): TILE_REFINEMENT | string | undefined {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n    default:\n      return refine;\n  }\n}\n\nfunction resolveUri(uri: string = '', basePath: string): string {\n  // url scheme per RFC3986\n  const urlSchemeRegex = /^[a-z][0-9a-z+.-]*:/i;\n\n  if (urlSchemeRegex.test(basePath)) {\n    const url = new URL(uri, `${basePath}/`);\n    return decodeURI(url.toString());\n  } else if (uri.startsWith('/')) {\n    return uri;\n  }\n\n  return `${basePath}/${uri}`;\n}\n\nexport function normalizeTileData(\n  tile: Tiles3DTileJSON | null,\n  basePath: string\n): Tiles3DTileJSONPostprocessed | null {\n  if (!tile) {\n    return null;\n  }\n  let tileContentUrl: string | undefined;\n  if (tile.content) {\n    const contentUri = tile.content.uri || tile.content?.url;\n    tileContentUrl = resolveUri(contentUri, basePath);\n  }\n  const tilePostprocessed: Tiles3DTileJSONPostprocessed = {\n    ...tile,\n    id: tileContentUrl,\n    contentUrl: tileContentUrl,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    lodMetricValue: tile.geometricError,\n    transformMatrix: tile.transform,\n    type: getTileType(tile, tileContentUrl),\n    refine: getRefine(tile.refine)\n  };\n\n  return tilePostprocessed;\n}\n\n// normalize tile headers\nexport async function normalizeTileHeaders(\n  tileset: Tiles3DTilesetJSON,\n  basePath: string,\n  options: LoaderOptions\n): Promise<Tiles3DTileJSONPostprocessed | null> {\n  let root: Tiles3DTileJSONPostprocessed | null = null;\n\n  const rootImplicitTilingExtension = getImplicitTilingExtensionData(tileset.root);\n  if (rootImplicitTilingExtension && tileset.root) {\n    root = await normalizeImplicitTileHeaders(\n      tileset.root,\n      tileset,\n      basePath,\n      rootImplicitTilingExtension,\n      options\n    );\n  } else {\n    root = normalizeTileData(tileset.root, basePath);\n  }\n\n  const stack: any[] = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    const tile = stack.pop() || {};\n    const children = tile.children || [];\n    const childrenPostprocessed: Tiles3DTileJSONPostprocessed[] = [];\n    for (const childHeader of children) {\n      const childImplicitTilingExtension = getImplicitTilingExtensionData(childHeader);\n      let childHeaderPostprocessed: Tiles3DTileJSONPostprocessed | null;\n      if (childImplicitTilingExtension) {\n        childHeaderPostprocessed = await normalizeImplicitTileHeaders(\n          childHeader,\n          tileset,\n          basePath,\n          childImplicitTilingExtension,\n          options\n        );\n      } else {\n        childHeaderPostprocessed = normalizeTileData(childHeader, basePath);\n      }\n\n      if (childHeaderPostprocessed) {\n        childrenPostprocessed.push(childHeaderPostprocessed);\n        stack.push(childHeaderPostprocessed);\n      }\n    }\n    tile.children = childrenPostprocessed;\n  }\n\n  return root;\n}\n\n/**\n * Do normalisation of implicit tile headers\n * TODO Check if Tile3D class can be a return type here.\n * @param tileset\n */\nexport async function normalizeImplicitTileHeaders(\n  tile: Tiles3DTileJSON,\n  tileset: Tiles3DTilesetJSON,\n  basePath: string,\n  implicitTilingExtension: ImplicitTilingExensionData,\n  options: Tiles3DLoaderOptions\n): Promise<Tiles3DTileJSONPostprocessed | null> {\n  const {\n    subdivisionScheme,\n    maximumLevel,\n    subtreeLevels,\n    subtrees: {uri: subtreesUriTemplate}\n  } = implicitTilingExtension;\n  const replacedUrlTemplate = replaceContentUrlTemplate(subtreesUriTemplate, 0, 0, 0, 0);\n  const subtreeUrl = resolveUri(replacedUrlTemplate, basePath);\n  const subtree = await load(subtreeUrl, Tile3DSubtreeLoader, options);\n  const contentUrlTemplate = resolveUri(tile.content?.uri, basePath);\n  const refine = tileset?.root?.refine;\n  // @ts-ignore\n  const rootLodMetricValue = tile.geometricError;\n\n  // Replace tile.boundingVolume with the the bounding volume specified by the extensions['3DTILES_bounding_volume_S2']\n  const s2VolumeInfo: S2VolumeInfo = tile.boundingVolume.extensions?.['3DTILES_bounding_volume_S2'];\n  if (s2VolumeInfo) {\n    const box = convertS2BoundingVolumetoOBB(s2VolumeInfo);\n    const s2VolumeBox: S2VolumeBox = {box, s2VolumeInfo};\n    tile.boundingVolume = s2VolumeBox;\n  }\n\n  const rootBoundingVolume = tile.boundingVolume;\n\n  const implicitOptions = {\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    refine,\n    basePath,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    rootLodMetricValue,\n    rootBoundingVolume,\n    getTileType,\n    getRefine\n  };\n\n  return await normalizeImplicitTileData(tile, basePath, subtree, implicitOptions);\n}\n\n/**\n * Do implicit data normalisation to create hierarchical tile structure\n * @param tile\n * @param rootSubtree\n * @param options\n * @returns\n */\nexport async function normalizeImplicitTileData(\n  tile: Tiles3DTileJSON,\n  basePath: string,\n  rootSubtree: Subtree,\n  options: any\n): Promise<Tiles3DTileJSONPostprocessed | null> {\n  if (!tile) {\n    return null;\n  }\n\n  const {children, contentUrl} = await parseImplicitTiles({\n    subtree: rootSubtree,\n    options\n  });\n\n  let tileContentUrl: string | undefined;\n  let tileContent: Tiles3DTileContentJSON | null = null;\n  if (contentUrl) {\n    tileContentUrl = contentUrl;\n    tileContent = {uri: contentUrl.replace(`${basePath}/`, '')};\n  }\n  const tilePostprocessed: Tiles3DTileJSONPostprocessed = {\n    ...tile,\n    id: tileContentUrl,\n    contentUrl: tileContentUrl,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    lodMetricValue: tile.geometricError,\n    transformMatrix: tile.transform,\n    type: getTileType(tile, tileContentUrl),\n    refine: getRefine(tile.refine),\n    content: tileContent || tile.content,\n    children\n  };\n\n  return tilePostprocessed;\n}\n\n/**\n * Implicit Tiling data can be in 3DTILES_implicit_tiling for 3DTiles v.Next or directly in implicitTiling object for 3DTiles v1.1.\n * Spec 3DTiles v.Next - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * Spec 3DTiles v.1.1 - https://github.com/CesiumGS/3d-tiles/tree/draft-1.1/specification/ImplicitTiling\n * @param tile\n * @returns\n */\nfunction getImplicitTilingExtensionData(tile: Tiles3DTileJSON | null): ImplicitTilingExensionData {\n  return tile?.extensions?.['3DTILES_implicit_tiling'] || tile?.implicitTiling;\n}\n"],"mappings":"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"}