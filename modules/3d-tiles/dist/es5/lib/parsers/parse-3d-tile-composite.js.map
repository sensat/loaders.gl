{"version":3,"file":"parse-3d-tile-composite.js","names":["_parse3dTileHeader","require","parseComposite3DTile","_x","_x2","_x3","_x4","_x5","_x6","_parseComposite3DTile","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","tile","arrayBuffer","byteOffset","options","context","parse3DTile","view","_subtile","wrap","_callee$","_context","prev","next","parse3DTileHeaderSync","DataView","tilesLength","getUint32","tiles","length","byteLength","subtile","push","sent","abrupt","stop"],"sources":["../../../../src/lib/parsers/parse-3d-tile-composite.ts"],"sourcesContent":["// This file is derived from the Cesium code base under Apache 2 license\n// See LICENSE.md and https://github.com/AnalyticalGraphicsInc/cesium/blob/master/LICENSE.md\n\n// Reference code:\n// https://github.com/AnalyticalGraphicsInc/cesium/blob/master/Source/Scene/Composite3DTileContent.js#L182\n\nimport type {LoaderContext} from '@loaders.gl/loader-utils';\nimport type {Tiles3DLoaderOptions} from '../../tiles-3d-loader';\nimport {parse3DTileHeaderSync} from './helpers/parse-3d-tile-header';\n\n/** Resolve circulate dependency by passing in parsing function as argument */\ntype Parse3DTile = (\n  arrayBuffer: ArrayBuffer,\n  byteOffset: number,\n  options: Tiles3DLoaderOptions,\n  context: LoaderContext,\n  subtile\n) => Promise<number>;\n\n// eslint-disable-next-line max-params\nexport async function parseComposite3DTile(\n  tile,\n  arrayBuffer: ArrayBuffer,\n  byteOffset: number,\n  options: Tiles3DLoaderOptions,\n  context: LoaderContext,\n  parse3DTile: Parse3DTile\n): Promise<number> {\n  byteOffset = parse3DTileHeaderSync(tile, arrayBuffer, byteOffset);\n\n  const view = new DataView(arrayBuffer);\n\n  // Extract number of tiles\n  tile.tilesLength = view.getUint32(byteOffset, true);\n  byteOffset += 4;\n\n  // extract each tile from the byte stream\n  tile.tiles = [];\n  while (tile.tiles.length < tile.tilesLength && tile.byteLength - byteOffset > 12) {\n    const subtile = {};\n    tile.tiles.push(subtile);\n    byteOffset = await parse3DTile(arrayBuffer, byteOffset, options, context, subtile);\n    // TODO - do we need to add any padding in between tiles?\n  }\n\n  return byteOffset;\n}\n"],"mappings":";;;;;;;;;AAQA,IAAAA,kBAAA,GAAAC,OAAA;AAAqE,SAY/CC,oBAAoBA,CAAAC,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,qBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,sBAAA;EAAAA,qBAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAAnC,SAAAC,QACLC,IAAI,EACJC,WAAwB,EACxBC,UAAkB,EAClBC,OAA6B,EAC7BC,OAAsB,EACtBC,WAAwB;IAAA,IAAAC,IAAA,EAAAC,QAAA;IAAA,OAAAV,YAAA,CAAAD,OAAA,CAAAY,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAExBV,UAAU,GAAG,IAAAW,wCAAqB,EAACb,IAAI,EAAEC,WAAW,EAAEC,UAAU,CAAC;UAE3DI,IAAI,GAAG,IAAIQ,QAAQ,CAACb,WAAW,CAAC;UAGtCD,IAAI,CAACe,WAAW,GAAGT,IAAI,CAACU,SAAS,CAACd,UAAU,EAAE,IAAI,CAAC;UACnDA,UAAU,IAAI,CAAC;UAGfF,IAAI,CAACiB,KAAK,GAAG,EAAE;QAAC;UAAA,MACTjB,IAAI,CAACiB,KAAK,CAACC,MAAM,GAAGlB,IAAI,CAACe,WAAW,IAAIf,IAAI,CAACmB,UAAU,GAAGjB,UAAU,GAAG,EAAE;YAAAQ,QAAA,CAAAE,IAAA;YAAA;UAAA;UACxEQ,QAAO,GAAG,CAAC,CAAC;UAClBpB,IAAI,CAACiB,KAAK,CAACI,IAAI,CAACD,QAAO,CAAC;UAACV,QAAA,CAAAE,IAAA;UAAA,OACNP,WAAW,CAACJ,WAAW,EAAEC,UAAU,EAAEC,OAAO,EAAEC,OAAO,EAAEgB,QAAO,CAAC;QAAA;UAAlFlB,UAAU,GAAAQ,QAAA,CAAAY,IAAA;UAAAZ,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAA,OAAAF,QAAA,CAAAa,MAAA,WAILrB,UAAU;QAAA;QAAA;UAAA,OAAAQ,QAAA,CAAAc,IAAA;MAAA;IAAA,GAAAzB,OAAA;EAAA,CAClB;EAAA,OAAAP,qBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}