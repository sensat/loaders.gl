{"version":3,"file":"parse-3d-tile-header.js","names":["Tile3DSubtreeLoader","load","LOD_METRIC_TYPE","TILE_REFINEMENT","TILE_TYPE","parseImplicitTiles","replaceContentUrlTemplate","convertS2BoundingVolumetoOBB","getTileType","tile","tileContentUrl","arguments","length","undefined","EMPTY","contentUrl","split","fileExtension","pop","POINTCLOUD","SCENEGRAPH","getRefine","refine","REPLACE","ADD","resolveUri","uri","basePath","urlSchemeRegex","test","url","URL","concat","decodeURI","toString","startsWith","normalizeTileData","content","_tile$content","contentUri","tilePostprocessed","id","lodMetricType","GEOMETRIC_ERROR","lodMetricValue","geometricError","transformMatrix","transform","type","normalizeTileHeaders","tileset","options","root","rootImplicitTilingExtension","getImplicitTilingExtensionData","normalizeImplicitTileHeaders","stack","push","children","childrenPostprocessed","childHeader","childImplicitTilingExtension","childHeaderPostprocessed","implicitTilingExtension","_tile$content2","_tileset$root","_tile$boundingVolume$","subdivisionScheme","maximumLevel","subtreeLevels","subtrees","subtreesUriTemplate","replacedUrlTemplate","subtreeUrl","subtree","contentUrlTemplate","rootLodMetricValue","s2VolumeInfo","boundingVolume","extensions","box","s2VolumeBox","rootBoundingVolume","implicitOptions","normalizeImplicitTileData","rootSubtree","tileContent","replace","_tile$extensions","implicitTiling"],"sources":["../../../../src/lib/parsers/parse-3d-tile-header.ts"],"sourcesContent":["import type {Tiles3DLoaderOptions} from '../../tiles-3d-loader';\nimport type {LoaderOptions} from '@loaders.gl/loader-utils';\nimport {Tile3DSubtreeLoader} from '../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\nimport {LOD_METRIC_TYPE, TILE_REFINEMENT, TILE_TYPE} from '@loaders.gl/tiles';\nimport {\n  ImplicitTilingExensionData,\n  Subtree,\n  Tiles3DTileContentJSON,\n  Tiles3DTileJSON,\n  Tiles3DTileJSONPostprocessed,\n  Tiles3DTilesetJSON\n} from '../../types';\nimport type {S2VolumeBox} from './helpers/parse-3d-implicit-tiles';\nimport {parseImplicitTiles, replaceContentUrlTemplate} from './helpers/parse-3d-implicit-tiles';\nimport type {S2VolumeInfo} from '../utils/obb/s2-corners-to-obb';\nimport {convertS2BoundingVolumetoOBB} from '../utils/obb/s2-corners-to-obb';\n\nfunction getTileType(tile: Tiles3DTileJSON, tileContentUrl: string = ''): TILE_TYPE | string {\n  if (!tileContentUrl) {\n    return TILE_TYPE.EMPTY;\n  }\n\n  const contentUrl = tileContentUrl.split('?')[0]; // Discard query string\n  const fileExtension = contentUrl.split('.').pop();\n  switch (fileExtension) {\n    case 'pnts':\n      return TILE_TYPE.POINTCLOUD;\n    case 'i3dm':\n    case 'b3dm':\n    case 'glb':\n    case 'gltf':\n      return TILE_TYPE.SCENEGRAPH;\n    default:\n      return fileExtension || TILE_TYPE.EMPTY;\n  }\n}\n\nfunction getRefine(refine?: string): TILE_REFINEMENT | string | undefined {\n  switch (refine) {\n    case 'REPLACE':\n    case 'replace':\n      return TILE_REFINEMENT.REPLACE;\n    case 'ADD':\n    case 'add':\n      return TILE_REFINEMENT.ADD;\n    default:\n      return refine;\n  }\n}\n\nfunction resolveUri(uri: string = '', basePath: string): string {\n  // url scheme per RFC3986\n  const urlSchemeRegex = /^[a-z][0-9a-z+.-]*:/i;\n\n  if (urlSchemeRegex.test(basePath)) {\n    const url = new URL(uri, `${basePath}/`);\n    return decodeURI(url.toString());\n  } else if (uri.startsWith('/')) {\n    return uri;\n  }\n\n  return `${basePath}/${uri}`;\n}\n\nexport function normalizeTileData(\n  tile: Tiles3DTileJSON | null,\n  basePath: string\n): Tiles3DTileJSONPostprocessed | null {\n  if (!tile) {\n    return null;\n  }\n  let tileContentUrl: string | undefined;\n  if (tile.content) {\n    const contentUri = tile.content.uri || tile.content?.url;\n    tileContentUrl = resolveUri(contentUri, basePath);\n  }\n  const tilePostprocessed: Tiles3DTileJSONPostprocessed = {\n    ...tile,\n    id: tileContentUrl,\n    contentUrl: tileContentUrl,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    lodMetricValue: tile.geometricError,\n    transformMatrix: tile.transform,\n    type: getTileType(tile, tileContentUrl),\n    refine: getRefine(tile.refine)\n  };\n\n  return tilePostprocessed;\n}\n\n// normalize tile headers\nexport async function normalizeTileHeaders(\n  tileset: Tiles3DTilesetJSON,\n  basePath: string,\n  options: LoaderOptions\n): Promise<Tiles3DTileJSONPostprocessed | null> {\n  let root: Tiles3DTileJSONPostprocessed | null = null;\n\n  const rootImplicitTilingExtension = getImplicitTilingExtensionData(tileset.root);\n  if (rootImplicitTilingExtension && tileset.root) {\n    root = await normalizeImplicitTileHeaders(\n      tileset.root,\n      tileset,\n      basePath,\n      rootImplicitTilingExtension,\n      options\n    );\n  } else {\n    root = normalizeTileData(tileset.root, basePath);\n  }\n\n  const stack: any[] = [];\n  stack.push(root);\n\n  while (stack.length > 0) {\n    const tile = stack.pop() || {};\n    const children = tile.children || [];\n    const childrenPostprocessed: Tiles3DTileJSONPostprocessed[] = [];\n    for (const childHeader of children) {\n      const childImplicitTilingExtension = getImplicitTilingExtensionData(childHeader);\n      let childHeaderPostprocessed: Tiles3DTileJSONPostprocessed | null;\n      if (childImplicitTilingExtension) {\n        childHeaderPostprocessed = await normalizeImplicitTileHeaders(\n          childHeader,\n          tileset,\n          basePath,\n          childImplicitTilingExtension,\n          options\n        );\n      } else {\n        childHeaderPostprocessed = normalizeTileData(childHeader, basePath);\n      }\n\n      if (childHeaderPostprocessed) {\n        childrenPostprocessed.push(childHeaderPostprocessed);\n        stack.push(childHeaderPostprocessed);\n      }\n    }\n    tile.children = childrenPostprocessed;\n  }\n\n  return root;\n}\n\n/**\n * Do normalisation of implicit tile headers\n * TODO Check if Tile3D class can be a return type here.\n * @param tileset\n */\nexport async function normalizeImplicitTileHeaders(\n  tile: Tiles3DTileJSON,\n  tileset: Tiles3DTilesetJSON,\n  basePath: string,\n  implicitTilingExtension: ImplicitTilingExensionData,\n  options: Tiles3DLoaderOptions\n): Promise<Tiles3DTileJSONPostprocessed | null> {\n  const {\n    subdivisionScheme,\n    maximumLevel,\n    subtreeLevels,\n    subtrees: {uri: subtreesUriTemplate}\n  } = implicitTilingExtension;\n  const replacedUrlTemplate = replaceContentUrlTemplate(subtreesUriTemplate, 0, 0, 0, 0);\n  const subtreeUrl = resolveUri(replacedUrlTemplate, basePath);\n  const subtree = await load(subtreeUrl, Tile3DSubtreeLoader, options);\n  const contentUrlTemplate = resolveUri(tile.content?.uri, basePath);\n  const refine = tileset?.root?.refine;\n  // @ts-ignore\n  const rootLodMetricValue = tile.geometricError;\n\n  // Replace tile.boundingVolume with the the bounding volume specified by the extensions['3DTILES_bounding_volume_S2']\n  const s2VolumeInfo: S2VolumeInfo = tile.boundingVolume.extensions?.['3DTILES_bounding_volume_S2'];\n  if (s2VolumeInfo) {\n    const box = convertS2BoundingVolumetoOBB(s2VolumeInfo);\n    const s2VolumeBox: S2VolumeBox = {box, s2VolumeInfo};\n    tile.boundingVolume = s2VolumeBox;\n  }\n\n  const rootBoundingVolume = tile.boundingVolume;\n\n  const implicitOptions = {\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    refine,\n    basePath,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    rootLodMetricValue,\n    rootBoundingVolume,\n    getTileType,\n    getRefine\n  };\n\n  return await normalizeImplicitTileData(tile, basePath, subtree, implicitOptions);\n}\n\n/**\n * Do implicit data normalisation to create hierarchical tile structure\n * @param tile\n * @param rootSubtree\n * @param options\n * @returns\n */\nexport async function normalizeImplicitTileData(\n  tile: Tiles3DTileJSON,\n  basePath: string,\n  rootSubtree: Subtree,\n  options: any\n): Promise<Tiles3DTileJSONPostprocessed | null> {\n  if (!tile) {\n    return null;\n  }\n\n  const {children, contentUrl} = await parseImplicitTiles({\n    subtree: rootSubtree,\n    options\n  });\n\n  let tileContentUrl: string | undefined;\n  let tileContent: Tiles3DTileContentJSON | null = null;\n  if (contentUrl) {\n    tileContentUrl = contentUrl;\n    tileContent = {uri: contentUrl.replace(`${basePath}/`, '')};\n  }\n  const tilePostprocessed: Tiles3DTileJSONPostprocessed = {\n    ...tile,\n    id: tileContentUrl,\n    contentUrl: tileContentUrl,\n    lodMetricType: LOD_METRIC_TYPE.GEOMETRIC_ERROR,\n    lodMetricValue: tile.geometricError,\n    transformMatrix: tile.transform,\n    type: getTileType(tile, tileContentUrl),\n    refine: getRefine(tile.refine),\n    content: tileContent || tile.content,\n    children\n  };\n\n  return tilePostprocessed;\n}\n\n/**\n * Implicit Tiling data can be in 3DTILES_implicit_tiling for 3DTiles v.Next or directly in implicitTiling object for 3DTiles v1.1.\n * Spec 3DTiles v.Next - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * Spec 3DTiles v.1.1 - https://github.com/CesiumGS/3d-tiles/tree/draft-1.1/specification/ImplicitTiling\n * @param tile\n * @returns\n */\nfunction getImplicitTilingExtensionData(tile: Tiles3DTileJSON | null): ImplicitTilingExensionData {\n  return tile?.extensions?.['3DTILES_implicit_tiling'] || tile?.implicitTiling;\n}\n"],"mappings":"AAEA,SAAQA,mBAAmB,QAAO,8BAA8B;AAChE,SAAQC,IAAI,QAAO,kBAAkB;AACrC,SAAQC,eAAe,EAAEC,eAAe,EAAEC,SAAS,QAAO,mBAAmB;AAU7E,SAAQC,kBAAkB,EAAEC,yBAAyB,QAAO,mCAAmC;AAE/F,SAAQC,4BAA4B,QAAO,gCAAgC;AAE3E,SAASC,WAAWA,CAACC,IAAqB,EAAmD;EAAA,IAAjDC,cAAsB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACrE,IAAI,CAACD,cAAc,EAAE;IACnB,OAAON,SAAS,CAACU,KAAK;EACxB;EAEA,MAAMC,UAAU,GAAGL,cAAc,CAACM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC/C,MAAMC,aAAa,GAAGF,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAACE,GAAG,CAAC,CAAC;EACjD,QAAQD,aAAa;IACnB,KAAK,MAAM;MACT,OAAOb,SAAS,CAACe,UAAU;IAC7B,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,KAAK;IACV,KAAK,MAAM;MACT,OAAOf,SAAS,CAACgB,UAAU;IAC7B;MACE,OAAOH,aAAa,IAAIb,SAAS,CAACU,KAAK;EAC3C;AACF;AAEA,SAASO,SAASA,CAACC,MAAe,EAAwC;EACxE,QAAQA,MAAM;IACZ,KAAK,SAAS;IACd,KAAK,SAAS;MACZ,OAAOnB,eAAe,CAACoB,OAAO;IAChC,KAAK,KAAK;IACV,KAAK,KAAK;MACR,OAAOpB,eAAe,CAACqB,GAAG;IAC5B;MACE,OAAOF,MAAM;EACjB;AACF;AAEA,SAASG,UAAUA,CAAA,EAA6C;EAAA,IAA5CC,GAAW,GAAAf,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAAA,IAAEgB,QAAgB,GAAAhB,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAEpD,MAAMe,cAAc,GAAG,sBAAsB;EAE7C,IAAIA,cAAc,CAACC,IAAI,CAACF,QAAQ,CAAC,EAAE;IACjC,MAAMG,GAAG,GAAG,IAAIC,GAAG,CAACL,GAAG,KAAAM,MAAA,CAAKL,QAAQ,MAAG,CAAC;IACxC,OAAOM,SAAS,CAACH,GAAG,CAACI,QAAQ,CAAC,CAAC,CAAC;EAClC,CAAC,MAAM,IAAIR,GAAG,CAACS,UAAU,CAAC,GAAG,CAAC,EAAE;IAC9B,OAAOT,GAAG;EACZ;EAEA,UAAAM,MAAA,CAAUL,QAAQ,OAAAK,MAAA,CAAIN,GAAG;AAC3B;AAEA,OAAO,SAASU,iBAAiBA,CAC/B3B,IAA4B,EAC5BkB,QAAgB,EACqB;EACrC,IAAI,CAAClB,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EACA,IAAIC,cAAkC;EACtC,IAAID,IAAI,CAAC4B,OAAO,EAAE;IAAA,IAAAC,aAAA;IAChB,MAAMC,UAAU,GAAG9B,IAAI,CAAC4B,OAAO,CAACX,GAAG,MAAAY,aAAA,GAAI7B,IAAI,CAAC4B,OAAO,cAAAC,aAAA,uBAAZA,aAAA,CAAcR,GAAG;IACxDpB,cAAc,GAAGe,UAAU,CAACc,UAAU,EAAEZ,QAAQ,CAAC;EACnD;EACA,MAAMa,iBAA+C,GAAG;IACtD,GAAG/B,IAAI;IACPgC,EAAE,EAAE/B,cAAc;IAClBK,UAAU,EAAEL,cAAc;IAC1BgC,aAAa,EAAExC,eAAe,CAACyC,eAAe;IAC9CC,cAAc,EAAEnC,IAAI,CAACoC,cAAc;IACnCC,eAAe,EAAErC,IAAI,CAACsC,SAAS;IAC/BC,IAAI,EAAExC,WAAW,CAACC,IAAI,EAAEC,cAAc,CAAC;IACvCY,MAAM,EAAED,SAAS,CAACZ,IAAI,CAACa,MAAM;EAC/B,CAAC;EAED,OAAOkB,iBAAiB;AAC1B;AAGA,OAAO,eAAeS,oBAAoBA,CACxCC,OAA2B,EAC3BvB,QAAgB,EAChBwB,OAAsB,EACwB;EAC9C,IAAIC,IAAyC,GAAG,IAAI;EAEpD,MAAMC,2BAA2B,GAAGC,8BAA8B,CAACJ,OAAO,CAACE,IAAI,CAAC;EAChF,IAAIC,2BAA2B,IAAIH,OAAO,CAACE,IAAI,EAAE;IAC/CA,IAAI,GAAG,MAAMG,4BAA4B,CACvCL,OAAO,CAACE,IAAI,EACZF,OAAO,EACPvB,QAAQ,EACR0B,2BAA2B,EAC3BF,OACF,CAAC;EACH,CAAC,MAAM;IACLC,IAAI,GAAGhB,iBAAiB,CAACc,OAAO,CAACE,IAAI,EAAEzB,QAAQ,CAAC;EAClD;EAEA,MAAM6B,KAAY,GAAG,EAAE;EACvBA,KAAK,CAACC,IAAI,CAACL,IAAI,CAAC;EAEhB,OAAOI,KAAK,CAAC5C,MAAM,GAAG,CAAC,EAAE;IACvB,MAAMH,IAAI,GAAG+C,KAAK,CAACtC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;IAC9B,MAAMwC,QAAQ,GAAGjD,IAAI,CAACiD,QAAQ,IAAI,EAAE;IACpC,MAAMC,qBAAqD,GAAG,EAAE;IAChE,KAAK,MAAMC,WAAW,IAAIF,QAAQ,EAAE;MAClC,MAAMG,4BAA4B,GAAGP,8BAA8B,CAACM,WAAW,CAAC;MAChF,IAAIE,wBAA6D;MACjE,IAAID,4BAA4B,EAAE;QAChCC,wBAAwB,GAAG,MAAMP,4BAA4B,CAC3DK,WAAW,EACXV,OAAO,EACPvB,QAAQ,EACRkC,4BAA4B,EAC5BV,OACF,CAAC;MACH,CAAC,MAAM;QACLW,wBAAwB,GAAG1B,iBAAiB,CAACwB,WAAW,EAAEjC,QAAQ,CAAC;MACrE;MAEA,IAAImC,wBAAwB,EAAE;QAC5BH,qBAAqB,CAACF,IAAI,CAACK,wBAAwB,CAAC;QACpDN,KAAK,CAACC,IAAI,CAACK,wBAAwB,CAAC;MACtC;IACF;IACArD,IAAI,CAACiD,QAAQ,GAAGC,qBAAqB;EACvC;EAEA,OAAOP,IAAI;AACb;AAOA,OAAO,eAAeG,4BAA4BA,CAChD9C,IAAqB,EACrByC,OAA2B,EAC3BvB,QAAgB,EAChBoC,uBAAmD,EACnDZ,OAA6B,EACiB;EAAA,IAAAa,cAAA,EAAAC,aAAA,EAAAC,qBAAA;EAC9C,MAAM;IACJC,iBAAiB;IACjBC,YAAY;IACZC,aAAa;IACbC,QAAQ,EAAE;MAAC5C,GAAG,EAAE6C;IAAmB;EACrC,CAAC,GAAGR,uBAAuB;EAC3B,MAAMS,mBAAmB,GAAGlE,yBAAyB,CAACiE,mBAAmB,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACtF,MAAME,UAAU,GAAGhD,UAAU,CAAC+C,mBAAmB,EAAE7C,QAAQ,CAAC;EAC5D,MAAM+C,OAAO,GAAG,MAAMzE,IAAI,CAACwE,UAAU,EAAEzE,mBAAmB,EAAEmD,OAAO,CAAC;EACpE,MAAMwB,kBAAkB,GAAGlD,UAAU,EAAAuC,cAAA,GAACvD,IAAI,CAAC4B,OAAO,cAAA2B,cAAA,uBAAZA,cAAA,CAActC,GAAG,EAAEC,QAAQ,CAAC;EAClE,MAAML,MAAM,GAAG4B,OAAO,aAAPA,OAAO,wBAAAe,aAAA,GAAPf,OAAO,CAAEE,IAAI,cAAAa,aAAA,uBAAbA,aAAA,CAAe3C,MAAM;EAEpC,MAAMsD,kBAAkB,GAAGnE,IAAI,CAACoC,cAAc;EAG9C,MAAMgC,YAA0B,IAAAX,qBAAA,GAAGzD,IAAI,CAACqE,cAAc,CAACC,UAAU,cAAAb,qBAAA,uBAA9BA,qBAAA,CAAiC,4BAA4B,CAAC;EACjG,IAAIW,YAAY,EAAE;IAChB,MAAMG,GAAG,GAAGzE,4BAA4B,CAACsE,YAAY,CAAC;IACtD,MAAMI,WAAwB,GAAG;MAACD,GAAG;MAAEH;IAAY,CAAC;IACpDpE,IAAI,CAACqE,cAAc,GAAGG,WAAW;EACnC;EAEA,MAAMC,kBAAkB,GAAGzE,IAAI,CAACqE,cAAc;EAE9C,MAAMK,eAAe,GAAG;IACtBR,kBAAkB;IAClBJ,mBAAmB;IACnBJ,iBAAiB;IACjBE,aAAa;IACbD,YAAY;IACZ9C,MAAM;IACNK,QAAQ;IACRe,aAAa,EAAExC,eAAe,CAACyC,eAAe;IAC9CiC,kBAAkB;IAClBM,kBAAkB;IAClB1E,WAAW;IACXa;EACF,CAAC;EAED,OAAO,MAAM+D,yBAAyB,CAAC3E,IAAI,EAAEkB,QAAQ,EAAE+C,OAAO,EAAES,eAAe,CAAC;AAClF;AASA,OAAO,eAAeC,yBAAyBA,CAC7C3E,IAAqB,EACrBkB,QAAgB,EAChB0D,WAAoB,EACpBlC,OAAY,EACkC;EAC9C,IAAI,CAAC1C,IAAI,EAAE;IACT,OAAO,IAAI;EACb;EAEA,MAAM;IAACiD,QAAQ;IAAE3C;EAAU,CAAC,GAAG,MAAMV,kBAAkB,CAAC;IACtDqE,OAAO,EAAEW,WAAW;IACpBlC;EACF,CAAC,CAAC;EAEF,IAAIzC,cAAkC;EACtC,IAAI4E,WAA0C,GAAG,IAAI;EACrD,IAAIvE,UAAU,EAAE;IACdL,cAAc,GAAGK,UAAU;IAC3BuE,WAAW,GAAG;MAAC5D,GAAG,EAAEX,UAAU,CAACwE,OAAO,IAAAvD,MAAA,CAAIL,QAAQ,QAAK,EAAE;IAAC,CAAC;EAC7D;EACA,MAAMa,iBAA+C,GAAG;IACtD,GAAG/B,IAAI;IACPgC,EAAE,EAAE/B,cAAc;IAClBK,UAAU,EAAEL,cAAc;IAC1BgC,aAAa,EAAExC,eAAe,CAACyC,eAAe;IAC9CC,cAAc,EAAEnC,IAAI,CAACoC,cAAc;IACnCC,eAAe,EAAErC,IAAI,CAACsC,SAAS;IAC/BC,IAAI,EAAExC,WAAW,CAACC,IAAI,EAAEC,cAAc,CAAC;IACvCY,MAAM,EAAED,SAAS,CAACZ,IAAI,CAACa,MAAM,CAAC;IAC9Be,OAAO,EAAEiD,WAAW,IAAI7E,IAAI,CAAC4B,OAAO;IACpCqB;EACF,CAAC;EAED,OAAOlB,iBAAiB;AAC1B;AASA,SAASc,8BAA8BA,CAAC7C,IAA4B,EAA8B;EAAA,IAAA+E,gBAAA;EAChG,OAAO,CAAA/E,IAAI,aAAJA,IAAI,wBAAA+E,gBAAA,GAAJ/E,IAAI,CAAEsE,UAAU,cAAAS,gBAAA,uBAAhBA,gBAAA,CAAmB,yBAAyB,CAAC,MAAI/E,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEgF,cAAc;AAC9E"}