{"version":3,"file":"parse-3d-tile-gltf.js","names":["_getMemoryUsageGLTF","GLTFLoader","postProcessGLTF","parseGltf3DTile","tile","arrayBuffer","options","context","rotateYtoZ","gltfUpAxis","assetGltfUpAxis","parse","gltfWithBuffers","gltf","gpuMemoryUsageInBytes"],"sources":["../../../../src/lib/parsers/parse-3d-tile-gltf.ts"],"sourcesContent":["import type {LoaderContext} from '@loaders.gl/loader-utils';\nimport type {Tiles3DLoaderOptions} from '../../tiles-3d-loader';\nimport {_getMemoryUsageGLTF, GLTFLoader, postProcessGLTF} from '@loaders.gl/gltf';\n\nexport async function parseGltf3DTile(\n  tile,\n  arrayBuffer: ArrayBuffer,\n  options: Tiles3DLoaderOptions,\n  context: LoaderContext\n): Promise<void> {\n  // Set flags\n  // glTF models need to be rotated from Y to Z up\n  // https://github.com/AnalyticalGraphicsInc/3d-tiles/tree/master/specification#y-up-to-z-up\n  tile.rotateYtoZ = true;\n  // Save gltf up axis\n  tile.gltfUpAxis =\n    options['3d-tiles'] && options['3d-tiles'].assetGltfUpAxis\n      ? options['3d-tiles'].assetGltfUpAxis\n      : 'Y';\n\n  const {parse} = context;\n  const gltfWithBuffers = await parse(arrayBuffer, GLTFLoader, options, context);\n  tile.gltf = postProcessGLTF(gltfWithBuffers);\n  tile.gpuMemoryUsageInBytes = _getMemoryUsageGLTF(tile.gltf);\n}\n"],"mappings":"AAEA,SAAQA,mBAAmB,EAAEC,UAAU,EAAEC,eAAe,QAAO,kBAAkB;AAEjF,OAAO,eAAeC,eAAeA,CACnCC,IAAI,EACJC,WAAwB,EACxBC,OAA6B,EAC7BC,OAAsB,EACP;EAIfH,IAAI,CAACI,UAAU,GAAG,IAAI;EAEtBJ,IAAI,CAACK,UAAU,GACbH,OAAO,CAAC,UAAU,CAAC,IAAIA,OAAO,CAAC,UAAU,CAAC,CAACI,eAAe,GACtDJ,OAAO,CAAC,UAAU,CAAC,CAACI,eAAe,GACnC,GAAG;EAET,MAAM;IAACC;EAAK,CAAC,GAAGJ,OAAO;EACvB,MAAMK,eAAe,GAAG,MAAMD,KAAK,CAACN,WAAW,EAAEJ,UAAU,EAAEK,OAAO,EAAEC,OAAO,CAAC;EAC9EH,IAAI,CAACS,IAAI,GAAGX,eAAe,CAACU,eAAe,CAAC;EAC5CR,IAAI,CAACU,qBAAqB,GAAGd,mBAAmB,CAACI,IAAI,CAACS,IAAI,CAAC;AAC7D"}