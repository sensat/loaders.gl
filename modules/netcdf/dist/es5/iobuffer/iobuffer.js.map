{"version":3,"file":"iobuffer.js","names":["DEFAULT_BYTE_LENGTH","IOBuffer","data","arguments","length","undefined","options","_classCallCheck2","default","_defineProperty2","TextDecoder","TextEncoder","dataIsGiven","ArrayBuffer","lastWrittenByte","byteLength","offset","dvOffset","isView","buffer","byteOffset","littleEndian","_data","DataView","_mark","_marks","_createClass2","key","value","available","isLittleEndian","setLittleEndian","isBigEndian","setBigEndian","skip","n","seek","mark","reset","pushMark","push","popMark","pop","Error","rewind","ensureAvailable","lengthNeeded","newLength","newArray","Uint8Array","set","readBoolean","readUint8","readInt8","getInt8","getUint8","readByte","readBytes","bytes","i","readInt16","getInt16","readUint16","getUint16","readInt32","getInt32","readUint32","getUint32","readFloat32","getFloat32","readFloat64","getFloat64","readChar","String","fromCharCode","readChars","result","readUtf8","textDecoder","decode","writeBoolean","writeUint8","writeInt8","setInt8","_updateLastWrittenByte","setUint8","writeByte","writeBytes","writeInt16","setInt16","writeUint16","setUint16","writeInt32","setInt32","writeUint32","setUint32","writeFloat32","setFloat32","writeFloat64","setFloat64","writeChar","str","charCodeAt","writeChars","writeUtf8","textEncoder","encode","toArray","exports"],"sources":["../../../src/iobuffer/iobuffer.ts"],"sourcesContent":["const DEFAULT_BYTE_LENGTH = 1024 * 8;\n\ntype InputData = number | ArrayBufferLike | ArrayBufferView | IOBuffer | Buffer;\n\ninterface IOBufferOptions {\n  /**\n   * Ignore the first n bytes of the ArrayBuffer.\n   */\n  offset?: number;\n}\n\nexport class IOBuffer {\n  /**\n   * Reference to the internal ArrayBuffer object.\n   */\n  public buffer: ArrayBufferLike;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public byteLength: number;\n\n  /**\n   * Byte offset of the internal ArrayBuffer.\n   */\n  public byteOffset: number;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public length: number;\n\n  /**\n   * The current offset of the buffer's pointer.\n   */\n  public offset: number;\n\n  private lastWrittenByte: number;\n  private littleEndian: boolean;\n\n  private _data: DataView;\n  private _mark: number;\n  private _marks: number[];\n\n  private textDecoder = new TextDecoder();\n  private textEncoder = new TextEncoder();\n\n  /**\n   * @param data - The data to construct the IOBuffer with.\n   * If data is a number, it will be the new buffer's length<br>\n   * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n   * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n   * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n   * @param options\n   */\n  public constructor(data: InputData = DEFAULT_BYTE_LENGTH, options: IOBufferOptions = {}) {\n    let dataIsGiven = false;\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    } else {\n      dataIsGiven = true;\n      this.lastWrittenByte = data.byteLength;\n    }\n\n    const offset = options.offset ? options.offset >>> 0 : 0;\n    const byteLength = data.byteLength - offset;\n    let dvOffset = offset;\n    if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n      if (data.byteLength !== data.buffer.byteLength) {\n        dvOffset = data.byteOffset + offset;\n      }\n      data = data.buffer;\n    }\n    if (dataIsGiven) {\n      this.lastWrittenByte = byteLength;\n    } else {\n      this.lastWrittenByte = 0;\n    }\n    this.buffer = data;\n    this.length = byteLength;\n    this.byteLength = byteLength;\n    this.byteOffset = dvOffset;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer, dvOffset, byteLength);\n    this._mark = 0;\n    this._marks = [];\n  }\n\n  /**\n   * Checks if the memory allocated to the buffer is sufficient to store more\n   * bytes after the offset.\n   * @param byteLength - The needed memory in bytes.\n   * @returns `true` if there is sufficient space and `false` otherwise.\n   */\n  public available(byteLength = 1): boolean {\n    return this.offset + byteLength <= this.length;\n  }\n\n  /**\n   * Check if little-endian mode is used for reading and writing multi-byte\n   * values.\n   * @returns `true` if little-endian mode is used, `false` otherwise.\n   */\n  public isLittleEndian(): boolean {\n    return this.littleEndian;\n  }\n\n  /**\n   * Set little-endian mode for reading and writing multi-byte values.\n   */\n  public setLittleEndian(): this {\n    this.littleEndian = true;\n    return this;\n  }\n\n  /**\n   * Check if big-endian mode is used for reading and writing multi-byte values.\n   * @returns `true` if big-endian mode is used, `false` otherwise.\n   */\n  public isBigEndian(): boolean {\n    return !this.littleEndian;\n  }\n\n  /**\n   * Switches to big-endian mode for reading and writing multi-byte values.\n   */\n  public setBigEndian(): this {\n    this.littleEndian = false;\n    return this;\n  }\n\n  /**\n   * Move the pointer n bytes forward.\n   * @param n - Number of bytes to skip.\n   */\n  public skip(n = 1): this {\n    this.offset += n;\n    return this;\n  }\n\n  /**\n   * Move the pointer to the given offset.\n   * @param offset\n   */\n  public seek(offset: number): this {\n    this.offset = offset;\n    return this;\n  }\n\n  /**\n   * Store the current pointer offset.\n   * @see {@link IOBuffer#reset}\n   */\n  public mark(): this {\n    this._mark = this.offset;\n    return this;\n  }\n\n  /**\n   * Move the pointer back to the last pointer offset set by mark.\n   * @see {@link IOBuffer#mark}\n   */\n  public reset(): this {\n    this.offset = this._mark;\n    return this;\n  }\n\n  /**\n   * Push the current pointer offset to the mark stack.\n   * @see {@link IOBuffer#popMark}\n   */\n  public pushMark(): this {\n    this._marks.push(this.offset);\n    return this;\n  }\n\n  /**\n   * Pop the last pointer offset from the mark stack, and set the current\n   * pointer offset to the popped value.\n   * @see {@link IOBuffer#pushMark}\n   */\n  public popMark(): this {\n    const offset = this._marks.pop();\n    if (offset === undefined) {\n      throw new Error('Mark stack empty');\n    }\n    this.seek(offset);\n    return this;\n  }\n\n  /**\n   * Move the pointer offset back to 0.\n   */\n  public rewind(): this {\n    this.offset = 0;\n    return this;\n  }\n\n  /**\n   * Make sure the buffer has sufficient memory to write a given byteLength at\n   * the current pointer offset.\n   * If the buffer's memory is insufficient, this method will create a new\n   * buffer (a copy) with a length that is twice (byteLength + current offset).\n   * @param byteLength\n   */\n  public ensureAvailable(byteLength = 1): this {\n    if (!this.available(byteLength)) {\n      const lengthNeeded = this.offset + byteLength;\n      const newLength = lengthNeeded * 2;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = this.byteLength = newLength;\n      this._data = new DataView(this.buffer);\n    }\n    return this;\n  }\n\n  /**\n   * Read a byte and return false if the byte's value is 0, or true otherwise.\n   * Moves pointer forward by one byte.\n   */\n  public readBoolean(): boolean {\n    return this.readUint8() !== 0;\n  }\n\n  /**\n   * Read a signed 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readInt8(): number {\n    return this._data.getInt8(this.offset++);\n  }\n\n  /**\n   * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readUint8(): number {\n    return this._data.getUint8(this.offset++);\n  }\n\n  /**\n   * Alias for {@link IOBuffer#readUint8}.\n   */\n  public readByte(): number {\n    return this.readUint8();\n  }\n\n  /**\n   * Read `n` bytes and move pointer forward by `n` bytes.\n   */\n  public readBytes(n = 1): Uint8Array {\n    const bytes = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n    return bytes;\n  }\n\n  /**\n   * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n   */\n  public readInt16(): number {\n    const value = this._data.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n   */\n  public readUint16(): number {\n    const value = this._data.getUint16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n   */\n  public readInt32(): number {\n    const value = this._data.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n   */\n  public readUint32(): number {\n    const value = this._data.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit floating number and move pointer forward by 4 bytes.\n   */\n  public readFloat32(): number {\n    const value = this._data.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 64-bit floating number and move pointer forward by 8 bytes.\n   */\n  public readFloat64(): number {\n    const value = this._data.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n   */\n  public readChar(): string {\n    return String.fromCharCode(this.readInt8());\n  }\n\n  /**\n   * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n   */\n  public readChars(n = 1): string {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      result += this.readChar();\n    }\n    return result;\n  }\n\n  /**\n   * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n   * forward by `n` bytes.\n   */\n  public readUtf8(n = 1): string {\n    return this.textDecoder.decode(this.readBytes(n));\n  }\n\n  /**\n   * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n   * forward by 1 byte.\n   */\n  public writeBoolean(value: unknown): this {\n    this.writeUint8(value ? 0xff : 0x00);\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n   */\n  public writeInt8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setInt8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n   * byte.\n   */\n  public writeUint8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setUint8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * An alias for {@link IOBuffer#writeUint8}.\n   */\n  public writeByte(value: number): this {\n    return this.writeUint8(value);\n  }\n\n  /**\n   * Write all elements of `bytes` as uint8 values and move pointer forward by\n   * `bytes.length` bytes.\n   */\n  public writeBytes(bytes: ArrayLike<number>): this {\n    this.ensureAvailable(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit signed integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeInt16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setInt16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeUint16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setUint16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit signed integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeInt32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setInt32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeUint32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setUint32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit floating number and move pointer forward by 4\n   * bytes.\n   */\n  public writeFloat32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 64-bit floating number and move pointer forward by 8\n   * bytes.\n   */\n  public writeFloat64(value: number): this {\n    this.ensureAvailable(8);\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n    this.offset += 8;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n   * and move pointer forward by 1 byte.\n   */\n  public writeChar(str: string): this {\n    return this.writeUint8(str.charCodeAt(0));\n  }\n\n  /**\n   * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n   * and move pointer forward by `str.length` bytes.\n   */\n  public writeChars(str: string): this {\n    for (let i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n    return this;\n  }\n\n  /**\n   * UTF-8 encode and write `str` to the current pointer offset and move pointer\n   * forward according to the encoded length.\n   */\n  public writeUtf8(str: string): this {\n    const bytes = this.textEncoder.encode(str);\n    return this.writeBytes(bytes);\n  }\n\n  /**\n   * Export a Uint8Array view of the internal buffer.\n   * The view starts at the byte offset and its length\n   * is calculated to stop at the last written byte or the original length.\n   */\n  public toArray(): Uint8Array {\n    return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n  }\n\n  /**\n   * Update the last written byte offset\n   * @private\n   */\n  private _updateLastWrittenByte(): void {\n    if (this.offset > this.lastWrittenByte) {\n      this.lastWrittenByte = this.offset;\n    }\n  }\n}\n"],"mappings":"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"}