{"version":3,"file":"read-type.js","names":["TYPES","BYTE","CHAR","SHORT","INT","FLOAT","DOUBLE","exports","readType","buffer","type","size","readBytes","trimNull","readChars","readNumber","readInt16","bind","readInt32","readFloat32","readFloat64","Error","concat","num2str","Number","num2bytes","str2num","String","bufferReader","numbers","Array","i","value","charCodeAt","length","substring"],"sources":["../../../src/netcdfjs/read-type.ts"],"sourcesContent":["import {IOBuffer} from '../iobuffer/iobuffer';\n\nexport const TYPES = {\n  BYTE: 1,\n  CHAR: 2,\n  SHORT: 3,\n  INT: 4,\n  FLOAT: 5,\n  DOUBLE: 6\n};\n\n/**\n * Given a type and a size reads the next element\n * @param buffer - Buffer for the file data\n * @param type - Type of the data to read\n * @param size - Size of the element to read\n * @return\n */\nexport function readType(\n  buffer: IOBuffer,\n  type: number,\n  size: number\n): string | number | number[] | Uint8Array {\n  switch (type) {\n    case TYPES.BYTE:\n      return buffer.readBytes(size);\n    case TYPES.CHAR:\n      return trimNull(buffer.readChars(size));\n    case TYPES.SHORT:\n      return readNumber(size, buffer.readInt16.bind(buffer));\n    case TYPES.INT:\n      return readNumber(size, buffer.readInt32.bind(buffer));\n    case TYPES.FLOAT:\n      return readNumber(size, buffer.readFloat32.bind(buffer));\n    case TYPES.DOUBLE:\n      return readNumber(size, buffer.readFloat64.bind(buffer));\n    /* istanbul ignore next */\n    default:\n      throw new Error(`NetCDF: non valid type ${type}`);\n  }\n}\n\n/**\n * Parse a number into their respective type\n * @param type - integer that represents the type\n * @return parsed value of the type\n */\nexport function num2str(type: number): string {\n  switch (Number(type)) {\n    case TYPES.BYTE:\n      return 'byte';\n    case TYPES.CHAR:\n      return 'char';\n    case TYPES.SHORT:\n      return 'short';\n    case TYPES.INT:\n      return 'int';\n    case TYPES.FLOAT:\n      return 'float';\n    case TYPES.DOUBLE:\n      return 'double';\n    /* istanbul ignore next */\n    default:\n      return 'undefined';\n  }\n}\n\n/**\n * Parse a number type identifier to his size in bytes\n * @param type - integer that represents the type\n * @return size of the type\n */\nexport function num2bytes(type: number): number {\n  switch (Number(type)) {\n    case TYPES.BYTE:\n      return 1;\n    case TYPES.CHAR:\n      return 1;\n    case TYPES.SHORT:\n      return 2;\n    case TYPES.INT:\n      return 4;\n    case TYPES.FLOAT:\n      return 4;\n    case TYPES.DOUBLE:\n      return 8;\n    /* istanbul ignore next */\n    default:\n      return -1;\n  }\n}\n\n/**\n * Reverse search of num2str\n * @param type string that represents the type\n * @return parsed value of the type\n */\nexport function str2num(type: string): number {\n  switch (String(type)) {\n    case 'byte':\n      return TYPES.BYTE;\n    case 'char':\n      return TYPES.CHAR;\n    case 'short':\n      return TYPES.SHORT;\n    case 'int':\n      return TYPES.INT;\n    case 'float':\n      return TYPES.FLOAT;\n    case 'double':\n      return TYPES.DOUBLE;\n    /* istanbul ignore next */\n    default:\n      return -1;\n  }\n}\n\n/**\n * Auxiliary function to read numeric data\n * @param size - Size of the element to read\n * @param bufferReader - Function to read next value\n * @return\n */\nfunction readNumber(size: number, bufferReader: () => number): number | number[] {\n  if (size !== 1) {\n    const numbers = new Array(size);\n    for (let i = 0; i < size; i++) {\n      numbers[i] = bufferReader();\n    }\n    return numbers;\n  }\n  return bufferReader();\n}\n\n/**\n * Removes null terminate value\n * @param value - String to trim\n * @return - Trimmed string\n */\nfunction trimNull(value: string): string {\n  if (value.charCodeAt(value.length - 1) === 0) {\n    return value.substring(0, value.length - 1);\n  }\n  return value;\n}\n"],"mappings":"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"}