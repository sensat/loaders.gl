{"version":3,"file":"netcdf-reader.js","names":["_iobuffer","require","_readHeader","_readData","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","NetCDFReader","data","_classCallCheck2","default","_defineProperty2","buffer","IOBuffer","setBigEndian","magic","readChars","Error","concat","version","readByte","header","readNetCDFHeader","_createClass2","key","get","recordDimension","dimensions","attributes","variables","attributeExists","attributeName","attribute","find","val","undefined","getAttribute","dataVariableExists","variableName","variable","getDataVariableAsString","getDataVariable","join","seek","offset","record","readRecord","readNonRecord","result","push","_iterator","_step","dimension","padEnd","size","_iterator2","_step2","JSON","parse","stringify","_iterator3","_step3","substring","isNaN","exports"],"sources":["../../../src/netcdfjs/netcdf-reader.ts"],"sourcesContent":["import {IOBuffer} from '../iobuffer/iobuffer';\nimport type {\n  NetCDFHeader,\n  NetCDFDimension,\n  NetCDFRecordDimension,\n  NetCDFAttribute,\n  NetCDFVariable\n} from './netcdf-types';\nimport {readNetCDFHeader} from './read-header';\nimport {readRecord, readNonRecord} from './read-data';\n\n/**\n * Reads a NetCDF v3.x file\n * https://www.unidata.ucar.edu/software/netcdf/docs/file_format_specifications.html\n * @param {ArrayBuffer} data - ArrayBuffer or any Typed Array (including Node.js' Buffer from v4) with the data\n * @constructor\n */\nexport class NetCDFReader {\n  public header: NetCDFHeader;\n  public buffer: IOBuffer;\n\n  constructor(data) {\n    const buffer = new IOBuffer(data);\n    buffer.setBigEndian();\n\n    // Validate that it's a NetCDF file\n    const magic = buffer.readChars(3);\n    if (magic !== 'CDF') {\n      throw new Error(`NetCDF: file should start with 'CDF', found ${magic}`);\n    }\n\n    // Check the NetCDF format\n    const version = buffer.readByte();\n    if (version > 2) {\n      throw new Error(`NetCDF: unsupported version ${version}`);\n    }\n\n    // Read the header\n    this.header = readNetCDFHeader(buffer, version);\n    this.buffer = buffer;\n  }\n\n  /**\n   * @return {string} - Version for the NetCDF format\n   */\n  get version() {\n    if (this.header.version === 1) {\n      return 'classic format';\n    }\n    return '64-bit offset format';\n  }\n\n  /**\n   * Get metadata for the record dimension\n   */\n  get recordDimension(): NetCDFRecordDimension {\n    return this.header.recordDimension;\n  }\n\n  /**\n   * Get list of dimensions (each with `name` and `size`)\n   */\n  get dimensions(): NetCDFDimension[] {\n    return this.header.dimensions;\n  }\n\n  /**\n   * Get list of global attributes with:\n   *  * `name`: String with the name of the attribute\n   *  * `type`: String with the type of the attribute\n   *  * `value`: A number or string with the value of the attribute\n   */\n  get attributes(): NetCDFAttribute[] {\n    return this.header.attributes;\n  }\n\n  /**\n   * Get list of variables\n   */\n  get variables(): NetCDFVariable[] {\n    return this.header.variables;\n  }\n\n  /**\n   * Check if an attribute exists\n   * @param attributeName - Name of the attribute to find\n   * @return\n   */\n  attributeExists(attributeName: string): boolean {\n    const attribute = this.attributes.find((val) => val.name === attributeName);\n    return attribute !== undefined;\n  }\n\n  /**\n   * Returns the value of an attribute\n   * @param attributeName\n   * @return Value of the attributeName or null\n   */\n  getAttribute(attributeName: string): string | null {\n    const attribute = this.attributes.find((val) => val.name === attributeName);\n    if (attribute) return attribute.value;\n    return null;\n  }\n\n  /**\n   * Check if a dataVariable exists\n   * @param variableName - Name of the variable to find\n   * @return\n   */\n  dataVariableExists(variableName: string): boolean {\n    const variable = this.header.variables.find(function (val) {\n      return val.name === variableName;\n    });\n    return variable !== undefined;\n  }\n\n  /**\n   * Returns the value of a variable as a string\n   * @param variableName\n   * @return Value of the variable as a string or null\n   */\n  getDataVariableAsString(variableName: string): string | null {\n    const variable = this.getDataVariable(variableName);\n    if (variable) return variable.join('');\n    return null;\n  }\n\n  /**\n   * Retrieves the data for a given variable\n   * @param variableName - Name of the variable to search or variable object\n   * @return List with the variable values\n   */\n  getDataVariable(variableName: string | object): any[] {\n    let variable;\n    if (typeof variableName === 'string') {\n      // search the variable\n      variable = this.header.variables.find(function (val) {\n        return val.name === variableName;\n      });\n    } else {\n      variable = variableName;\n    }\n\n    // throws if variable not found\n    if (variable === undefined) {\n      throw new Error(`NetCDF: variable not found: ${variableName}`);\n    }\n\n    // go to the offset position\n    this.buffer.seek(variable.offset);\n\n    if (variable.record) {\n      // record variable case\n      return readRecord(this.buffer, variable, this.header.recordDimension);\n    }\n    // non-record variable case\n    return readNonRecord(this.buffer, variable);\n  }\n\n  toString(): string {\n    const result: string[] = [];\n\n    result.push('DIMENSIONS');\n    for (const dimension of this.dimensions) {\n      result.push(`  ${dimension.name.padEnd(30)} = size: ${dimension.size}`);\n    }\n\n    result.push('');\n    result.push('GLOBAL ATTRIBUTES');\n    for (const attribute of this.attributes) {\n      result.push(`  ${attribute.name.padEnd(30)} = ${attribute.value}`);\n    }\n\n    const variables = JSON.parse(JSON.stringify(this.variables));\n    result.push('');\n    result.push('VARIABLES:');\n    for (const variable of variables) {\n      variable.value = this.getDataVariable(variable);\n      let stringify = JSON.stringify(variable.value);\n      if (stringify.length > 50) stringify = stringify.substring(0, 50);\n      if (!isNaN(variable.value.length)) {\n        stringify += ` (length: ${variable.value.length})`;\n      }\n      result.push(`  ${variable.name.padEnd(30)} = ${stringify}`);\n    }\n    return result.join('\\n');\n  }\n}\n"],"mappings":";;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAQA,IAAAC,WAAA,GAAAD,OAAA;AACA,IAAAE,SAAA,GAAAF,OAAA;AAAsD,SAAAG,2BAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAC,MAAA,oBAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,qBAAAE,EAAA,QAAAG,KAAA,CAAAC,OAAA,CAAAN,CAAA,MAAAE,EAAA,GAAAK,2BAAA,CAAAP,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAQ,MAAA,qBAAAN,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAO,CAAA,UAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,QAAAH,CAAA,IAAAT,CAAA,CAAAQ,MAAA,WAAAK,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAd,CAAA,CAAAS,CAAA,UAAAM,CAAA,WAAAA,EAAAC,EAAA,UAAAA,EAAA,KAAAC,CAAA,EAAAP,CAAA,gBAAAQ,SAAA,iJAAAC,gBAAA,SAAAC,MAAA,UAAAC,GAAA,WAAAV,CAAA,WAAAA,EAAA,IAAAT,EAAA,GAAAA,EAAA,CAAAoB,IAAA,CAAAtB,CAAA,MAAAY,CAAA,WAAAA,EAAA,QAAAW,IAAA,GAAArB,EAAA,CAAAsB,IAAA,IAAAL,gBAAA,GAAAI,IAAA,CAAAV,IAAA,SAAAU,IAAA,KAAAR,CAAA,WAAAA,EAAAU,GAAA,IAAAL,MAAA,SAAAC,GAAA,GAAAI,GAAA,KAAAR,CAAA,WAAAA,EAAA,eAAAE,gBAAA,IAAAjB,EAAA,CAAAwB,MAAA,UAAAxB,EAAA,CAAAwB,MAAA,oBAAAN,MAAA,QAAAC,GAAA;AAAA,SAAAd,4BAAAP,CAAA,EAAA2B,MAAA,SAAA3B,CAAA,qBAAAA,CAAA,sBAAA4B,iBAAA,CAAA5B,CAAA,EAAA2B,MAAA,OAAAf,CAAA,GAAAiB,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAT,IAAA,CAAAtB,CAAA,EAAAgC,KAAA,aAAApB,CAAA,iBAAAZ,CAAA,CAAAiC,WAAA,EAAArB,CAAA,GAAAZ,CAAA,CAAAiC,WAAA,CAAAC,IAAA,MAAAtB,CAAA,cAAAA,CAAA,mBAAAP,KAAA,CAAA8B,IAAA,CAAAnC,CAAA,OAAAY,CAAA,+DAAAwB,IAAA,CAAAxB,CAAA,UAAAgB,iBAAA,CAAA5B,CAAA,EAAA2B,MAAA;AAAA,SAAAC,kBAAAS,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAA7B,MAAA,EAAA8B,GAAA,GAAAD,GAAA,CAAA7B,MAAA,WAAAC,CAAA,MAAA8B,IAAA,OAAAlC,KAAA,CAAAiC,GAAA,GAAA7B,CAAA,GAAA6B,GAAA,EAAA7B,CAAA,IAAA8B,IAAA,CAAA9B,CAAA,IAAA4B,GAAA,CAAA5B,CAAA,UAAA8B,IAAA;AAAA,IAQzCC,YAAY;EAIvB,SAAAA,aAAYC,IAAI,EAAE;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAH,YAAA;IAAA,IAAAI,gBAAA,CAAAD,OAAA;IAAA,IAAAC,gBAAA,CAAAD,OAAA;IAChB,IAAME,MAAM,GAAG,IAAIC,kBAAQ,CAACL,IAAI,CAAC;IACjCI,MAAM,CAACE,YAAY,CAAC,CAAC;IAGrB,IAAMC,KAAK,GAAGH,MAAM,CAACI,SAAS,CAAC,CAAC,CAAC;IACjC,IAAID,KAAK,KAAK,KAAK,EAAE;MACnB,MAAM,IAAIE,KAAK,gDAAAC,MAAA,CAAgDH,KAAK,CAAE,CAAC;IACzE;IAGA,IAAMI,OAAO,GAAGP,MAAM,CAACQ,QAAQ,CAAC,CAAC;IACjC,IAAID,OAAO,GAAG,CAAC,EAAE;MACf,MAAM,IAAIF,KAAK,gCAAAC,MAAA,CAAgCC,OAAO,CAAE,CAAC;IAC3D;IAGA,IAAI,CAACE,MAAM,GAAG,IAAAC,4BAAgB,EAACV,MAAM,EAAEO,OAAO,CAAC;IAC/C,IAAI,CAACP,MAAM,GAAGA,MAAM;EACtB;EAAC,IAAAW,aAAA,CAAAb,OAAA,EAAAH,YAAA;IAAAiB,GAAA;IAAAC,GAAA,EAKD,SAAAA,IAAA,EAAc;MACZ,IAAI,IAAI,CAACJ,MAAM,CAACF,OAAO,KAAK,CAAC,EAAE;QAC7B,OAAO,gBAAgB;MACzB;MACA,OAAO,sBAAsB;IAC/B;EAAC;IAAAK,GAAA;IAAAC,GAAA,EAKD,SAAAA,IAAA,EAA6C;MAC3C,OAAO,IAAI,CAACJ,MAAM,CAACK,eAAe;IACpC;EAAC;IAAAF,GAAA;IAAAC,GAAA,EAKD,SAAAA,IAAA,EAAoC;MAClC,OAAO,IAAI,CAACJ,MAAM,CAACM,UAAU;IAC/B;EAAC;IAAAH,GAAA;IAAAC,GAAA,EAQD,SAAAA,IAAA,EAAoC;MAClC,OAAO,IAAI,CAACJ,MAAM,CAACO,UAAU;IAC/B;EAAC;IAAAJ,GAAA;IAAAC,GAAA,EAKD,SAAAA,IAAA,EAAkC;MAChC,OAAO,IAAI,CAACJ,MAAM,CAACQ,SAAS;IAC9B;EAAC;IAAAL,GAAA;IAAA3C,KAAA,EAOD,SAAAiD,gBAAgBC,aAAqB,EAAW;MAC9C,IAAMC,SAAS,GAAG,IAAI,CAACJ,UAAU,CAACK,IAAI,CAAC,UAACC,GAAG;QAAA,OAAKA,GAAG,CAACjC,IAAI,KAAK8B,aAAa;MAAA,EAAC;MAC3E,OAAOC,SAAS,KAAKG,SAAS;IAChC;EAAC;IAAAX,GAAA;IAAA3C,KAAA,EAOD,SAAAuD,aAAaL,aAAqB,EAAiB;MACjD,IAAMC,SAAS,GAAG,IAAI,CAACJ,UAAU,CAACK,IAAI,CAAC,UAACC,GAAG;QAAA,OAAKA,GAAG,CAACjC,IAAI,KAAK8B,aAAa;MAAA,EAAC;MAC3E,IAAIC,SAAS,EAAE,OAAOA,SAAS,CAACnD,KAAK;MACrC,OAAO,IAAI;IACb;EAAC;IAAA2C,GAAA;IAAA3C,KAAA,EAOD,SAAAwD,mBAAmBC,YAAoB,EAAW;MAChD,IAAMC,QAAQ,GAAG,IAAI,CAAClB,MAAM,CAACQ,SAAS,CAACI,IAAI,CAAC,UAAUC,GAAG,EAAE;QACzD,OAAOA,GAAG,CAACjC,IAAI,KAAKqC,YAAY;MAClC,CAAC,CAAC;MACF,OAAOC,QAAQ,KAAKJ,SAAS;IAC/B;EAAC;IAAAX,GAAA;IAAA3C,KAAA,EAOD,SAAA2D,wBAAwBF,YAAoB,EAAiB;MAC3D,IAAMC,QAAQ,GAAG,IAAI,CAACE,eAAe,CAACH,YAAY,CAAC;MACnD,IAAIC,QAAQ,EAAE,OAAOA,QAAQ,CAACG,IAAI,CAAC,EAAE,CAAC;MACtC,OAAO,IAAI;IACb;EAAC;IAAAlB,GAAA;IAAA3C,KAAA,EAOD,SAAA4D,gBAAgBH,YAA6B,EAAS;MACpD,IAAIC,QAAQ;MACZ,IAAI,OAAOD,YAAY,KAAK,QAAQ,EAAE;QAEpCC,QAAQ,GAAG,IAAI,CAAClB,MAAM,CAACQ,SAAS,CAACI,IAAI,CAAC,UAAUC,GAAG,EAAE;UACnD,OAAOA,GAAG,CAACjC,IAAI,KAAKqC,YAAY;QAClC,CAAC,CAAC;MACJ,CAAC,MAAM;QACLC,QAAQ,GAAGD,YAAY;MACzB;MAGA,IAAIC,QAAQ,KAAKJ,SAAS,EAAE;QAC1B,MAAM,IAAIlB,KAAK,gCAAAC,MAAA,CAAgCoB,YAAY,CAAE,CAAC;MAChE;MAGA,IAAI,CAAC1B,MAAM,CAAC+B,IAAI,CAACJ,QAAQ,CAACK,MAAM,CAAC;MAEjC,IAAIL,QAAQ,CAACM,MAAM,EAAE;QAEnB,OAAO,IAAAC,oBAAU,EAAC,IAAI,CAAClC,MAAM,EAAE2B,QAAQ,EAAE,IAAI,CAAClB,MAAM,CAACK,eAAe,CAAC;MACvE;MAEA,OAAO,IAAAqB,uBAAa,EAAC,IAAI,CAACnC,MAAM,EAAE2B,QAAQ,CAAC;IAC7C;EAAC;IAAAf,GAAA;IAAA3C,KAAA,EAED,SAAAiB,SAAA,EAAmB;MACjB,IAAMkD,MAAgB,GAAG,EAAE;MAE3BA,MAAM,CAACC,IAAI,CAAC,YAAY,CAAC;MAAC,IAAAC,SAAA,GAAApF,0BAAA,CACF,IAAI,CAAC6D,UAAU;QAAAwB,KAAA;MAAA;QAAvC,KAAAD,SAAA,CAAAxE,CAAA,MAAAyE,KAAA,GAAAD,SAAA,CAAAvE,CAAA,IAAAC,IAAA,GAAyC;UAAA,IAA9BwE,SAAS,GAAAD,KAAA,CAAAtE,KAAA;UAClBmE,MAAM,CAACC,IAAI,MAAA/B,MAAA,CAAMkC,SAAS,CAACnD,IAAI,CAACoD,MAAM,CAAC,EAAE,CAAC,eAAAnC,MAAA,CAAYkC,SAAS,CAACE,IAAI,CAAE,CAAC;QACzE;MAAC,SAAAlE,GAAA;QAAA8D,SAAA,CAAApE,CAAA,CAAAM,GAAA;MAAA;QAAA8D,SAAA,CAAAlE,CAAA;MAAA;MAEDgE,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;MACfD,MAAM,CAACC,IAAI,CAAC,mBAAmB,CAAC;MAAC,IAAAM,UAAA,GAAAzF,0BAAA,CACT,IAAI,CAAC8D,UAAU;QAAA4B,MAAA;MAAA;QAAvC,KAAAD,UAAA,CAAA7E,CAAA,MAAA8E,MAAA,GAAAD,UAAA,CAAA5E,CAAA,IAAAC,IAAA,GAAyC;UAAA,IAA9BoD,SAAS,GAAAwB,MAAA,CAAA3E,KAAA;UAClBmE,MAAM,CAACC,IAAI,MAAA/B,MAAA,CAAMc,SAAS,CAAC/B,IAAI,CAACoD,MAAM,CAAC,EAAE,CAAC,SAAAnC,MAAA,CAAMc,SAAS,CAACnD,KAAK,CAAE,CAAC;QACpE;MAAC,SAAAO,GAAA;QAAAmE,UAAA,CAAAzE,CAAA,CAAAM,GAAA;MAAA;QAAAmE,UAAA,CAAAvE,CAAA;MAAA;MAED,IAAM6C,SAAS,GAAG4B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAAC9B,SAAS,CAAC,CAAC;MAC5DmB,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;MACfD,MAAM,CAACC,IAAI,CAAC,YAAY,CAAC;MAAC,IAAAW,UAAA,GAAA9F,0BAAA,CACH+D,SAAS;QAAAgC,MAAA;MAAA;QAAhC,KAAAD,UAAA,CAAAlF,CAAA,MAAAmF,MAAA,GAAAD,UAAA,CAAAjF,CAAA,IAAAC,IAAA,GAAkC;UAAA,IAAvB2D,QAAQ,GAAAsB,MAAA,CAAAhF,KAAA;UACjB0D,QAAQ,CAAC1D,KAAK,GAAG,IAAI,CAAC4D,eAAe,CAACF,QAAQ,CAAC;UAC/C,IAAIoB,SAAS,GAAGF,IAAI,CAACE,SAAS,CAACpB,QAAQ,CAAC1D,KAAK,CAAC;UAC9C,IAAI8E,SAAS,CAACpF,MAAM,GAAG,EAAE,EAAEoF,SAAS,GAAGA,SAAS,CAACG,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;UACjE,IAAI,CAACC,KAAK,CAACxB,QAAQ,CAAC1D,KAAK,CAACN,MAAM,CAAC,EAAE;YACjCoF,SAAS,iBAAAzC,MAAA,CAAiBqB,QAAQ,CAAC1D,KAAK,CAACN,MAAM,MAAG;UACpD;UACAyE,MAAM,CAACC,IAAI,MAAA/B,MAAA,CAAMqB,QAAQ,CAACtC,IAAI,CAACoD,MAAM,CAAC,EAAE,CAAC,SAAAnC,MAAA,CAAMyC,SAAS,CAAE,CAAC;QAC7D;MAAC,SAAAvE,GAAA;QAAAwE,UAAA,CAAA9E,CAAA,CAAAM,GAAA;MAAA;QAAAwE,UAAA,CAAA5E,CAAA;MAAA;MACD,OAAOgE,MAAM,CAACN,IAAI,CAAC,IAAI,CAAC;IAC1B;EAAC;EAAA,OAAAnC,YAAA;AAAA;AAAAyD,OAAA,CAAAzD,YAAA,GAAAA,YAAA"}