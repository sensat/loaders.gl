{"version":3,"file":"iobuffer.js","names":["DEFAULT_BYTE_LENGTH","IOBuffer","constructor","data","arguments","length","undefined","options","_defineProperty","TextDecoder","TextEncoder","dataIsGiven","ArrayBuffer","lastWrittenByte","byteLength","offset","dvOffset","isView","buffer","byteOffset","littleEndian","_data","DataView","_mark","_marks","available","isLittleEndian","setLittleEndian","isBigEndian","setBigEndian","skip","n","seek","mark","reset","pushMark","push","popMark","pop","Error","rewind","ensureAvailable","lengthNeeded","newLength","newArray","Uint8Array","set","readBoolean","readUint8","readInt8","getInt8","getUint8","readByte","readBytes","bytes","i","readInt16","value","getInt16","readUint16","getUint16","readInt32","getInt32","readUint32","getUint32","readFloat32","getFloat32","readFloat64","getFloat64","readChar","String","fromCharCode","readChars","result","readUtf8","textDecoder","decode","writeBoolean","writeUint8","writeInt8","setInt8","_updateLastWrittenByte","setUint8","writeByte","writeBytes","writeInt16","setInt16","writeUint16","setUint16","writeInt32","setInt32","writeUint32","setUint32","writeFloat32","setFloat32","writeFloat64","setFloat64","writeChar","str","charCodeAt","writeChars","writeUtf8","textEncoder","encode","toArray"],"sources":["../../../src/iobuffer/iobuffer.ts"],"sourcesContent":["const DEFAULT_BYTE_LENGTH = 1024 * 8;\n\ntype InputData = number | ArrayBufferLike | ArrayBufferView | IOBuffer | Buffer;\n\ninterface IOBufferOptions {\n  /**\n   * Ignore the first n bytes of the ArrayBuffer.\n   */\n  offset?: number;\n}\n\nexport class IOBuffer {\n  /**\n   * Reference to the internal ArrayBuffer object.\n   */\n  public buffer: ArrayBufferLike;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public byteLength: number;\n\n  /**\n   * Byte offset of the internal ArrayBuffer.\n   */\n  public byteOffset: number;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public length: number;\n\n  /**\n   * The current offset of the buffer's pointer.\n   */\n  public offset: number;\n\n  private lastWrittenByte: number;\n  private littleEndian: boolean;\n\n  private _data: DataView;\n  private _mark: number;\n  private _marks: number[];\n\n  private textDecoder = new TextDecoder();\n  private textEncoder = new TextEncoder();\n\n  /**\n   * @param data - The data to construct the IOBuffer with.\n   * If data is a number, it will be the new buffer's length<br>\n   * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n   * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n   * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n   * @param options\n   */\n  public constructor(data: InputData = DEFAULT_BYTE_LENGTH, options: IOBufferOptions = {}) {\n    let dataIsGiven = false;\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    } else {\n      dataIsGiven = true;\n      this.lastWrittenByte = data.byteLength;\n    }\n\n    const offset = options.offset ? options.offset >>> 0 : 0;\n    const byteLength = data.byteLength - offset;\n    let dvOffset = offset;\n    if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n      if (data.byteLength !== data.buffer.byteLength) {\n        dvOffset = data.byteOffset + offset;\n      }\n      data = data.buffer;\n    }\n    if (dataIsGiven) {\n      this.lastWrittenByte = byteLength;\n    } else {\n      this.lastWrittenByte = 0;\n    }\n    this.buffer = data;\n    this.length = byteLength;\n    this.byteLength = byteLength;\n    this.byteOffset = dvOffset;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer, dvOffset, byteLength);\n    this._mark = 0;\n    this._marks = [];\n  }\n\n  /**\n   * Checks if the memory allocated to the buffer is sufficient to store more\n   * bytes after the offset.\n   * @param byteLength - The needed memory in bytes.\n   * @returns `true` if there is sufficient space and `false` otherwise.\n   */\n  public available(byteLength = 1): boolean {\n    return this.offset + byteLength <= this.length;\n  }\n\n  /**\n   * Check if little-endian mode is used for reading and writing multi-byte\n   * values.\n   * @returns `true` if little-endian mode is used, `false` otherwise.\n   */\n  public isLittleEndian(): boolean {\n    return this.littleEndian;\n  }\n\n  /**\n   * Set little-endian mode for reading and writing multi-byte values.\n   */\n  public setLittleEndian(): this {\n    this.littleEndian = true;\n    return this;\n  }\n\n  /**\n   * Check if big-endian mode is used for reading and writing multi-byte values.\n   * @returns `true` if big-endian mode is used, `false` otherwise.\n   */\n  public isBigEndian(): boolean {\n    return !this.littleEndian;\n  }\n\n  /**\n   * Switches to big-endian mode for reading and writing multi-byte values.\n   */\n  public setBigEndian(): this {\n    this.littleEndian = false;\n    return this;\n  }\n\n  /**\n   * Move the pointer n bytes forward.\n   * @param n - Number of bytes to skip.\n   */\n  public skip(n = 1): this {\n    this.offset += n;\n    return this;\n  }\n\n  /**\n   * Move the pointer to the given offset.\n   * @param offset\n   */\n  public seek(offset: number): this {\n    this.offset = offset;\n    return this;\n  }\n\n  /**\n   * Store the current pointer offset.\n   * @see {@link IOBuffer#reset}\n   */\n  public mark(): this {\n    this._mark = this.offset;\n    return this;\n  }\n\n  /**\n   * Move the pointer back to the last pointer offset set by mark.\n   * @see {@link IOBuffer#mark}\n   */\n  public reset(): this {\n    this.offset = this._mark;\n    return this;\n  }\n\n  /**\n   * Push the current pointer offset to the mark stack.\n   * @see {@link IOBuffer#popMark}\n   */\n  public pushMark(): this {\n    this._marks.push(this.offset);\n    return this;\n  }\n\n  /**\n   * Pop the last pointer offset from the mark stack, and set the current\n   * pointer offset to the popped value.\n   * @see {@link IOBuffer#pushMark}\n   */\n  public popMark(): this {\n    const offset = this._marks.pop();\n    if (offset === undefined) {\n      throw new Error('Mark stack empty');\n    }\n    this.seek(offset);\n    return this;\n  }\n\n  /**\n   * Move the pointer offset back to 0.\n   */\n  public rewind(): this {\n    this.offset = 0;\n    return this;\n  }\n\n  /**\n   * Make sure the buffer has sufficient memory to write a given byteLength at\n   * the current pointer offset.\n   * If the buffer's memory is insufficient, this method will create a new\n   * buffer (a copy) with a length that is twice (byteLength + current offset).\n   * @param byteLength\n   */\n  public ensureAvailable(byteLength = 1): this {\n    if (!this.available(byteLength)) {\n      const lengthNeeded = this.offset + byteLength;\n      const newLength = lengthNeeded * 2;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = this.byteLength = newLength;\n      this._data = new DataView(this.buffer);\n    }\n    return this;\n  }\n\n  /**\n   * Read a byte and return false if the byte's value is 0, or true otherwise.\n   * Moves pointer forward by one byte.\n   */\n  public readBoolean(): boolean {\n    return this.readUint8() !== 0;\n  }\n\n  /**\n   * Read a signed 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readInt8(): number {\n    return this._data.getInt8(this.offset++);\n  }\n\n  /**\n   * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readUint8(): number {\n    return this._data.getUint8(this.offset++);\n  }\n\n  /**\n   * Alias for {@link IOBuffer#readUint8}.\n   */\n  public readByte(): number {\n    return this.readUint8();\n  }\n\n  /**\n   * Read `n` bytes and move pointer forward by `n` bytes.\n   */\n  public readBytes(n = 1): Uint8Array {\n    const bytes = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n    return bytes;\n  }\n\n  /**\n   * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n   */\n  public readInt16(): number {\n    const value = this._data.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n   */\n  public readUint16(): number {\n    const value = this._data.getUint16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n   */\n  public readInt32(): number {\n    const value = this._data.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n   */\n  public readUint32(): number {\n    const value = this._data.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit floating number and move pointer forward by 4 bytes.\n   */\n  public readFloat32(): number {\n    const value = this._data.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 64-bit floating number and move pointer forward by 8 bytes.\n   */\n  public readFloat64(): number {\n    const value = this._data.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n   */\n  public readChar(): string {\n    return String.fromCharCode(this.readInt8());\n  }\n\n  /**\n   * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n   */\n  public readChars(n = 1): string {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      result += this.readChar();\n    }\n    return result;\n  }\n\n  /**\n   * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n   * forward by `n` bytes.\n   */\n  public readUtf8(n = 1): string {\n    return this.textDecoder.decode(this.readBytes(n));\n  }\n\n  /**\n   * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n   * forward by 1 byte.\n   */\n  public writeBoolean(value: unknown): this {\n    this.writeUint8(value ? 0xff : 0x00);\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n   */\n  public writeInt8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setInt8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n   * byte.\n   */\n  public writeUint8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setUint8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * An alias for {@link IOBuffer#writeUint8}.\n   */\n  public writeByte(value: number): this {\n    return this.writeUint8(value);\n  }\n\n  /**\n   * Write all elements of `bytes` as uint8 values and move pointer forward by\n   * `bytes.length` bytes.\n   */\n  public writeBytes(bytes: ArrayLike<number>): this {\n    this.ensureAvailable(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit signed integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeInt16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setInt16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeUint16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setUint16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit signed integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeInt32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setInt32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeUint32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setUint32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit floating number and move pointer forward by 4\n   * bytes.\n   */\n  public writeFloat32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 64-bit floating number and move pointer forward by 8\n   * bytes.\n   */\n  public writeFloat64(value: number): this {\n    this.ensureAvailable(8);\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n    this.offset += 8;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n   * and move pointer forward by 1 byte.\n   */\n  public writeChar(str: string): this {\n    return this.writeUint8(str.charCodeAt(0));\n  }\n\n  /**\n   * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n   * and move pointer forward by `str.length` bytes.\n   */\n  public writeChars(str: string): this {\n    for (let i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n    return this;\n  }\n\n  /**\n   * UTF-8 encode and write `str` to the current pointer offset and move pointer\n   * forward according to the encoded length.\n   */\n  public writeUtf8(str: string): this {\n    const bytes = this.textEncoder.encode(str);\n    return this.writeBytes(bytes);\n  }\n\n  /**\n   * Export a Uint8Array view of the internal buffer.\n   * The view starts at the byte offset and its length\n   * is calculated to stop at the last written byte or the original length.\n   */\n  public toArray(): Uint8Array {\n    return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n  }\n\n  /**\n   * Update the last written byte offset\n   * @private\n   */\n  private _updateLastWrittenByte(): void {\n    if (this.offset > this.lastWrittenByte) {\n      this.lastWrittenByte = this.offset;\n    }\n  }\n}\n"],"mappings":"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"}