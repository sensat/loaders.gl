{"version":3,"file":"read-data.js","names":["readType","str2num","num2bytes","readNonRecord","buffer","variable","type","size","data","Array","i","readRecord","recordDimension","width","length","step","recordStep","currentOffset","offset","seek"],"sources":["../../../src/netcdfjs/read-data.ts"],"sourcesContent":["import type {IOBuffer} from '../iobuffer/iobuffer';\nimport type {NetCDFRecordDimension, NetCDFVariable} from './netcdf-types';\nimport {readType, str2num, num2bytes} from './read-type';\n\n// const STREAMING = 4294967295;\n\n/**\n * Read data for the given non-record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @return Data of the element\n */\nexport function readNonRecord(\n  buffer: IOBuffer,\n  variable: NetCDFVariable\n): (string | number | number[] | Uint8Array)[] {\n  // variable type\n  const type = str2num(variable.type);\n\n  // size of the data\n  const size = variable.size / num2bytes(type);\n\n  // iterates over the data\n  const data = new Array(size);\n  for (let i = 0; i < size; i++) {\n    data[i] = readType(buffer, type, 1);\n  }\n\n  return data;\n}\n\n/**\n * Read data for the given record variable\n * @param buffer - Buffer for the file data\n * @param variable - Variable metadata\n * @param recordDimension - Record dimension metadata\n * @return - Data of the element\n */\nexport function readRecord(\n  buffer: IOBuffer,\n  variable: NetCDFVariable,\n  recordDimension: NetCDFRecordDimension\n): (string | number | number[] | Uint8Array)[] {\n  // variable type\n  const type = str2num(variable.type);\n  const width = variable.size ? variable.size / num2bytes(type) : 1;\n\n  // size of the data\n  // TODO streaming data\n  const size = recordDimension.length;\n\n  // iterates over the data\n  const data = new Array(size);\n  const step = recordDimension.recordStep;\n\n  for (let i = 0; i < size; i++) {\n    const currentOffset = buffer.offset;\n    data[i] = readType(buffer, type, width);\n    buffer.seek(currentOffset + step);\n  }\n\n  return data;\n}\n"],"mappings":"AAEA,SAAQA,QAAQ,EAAEC,OAAO,EAAEC,SAAS,QAAO,aAAa;AAUxD,OAAO,SAASC,aAAaA,CAC3BC,MAAgB,EAChBC,QAAwB,EACqB;EAE7C,MAAMC,IAAI,GAAGL,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC;EAGnC,MAAMC,IAAI,GAAGF,QAAQ,CAACE,IAAI,GAAGL,SAAS,CAACI,IAAI,CAAC;EAG5C,MAAME,IAAI,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC;EAC5B,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAE;IAC7BF,IAAI,CAACE,CAAC,CAAC,GAAGV,QAAQ,CAACI,MAAM,EAAEE,IAAI,EAAE,CAAC,CAAC;EACrC;EAEA,OAAOE,IAAI;AACb;AASA,OAAO,SAASG,UAAUA,CACxBP,MAAgB,EAChBC,QAAwB,EACxBO,eAAsC,EACO;EAE7C,MAAMN,IAAI,GAAGL,OAAO,CAACI,QAAQ,CAACC,IAAI,CAAC;EACnC,MAAMO,KAAK,GAAGR,QAAQ,CAACE,IAAI,GAAGF,QAAQ,CAACE,IAAI,GAAGL,SAAS,CAACI,IAAI,CAAC,GAAG,CAAC;EAIjE,MAAMC,IAAI,GAAGK,eAAe,CAACE,MAAM;EAGnC,MAAMN,IAAI,GAAG,IAAIC,KAAK,CAACF,IAAI,CAAC;EAC5B,MAAMQ,IAAI,GAAGH,eAAe,CAACI,UAAU;EAEvC,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAE;IAC7B,MAAMO,aAAa,GAAGb,MAAM,CAACc,MAAM;IACnCV,IAAI,CAACE,CAAC,CAAC,GAAGV,QAAQ,CAACI,MAAM,EAAEE,IAAI,EAAEO,KAAK,CAAC;IACvCT,MAAM,CAACe,IAAI,CAACF,aAAa,GAAGF,IAAI,CAAC;EACnC;EAEA,OAAOP,IAAI;AACb"}