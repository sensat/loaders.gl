{"version":3,"file":"read-header.js","names":["readType","num2str","ZERO","NC_DIMENSION","NC_VARIABLE","NC_ATTRIBUTE","NC_UNLIMITED","readNetCDFHeader","buffer","version","recordDimensionLength","readUint32","dimList","readDimensionsList","attributes","readAttributesList","variableList","readVariablesList","recordId","header","recordDimension","length","id","name","recordName","recordStep","dimensions","variables","Error","dimensionSize","Array","dim","readName","size","gAttList","attributeSize","gAtt","type","concat","value","padding","varList","variableSize","v","dimensionality","dimensionsIds","varSize","offset","record","nameLength","readChars","skip"],"sources":["../../../src/netcdfjs/read-header.ts"],"sourcesContent":["import type {IOBuffer} from '../iobuffer/iobuffer';\nimport type {NetCDFHeader, NetCDFDimension, NetCDFVariable, NetCDFAttribute} from './netcdf-types';\nimport {readType, num2str} from './read-type';\n\n// Grammar constants\nconst ZERO = 0;\nconst NC_DIMENSION = 10;\nconst NC_VARIABLE = 11;\nconst NC_ATTRIBUTE = 12;\n\nconst NC_UNLIMITED = 0;\n\n/**\n * Read the header of the file\n * @param buffer - Buffer for the file data\n * @param version - Version of the file\n * @return  - Header\n */\nexport function readNetCDFHeader(buffer: IOBuffer, version: number): NetCDFHeader {\n  // Length of record dimension\n  // sum of the varSize's of all the record variables.\n  const recordDimensionLength = buffer.readUint32();\n\n  // List of dimensions\n  const dimList = readDimensionsList(buffer);\n\n  // List of global attributes\n  const attributes = readAttributesList(buffer);\n\n  // List of variables\n  const variableList = readVariablesList(buffer, dimList.recordId, version);\n\n  const header: NetCDFHeader = {\n    version,\n    recordDimension: {\n      length: recordDimensionLength,\n      id: dimList.recordId, // id of the unlimited dimension\n      name: dimList.recordName, // name of the unlimited dimension\n      recordStep: variableList.recordStep\n    },\n    dimensions: dimList.dimensions,\n    variables: variableList.variables,\n    attributes\n  };\n\n  return header;\n}\n\n/**\n * Read list of dimensions\n * @ignore\n * @param {IOBuffer} buffer - Buffer for the file data\n */\nfunction readDimensionsList(buffer: IOBuffer): {\n  recordId: number;\n  recordName: string;\n  dimensions: NetCDFDimension[];\n} {\n  const dimList = buffer.readUint32();\n  if (dimList === ZERO) {\n    if (buffer.readUint32() !== ZERO) {\n      throw new Error('NetCDF: wrong empty tag for list of dimensions');\n    }\n    // TODO - is this empty dimension list supported / recoverable?\n    return {\n      recordId: 0,\n      recordName: '',\n      dimensions: []\n    };\n  }\n\n  if (dimList !== NC_DIMENSION) {\n    throw new Error('NetCDF: wrong tag for list of dimensions');\n  }\n\n  // Length of dimensions\n  const dimensionSize = buffer.readUint32();\n  const dimensions = new Array(dimensionSize);\n  let recordId;\n  let recordName;\n  for (let dim = 0; dim < dimensionSize; dim++) {\n    // Read name\n    const name = readName(buffer);\n\n    // Read dimension size\n    const size = buffer.readUint32();\n    if (size === NC_UNLIMITED) {\n      // in netcdf 3 one field can be of size unlimmited\n      recordId = dim;\n      recordName = name;\n    }\n\n    dimensions[dim] = {\n      name,\n      size\n    };\n  }\n\n  return {\n    dimensions,\n    recordId,\n    recordName\n  };\n}\n\n/**\n * List of attributes\n * @ignore\n * @param buffer - Buffer for the file data\n * @return List of attributes with:\n */\nfunction readAttributesList(buffer: IOBuffer): NetCDFAttribute[] {\n  const gAttList = buffer.readUint32();\n  if (gAttList === ZERO) {\n    if (buffer.readUint32() !== ZERO) {\n      throw new Error('NetCDF: wrong empty tag for list of attributes');\n    }\n    return [];\n  }\n\n  if (gAttList !== NC_ATTRIBUTE) {\n    throw new Error('NetCDF: wrong tag for list of attributes');\n  }\n\n  // Length of attributes\n  const attributeSize = buffer.readUint32();\n  const attributes = new Array(attributeSize);\n  for (let gAtt = 0; gAtt < attributeSize; gAtt++) {\n    // Read name\n    const name = readName(buffer);\n\n    // Read type\n    const type = buffer.readUint32();\n    if (type < 1 || type > 6) {\n      throw new Error(`NetCDF: non valid type ${type}`);\n    }\n\n    // Read attribute\n    const size = buffer.readUint32();\n    const value = readType(buffer, type, size);\n\n    // Apply padding\n    padding(buffer);\n\n    attributes[gAtt] = {\n      name,\n      type: num2str(type),\n      value\n    };\n  }\n  return attributes;\n}\n\n/**\n * List of variables\n * @param buffer - Buffer for the file data\n * @param recordId - Id of the unlimited dimension (also called record dimension)\n *                            This value may be undefined if there is no unlimited dimension\n * @param {number} version - Version of the file\n */\n// eslint-disable-next-line max-statements, complexity\nfunction readVariablesList(\n  buffer: IOBuffer,\n  recordId: number,\n  version: number\n): {\n  recordStep: number;\n  variables: NetCDFVariable[];\n} {\n  const varList = buffer.readUint32();\n  let recordStep = 0;\n  if (varList === ZERO) {\n    if (buffer.readUint32() !== ZERO) {\n      throw new Error('NetCDF: wrong empty tag for list of variables');\n    }\n    return {\n      recordStep,\n      variables: []\n    };\n  }\n\n  if (varList !== NC_VARIABLE) {\n    throw new Error('NetCDF: wrong tag for list of variables');\n  }\n\n  // Length of variables\n  const variableSize = buffer.readUint32();\n  const variables = new Array(variableSize);\n  for (let v = 0; v < variableSize; v++) {\n    // Read name\n    const name = readName(buffer);\n\n    // Read dimensionality of the variable\n    const dimensionality = buffer.readUint32();\n\n    // Index into the list of dimensions\n    const dimensionsIds = new Array(dimensionality);\n    for (let dim = 0; dim < dimensionality; dim++) {\n      dimensionsIds[dim] = buffer.readUint32();\n    }\n\n    // Read variables size\n    const attributes = readAttributesList(buffer);\n\n    // Read type\n    const type = buffer.readUint32();\n    if (type < 1 && type > 6) {\n      throw new Error(`NetCDF: non valid type ${type}`);\n    }\n\n    // Read variable size\n    // The 32-bit varSize field is not large enough to contain the size of variables that require\n    // more than 2^32 - 4 bytes, so 2^32 - 1 is used in the varSize field for such variables.\n    const varSize = buffer.readUint32();\n\n    // Read offset\n    let offset = buffer.readUint32();\n    if (version === 2) {\n      if (offset > 0) {\n        throw new Error('NetCDF: offsets larger than 4GB not supported');\n      }\n      offset = buffer.readUint32();\n    }\n\n    let record = false;\n    // Count amount of record variables\n    if (typeof recordId !== 'undefined' && dimensionsIds[0] === recordId) {\n      recordStep += varSize;\n      record = true;\n    }\n    variables[v] = {\n      name,\n      dimensions: dimensionsIds,\n      attributes,\n      type: num2str(type),\n      size: varSize,\n      offset,\n      record\n    };\n  }\n\n  return {\n    variables,\n    recordStep\n  };\n}\n\n// HELPERS\n\n/**\n * Reads the name\n * @param buffer - Buffer for the file data\n * @return Name\n */\nexport function readName(buffer: IOBuffer): string {\n  // Read name\n  const nameLength = buffer.readUint32();\n  const name = buffer.readChars(nameLength);\n\n  // validate name\n  // TODO\n\n  // Apply padding\n  padding(buffer);\n  return name;\n}\n\n/**\n * Moves 1, 2, or 3 bytes to next 4-byte boundary\n */\nfunction padding(buffer: IOBuffer) {\n  if (buffer.offset % 4 !== 0) {\n    buffer.skip(4 - (buffer.offset % 4));\n  }\n}\n"],"mappings":"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"}