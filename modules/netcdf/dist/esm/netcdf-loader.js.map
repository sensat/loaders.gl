{"version":3,"file":"netcdf-loader.js","names":["NetCDFReader","VERSION","NetCDFWorkerLoader","name","id","module","version","extensions","mimeTypes","category","options","netcdf","loadVariables","NetCDFLoader","parse","arrayBuffer","parseNetCDF","binary","_options$netcdf","reader","variables","loadData","variable","getDataVariable","loaderData","header","data","_typecheckNetCDFWorkerLoader","_typecheckNetCDFLoader"],"sources":["../../src/netcdf-loader.ts"],"sourcesContent":["import type {Loader, LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {NetCDFHeader} from './netcdfjs/netcdf-types';\nimport {NetCDFReader} from './netcdfjs/netcdf-reader';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport type NetCDF = {\n  loaderData: NetCDFHeader;\n  data: {[variableName: string]: any[][]};\n};\n\nexport type NetCDFLoaderOptions = LoaderOptions & {\n  netcdf?: {\n    loadData?: boolean;\n  };\n};\n\n/**\n * Worker loader for NETCDF\n */\nexport const NetCDFWorkerLoader = {\n  name: 'NetCDF',\n  id: 'mvt',\n  module: 'mvt',\n  version: VERSION,\n  extensions: ['cdf', 'nc'],\n  mimeTypes: [\n    'application/netcdf',\n    'application/x-netcdf'\n    // 'application/octet-stream'\n  ],\n  category: 'image',\n  options: {\n    netcdf: {\n      loadVariables: false\n    }\n  }\n};\n\n/**\n * Loader for the NetCDF format\n */\nexport const NetCDFLoader = {\n  ...NetCDFWorkerLoader,\n  parse: async (arrayBuffer, options) => parseNetCDF(arrayBuffer, options),\n  binary: true\n};\n\nfunction parseNetCDF(arrayBuffer: ArrayBuffer, options?: NetCDFLoaderOptions): NetCDF {\n  const reader = new NetCDFReader(arrayBuffer);\n  const variables: {[variableName: string]: any[][]} = {};\n  if (options?.netcdf?.loadData) {\n    for (const variable of reader.variables) {\n      variables[variable.name] = reader.getDataVariable(variable);\n    }\n  }\n  return {\n    loaderData: reader.header,\n    data: variables\n  };\n}\n\n// Type tests\nexport const _typecheckNetCDFWorkerLoader: Loader = NetCDFWorkerLoader;\nexport const _typecheckNetCDFLoader: LoaderWithParser = NetCDFLoader;\n"],"mappings":"AAEA,SAAQA,YAAY,QAAO,0BAA0B;AAIrD,MAAMC,OAAO,GAAG,sBAAkB,KAAK,WAAW,qBAAiB,QAAQ;AAgB3E,OAAO,MAAMC,kBAAkB,GAAG;EAChCC,IAAI,EAAE,QAAQ;EACdC,EAAE,EAAE,KAAK;EACTC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAEL,OAAO;EAChBM,UAAU,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC;EACzBC,SAAS,EAAE,CACT,oBAAoB,EACpB,sBAAsB,CAEvB;EACDC,QAAQ,EAAE,OAAO;EACjBC,OAAO,EAAE;IACPC,MAAM,EAAE;MACNC,aAAa,EAAE;IACjB;EACF;AACF,CAAC;AAKD,OAAO,MAAMC,YAAY,GAAG;EAC1B,GAAGX,kBAAkB;EACrBY,KAAK,EAAE,MAAAA,CAAOC,WAAW,EAAEL,OAAO,KAAKM,WAAW,CAACD,WAAW,EAAEL,OAAO,CAAC;EACxEO,MAAM,EAAE;AACV,CAAC;AAED,SAASD,WAAWA,CAACD,WAAwB,EAAEL,OAA6B,EAAU;EAAA,IAAAQ,eAAA;EACpF,MAAMC,MAAM,GAAG,IAAInB,YAAY,CAACe,WAAW,CAAC;EAC5C,MAAMK,SAA4C,GAAG,CAAC,CAAC;EACvD,IAAIV,OAAO,aAAPA,OAAO,gBAAAQ,eAAA,GAAPR,OAAO,CAAEC,MAAM,cAAAO,eAAA,eAAfA,eAAA,CAAiBG,QAAQ,EAAE;IAC7B,KAAK,MAAMC,QAAQ,IAAIH,MAAM,CAACC,SAAS,EAAE;MACvCA,SAAS,CAACE,QAAQ,CAACnB,IAAI,CAAC,GAAGgB,MAAM,CAACI,eAAe,CAACD,QAAQ,CAAC;IAC7D;EACF;EACA,OAAO;IACLE,UAAU,EAAEL,MAAM,CAACM,MAAM;IACzBC,IAAI,EAAEN;EACR,CAAC;AACH;AAGA,OAAO,MAAMO,4BAAoC,GAAGzB,kBAAkB;AACtE,OAAO,MAAM0B,sBAAwC,GAAGf,YAAY"}