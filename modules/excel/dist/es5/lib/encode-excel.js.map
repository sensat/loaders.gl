{"version":3,"file":"encode-excel.js","names":[],"sources":["../../../src/lib/encode-excel.ts"],"sourcesContent":["// import * as xlsx from 'xlsx';\n\n/**\n   * Saves JSON data in Excel format for html, ods, xml, xlsb and xlsx file types.\n   * @param filePath Local data file path.\n   * @param fileData Raw data to save.\n   * @param tableName Table name for data files with multiple tables support.\n   * @param showData Show saved data callback.\n   *\n  public saveData(filePath: string, fileData: any, tableName: string, showData?: Function): void {\n    const fileType: string = filePath.substr(filePath.lastIndexOf('.'));\n    fileData = this.jsonToExcelData(fileData, fileType, tableName);\n    if ( fileData.length > 0) {\n      // TODO: change this to async later\n      fs.writeFile(filePath, fileData, (error) => showData(error));\n    }\n  }\n\n  /**\n   * Converts JSON data to Excel data formats.\n   * @param jsonData Json data to convert.\n   * @param bookType Excel data file/book type.\n   *\n  private jsonToExcelData(jsonData: any, fileType: string, tableName: string): any {\n    console.debug('jsonToExcelData(): creating excel data:', fileType);\n\n    // create new workbook\n    const workbook = xlsx.utils.book_new();\n\n    // convert json data to worksheet format\n    const worksheet = xlsx.utils.json_to_sheet(jsonData, {\n      //header: JSON.parse(this._viewConfig.columns)\n    });\n\n    // append worksheet to workbook\n    xlsx.utils.book_append_sheet(workbook, worksheet, tableName);\n\n    // get text data string or binary spreadsheet data buffer\n    let data: any = '';\n    if (fileType === 'html' || fileType === 'xml') {\n      data = xlsx.write(workbook, {\n        type: 'string',\n        compression: false,\n        bookType: getBookType(fileType)\n      });\n    } else {\n      data = xlsx.write(workbook, {\n        type: 'buffer',\n        compression: true, // use zip compression for zip-based formats\n        bookType: getBookType(fileType)\n      });\n    }\n    return data;\n  }\n\n\n}\n\n/**\n * Converts file type to Excel book type.\n * @param {string} fileType File type: .html, .ods, .xml, .xlsb, .xlsx, etc.\n * @returns {xlsx.BookType}\n *\nfunction getBookType(fileType) {\n  // TODO: must be a better way to do this string to type conversion :)\n  switch (fileType) {\n    case '.html':\n      return 'html';\n    case '.ods':\n      return 'ods';\n    case '.xml':\n      return 'xlml';\n    case '.xlsb':\n      return 'xlsb';\n    case '.xlsx':\n      return 'xlsx';\n    default:\n      return 'xlsb';\n  }\n}\n*/\n"],"mappings":""}