{"version":3,"file":"parse-excel.js","names":["_xlsx","require","dataTableNamesMap","parseExcel","arrayBuffer","options","dataUrl","workbook","read","type","dataRows","SheetNames","length","_options$excel","_options$excel2","sheetName","excel","sheet","indexOf","_options$excel3","worksheet","Sheets","utils","sheet_to_json"],"sources":["../../../src/lib/parse-excel.ts"],"sourcesContent":["import type {ExcelLoaderOptions} from '../excel-loader';\nimport {utils, read} from 'xlsx';\n// import {convertToArrayRow} from '@loaders.gl/schema';\n\n// local table names cache with dataUrl/tableNames array key/values\nconst dataTableNamesMap = {};\n\n/**\n * Gets local or remote Excel file data.\n * @param arrayBuffer Loaded data\n * @param options Data parse options.\n */\nexport function parseExcel(\n  arrayBuffer: ArrayBuffer,\n  options?: ExcelLoaderOptions\n): {[key: string]: unknown}[] {\n  const dataUrl = 'dummy';\n  // const dataFileType: string = dataUrl.substr(dataUrl.lastIndexOf('.')); // file extension\n\n  // create Excel 'workbook'\n  const workbook = read(arrayBuffer, {\n    type: 'array'\n    // cellDates: true\n  });\n\n  // load data sheets\n  let dataRows: {[key: string]: unknown}[] = [];\n  dataTableNamesMap[dataUrl] = [];\n  if (workbook.SheetNames.length > 0) {\n    if (workbook.SheetNames.length > 1) {\n      // cache sheet names\n      dataTableNamesMap[dataUrl] = workbook.SheetNames;\n      // eslint-ignore-next-line\n      // console.debug(`getData(): file:  sheetNames:`, workbook.SheetNames);\n    }\n\n    // determine spreadsheet to load\n    let sheetName = workbook.SheetNames[0];\n    if (options?.excel?.sheet && workbook.SheetNames.indexOf(options?.excel?.sheet) >= 0) {\n      // reset to requested table name\n      sheetName = options?.excel?.sheet;\n    }\n\n    // get worksheet data row objects array\n    const worksheet = workbook.Sheets[sheetName];\n    dataRows = utils.sheet_to_json(worksheet);\n\n    // const headers = dataRows.length ? Object.keys(dataRows[0]) : [];\n    // if (options?.excel?.type === 'array-row-table') {\n    //   dataRows = dataRows.map(row => convertToArrayRow(row, headers))\n    // }\n  }\n\n  return dataRows;\n}\n"],"mappings":";;;;;;AACA,IAAAA,KAAA,GAAAC,OAAA;AAIA,IAAMC,iBAAiB,GAAG,CAAC,CAAC;AAOrB,SAASC,UAAUA,CACxBC,WAAwB,EACxBC,OAA4B,EACA;EAC5B,IAAMC,OAAO,GAAG,OAAO;EAIvB,IAAMC,QAAQ,GAAG,IAAAC,UAAI,EAACJ,WAAW,EAAE;IACjCK,IAAI,EAAE;EAER,CAAC,CAAC;EAGF,IAAIC,QAAoC,GAAG,EAAE;EAC7CR,iBAAiB,CAACI,OAAO,CAAC,GAAG,EAAE;EAC/B,IAAIC,QAAQ,CAACI,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;IAAA,IAAAC,cAAA,EAAAC,eAAA;IAClC,IAAIP,QAAQ,CAACI,UAAU,CAACC,MAAM,GAAG,CAAC,EAAE;MAElCV,iBAAiB,CAACI,OAAO,CAAC,GAAGC,QAAQ,CAACI,UAAU;IAGlD;IAGA,IAAII,SAAS,GAAGR,QAAQ,CAACI,UAAU,CAAC,CAAC,CAAC;IACtC,IAAIN,OAAO,aAAPA,OAAO,gBAAAQ,cAAA,GAAPR,OAAO,CAAEW,KAAK,cAAAH,cAAA,eAAdA,cAAA,CAAgBI,KAAK,IAAIV,QAAQ,CAACI,UAAU,CAACO,OAAO,CAACb,OAAO,aAAPA,OAAO,wBAAAS,eAAA,GAAPT,OAAO,CAAEW,KAAK,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,KAAK,CAAC,IAAI,CAAC,EAAE;MAAA,IAAAE,eAAA;MAEpFJ,SAAS,GAAGV,OAAO,aAAPA,OAAO,wBAAAc,eAAA,GAAPd,OAAO,CAAEW,KAAK,cAAAG,eAAA,uBAAdA,eAAA,CAAgBF,KAAK;IACnC;IAGA,IAAMG,SAAS,GAAGb,QAAQ,CAACc,MAAM,CAACN,SAAS,CAAC;IAC5CL,QAAQ,GAAGY,WAAK,CAACC,aAAa,CAACH,SAAS,CAAC;EAM3C;EAEA,OAAOV,QAAQ;AACjB"}