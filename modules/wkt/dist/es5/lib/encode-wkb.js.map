{"version":3,"file":"encode-wkb.js","names":["_binaryWriter","_interopRequireDefault","require","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","WKB","encodeWKB","geometry","options","arguments","undefined","type","wkb","encodePoint","coordinates","encodeLineString","encodePolygon","encodeMultiPoint","encodeMultiPolygon","encodeMultiLineString","encodeGeometryCollection","exhaustiveCheck","Error","concat","getGeometrySize","getPointSize","getLineStringSize","getPolygonSize","getMultiPointSize","getMultiPolygonSize","getMultiLineStringSize","getGeometryCollectionSize","writer","BinaryWriter","writeInt8","writeWkbType","Point","writeDoubleLE","NaN","hasZ","hasM","writeCoordinate","arrayBuffer","coordinate","coordinateSize","getCoordinateSize","size","LineString","writeUInt32LE","_iterator","_step","Polygon","_coordinates","_toArray2","default","exteriorRing","interiorRings","_iterator2","_step2","_iterator3","_step3","interiorRing","_iterator4","_step4","_coordinates2","_iterator5","_step5","multiPoint","points","MultiPoint","_iterator6","_step6","point","writeBuffer","multiLineString","lineStrings","MultiLineString","_iterator7","_step7","lineString","encodedLineString","_iterator8","_step8","multiPolygon","polygons","MultiPolygon","_iterator9","_step9","polygon","encodedPolygon","_iterator10","_step10","collection","GeometryCollection","geometries","_iterator11","_step11","_iterator12","_step12","geometryType","srid","dimensionType"],"sources":["../../../src/lib/encode-wkb.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Forked from https://github.com/cschwarz/wkx under MIT license, Copyright (c) 2013 Christian Schwarz\n// Reference: https://www.ogc.org/standards/sfa\n\nimport type {\n  Feature,\n  Geometry,\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon,\n  GeometryCollection\n} from '@loaders.gl/schema';\n\nimport BinaryWriter from './utils/binary-writer';\n\n/**\n * Integer code for geometry type\n * Reference: https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary\n */\nenum WKB {\n  Point = 1,\n  LineString = 2,\n  Polygon = 3,\n  MultiPoint = 4,\n  MultiLineString = 5,\n  MultiPolygon = 6,\n  GeometryCollection = 7\n}\n\n/**\n * Options for encodeWKB\n */\ninterface WKBOptions {\n  /** Does the GeoJSON input have Z values? */\n  hasZ?: boolean;\n\n  /** Does the GeoJSON input have M values? */\n  hasM?: boolean;\n\n  /** Spatial reference for input GeoJSON */\n  srid?: any;\n}\n\n/**\n * Encodes a GeoJSON object into WKB\n * @param geojson A GeoJSON Feature or Geometry\n * @returns string\n */\nexport default function encodeWKB(\n  geometry: Geometry | Feature,\n  options: WKBOptions | {wkb: WKBOptions} = {}\n): ArrayBuffer {\n  if (geometry.type === 'Feature') {\n    geometry = geometry.geometry;\n  }\n\n  // Options should be wrapped in a `wkb` key, but we allow top-level options here for backwards\n  // compatibility\n  if ('wkb' in options) {\n    options = options.wkb;\n  }\n\n  switch (geometry.type) {\n    case 'Point':\n      return encodePoint(geometry.coordinates, options);\n    case 'LineString':\n      return encodeLineString(geometry.coordinates, options);\n    case 'Polygon':\n      return encodePolygon(geometry.coordinates, options);\n    case 'MultiPoint':\n      return encodeMultiPoint(geometry, options);\n    case 'MultiPolygon':\n      return encodeMultiPolygon(geometry, options);\n    case 'MultiLineString':\n      return encodeMultiLineString(geometry, options);\n    case 'GeometryCollection':\n      return encodeGeometryCollection(geometry, options);\n    default:\n      const exhaustiveCheck: never = geometry;\n      throw new Error(`Unhandled case: ${exhaustiveCheck}`);\n  }\n}\n\n/** Calculate the binary size (in the WKB encoding) of a specific GeoJSON geometry */\nfunction getGeometrySize(geometry: Geometry, options: WKBOptions): number {\n  switch (geometry.type) {\n    case 'Point':\n      return getPointSize(options);\n    case 'LineString':\n      return getLineStringSize(geometry.coordinates, options);\n    case 'Polygon':\n      return getPolygonSize(geometry.coordinates, options);\n    case 'MultiPoint':\n      return getMultiPointSize(geometry, options);\n    case 'MultiPolygon':\n      return getMultiPolygonSize(geometry, options);\n    case 'MultiLineString':\n      return getMultiLineStringSize(geometry, options);\n    case 'GeometryCollection':\n      return getGeometryCollectionSize(geometry, options);\n    default:\n      const exhaustiveCheck: never = geometry;\n      throw new Error(`Unhandled case: ${exhaustiveCheck}`);\n  }\n}\n\n/** Encode Point geometry as WKB ArrayBuffer */\nfunction encodePoint(coordinates: Point['coordinates'], options: WKBOptions): ArrayBuffer {\n  const writer = new BinaryWriter(getPointSize(options));\n\n  writer.writeInt8(1);\n  writeWkbType(writer, WKB.Point, options);\n\n  // I believe this special case is to handle writing Point(NaN, NaN) correctly\n  if (typeof coordinates[0] === 'undefined' && typeof coordinates[1] === 'undefined') {\n    writer.writeDoubleLE(NaN);\n    writer.writeDoubleLE(NaN);\n\n    if (options.hasZ) {\n      writer.writeDoubleLE(NaN);\n    }\n    if (options.hasM) {\n      writer.writeDoubleLE(NaN);\n    }\n  } else {\n    writeCoordinate(writer, coordinates, options);\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Write coordinate to buffer */\nfunction writeCoordinate(\n  writer: BinaryWriter,\n  coordinate: Point['coordinates'],\n  options: WKBOptions\n): void {\n  writer.writeDoubleLE(coordinate[0]);\n  writer.writeDoubleLE(coordinate[1]);\n\n  if (options.hasZ) {\n    writer.writeDoubleLE(coordinate[2]);\n  }\n  if (options.hasM) {\n    writer.writeDoubleLE(coordinate[3]);\n  }\n}\n\n/** Get encoded size of Point geometry */\nfunction getPointSize(options: WKBOptions): number {\n  const coordinateSize = getCoordinateSize(options);\n  return 1 + 4 + coordinateSize;\n}\n\n/** Encode LineString geometry as WKB ArrayBuffer */\nfunction encodeLineString(\n  coordinates: LineString['coordinates'],\n  options: WKBOptions\n): ArrayBuffer {\n  const size = getLineStringSize(coordinates, options);\n\n  const writer = new BinaryWriter(size);\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.LineString, options);\n  writer.writeUInt32LE(coordinates.length);\n\n  for (const coordinate of coordinates) {\n    writeCoordinate(writer, coordinate, options);\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Get encoded size of LineString geometry */\nfunction getLineStringSize(coordinates: LineString['coordinates'], options: WKBOptions): number {\n  const coordinateSize = getCoordinateSize(options);\n\n  return 1 + 4 + 4 + coordinates.length * coordinateSize;\n}\n\n/** Encode Polygon geometry as WKB ArrayBuffer */\nfunction encodePolygon(coordinates: Polygon['coordinates'], options: WKBOptions): ArrayBuffer {\n  const writer = new BinaryWriter(getPolygonSize(coordinates, options));\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.Polygon, options);\n  const [exteriorRing, ...interiorRings] = coordinates;\n\n  if (exteriorRing.length > 0) {\n    writer.writeUInt32LE(1 + interiorRings.length);\n    writer.writeUInt32LE(exteriorRing.length);\n  } else {\n    writer.writeUInt32LE(0);\n  }\n\n  for (const coordinate of exteriorRing) {\n    writeCoordinate(writer, coordinate, options);\n  }\n\n  for (const interiorRing of interiorRings) {\n    writer.writeUInt32LE(interiorRing.length);\n\n    for (const coordinate of interiorRing) {\n      writeCoordinate(writer, coordinate, options);\n    }\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Get encoded size of Polygon geometry */\nfunction getPolygonSize(coordinates: Polygon['coordinates'], options: WKBOptions): number {\n  const coordinateSize = getCoordinateSize(options);\n  const [exteriorRing, ...interiorRings] = coordinates;\n\n  let size = 1 + 4 + 4;\n\n  if (exteriorRing.length > 0) {\n    size += 4 + exteriorRing.length * coordinateSize;\n  }\n\n  for (const interiorRing of interiorRings) {\n    size += 4 + interiorRing.length * coordinateSize;\n  }\n\n  return size;\n}\n\n/** Encode MultiPoint geometry as WKB ArrayBufer */\nfunction encodeMultiPoint(multiPoint: MultiPoint, options: WKBOptions) {\n  const writer = new BinaryWriter(getMultiPointSize(multiPoint, options));\n  const points = multiPoint.coordinates;\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.MultiPoint, options);\n  writer.writeUInt32LE(points.length);\n\n  for (const point of points) {\n    // TODO: add srid to this options object? {srid: multiPoint.srid}\n    const arrayBuffer = encodePoint(point, options);\n    writer.writeBuffer(arrayBuffer);\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Get encoded size of MultiPoint geometry */\nfunction getMultiPointSize(multiPoint: MultiPoint, options: WKBOptions) {\n  let coordinateSize = getCoordinateSize(options);\n  const points = multiPoint.coordinates;\n\n  // This is because each point has a 5-byte header?\n  coordinateSize += 5;\n\n  return 1 + 4 + 4 + points.length * coordinateSize;\n}\n\n/** Encode MultiLineString geometry as WKB ArrayBufer */\nfunction encodeMultiLineString(multiLineString: MultiLineString, options: WKBOptions) {\n  const writer = new BinaryWriter(getMultiLineStringSize(multiLineString, options));\n  const lineStrings = multiLineString.coordinates;\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.MultiLineString, options);\n  writer.writeUInt32LE(lineStrings.length);\n\n  for (const lineString of lineStrings) {\n    // TODO: Handle srid?\n    const encodedLineString = encodeLineString(lineString, options);\n    writer.writeBuffer(encodedLineString);\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Get encoded size of MultiLineString geometry */\nfunction getMultiLineStringSize(multiLineString: MultiLineString, options: WKBOptions): number {\n  let size = 1 + 4 + 4;\n  const lineStrings = multiLineString.coordinates;\n\n  for (const lineString of lineStrings) {\n    size += getLineStringSize(lineString, options);\n  }\n\n  return size;\n}\n\nfunction encodeMultiPolygon(multiPolygon: MultiPolygon, options: WKBOptions): ArrayBuffer {\n  const writer = new BinaryWriter(getMultiPolygonSize(multiPolygon, options));\n  const polygons = multiPolygon.coordinates;\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.MultiPolygon, options);\n  writer.writeUInt32LE(polygons.length);\n\n  for (const polygon of polygons) {\n    const encodedPolygon = encodePolygon(polygon, options);\n    writer.writeBuffer(encodedPolygon);\n  }\n\n  return writer.arrayBuffer;\n}\n\nfunction getMultiPolygonSize(multiPolygon: MultiPolygon, options: WKBOptions): number {\n  let size = 1 + 4 + 4;\n  const polygons = multiPolygon.coordinates;\n\n  for (const polygon of polygons) {\n    size += getPolygonSize(polygon, options);\n  }\n\n  return size;\n}\n\nfunction encodeGeometryCollection(\n  collection: GeometryCollection,\n  options: WKBOptions\n): ArrayBuffer {\n  const writer = new BinaryWriter(getGeometryCollectionSize(collection, options));\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.GeometryCollection, options);\n  writer.writeUInt32LE(collection.geometries.length);\n\n  for (const geometry of collection.geometries) {\n    // TODO: handle srid? {srid: collection.srid}\n    const arrayBuffer = encodeWKB(geometry, options);\n    writer.writeBuffer(arrayBuffer);\n  }\n\n  return writer.arrayBuffer;\n}\n\nfunction getGeometryCollectionSize(collection: GeometryCollection, options: WKBOptions): number {\n  let size = 1 + 4 + 4;\n\n  for (const geometry of collection.geometries) {\n    size += getGeometrySize(geometry, options);\n  }\n\n  return size;\n}\n\n// HELPERS\n\n/**\n * Construct and write WKB integer code\n * Reference: https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary\n */\nfunction writeWkbType(writer: BinaryWriter, geometryType: number, options: WKBOptions): void {\n  const {hasZ, hasM, srid} = options;\n\n  let dimensionType = 0;\n\n  if (!srid) {\n    if (hasZ && hasM) {\n      dimensionType += 3000;\n    } else if (hasZ) {\n      dimensionType += 1000;\n    } else if (hasM) {\n      dimensionType += 2000;\n    }\n  } else {\n    if (hasZ) {\n      dimensionType |= 0x80000000;\n    }\n    if (hasM) {\n      dimensionType |= 0x40000000;\n    }\n  }\n\n  writer.writeUInt32LE((dimensionType + geometryType) >>> 0);\n}\n\n/** Get coordinate size given Z/M dimensions */\nfunction getCoordinateSize(options: WKBOptions): number {\n  let coordinateSize = 16;\n\n  if (options.hasZ) {\n    coordinateSize += 8;\n  }\n  if (options.hasM) {\n    coordinateSize += 8;\n  }\n\n  return coordinateSize;\n}\n"],"mappings":"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"}