{"version":3,"file":"encode-wkb.js","names":["BinaryWriter","WKB","encodeWKB","geometry","options","arguments","length","undefined","type","wkb","encodePoint","coordinates","encodeLineString","encodePolygon","encodeMultiPoint","encodeMultiPolygon","encodeMultiLineString","encodeGeometryCollection","exhaustiveCheck","Error","concat","getGeometrySize","getPointSize","getLineStringSize","getPolygonSize","getMultiPointSize","getMultiPolygonSize","getMultiLineStringSize","getGeometryCollectionSize","writer","writeInt8","writeWkbType","Point","writeDoubleLE","NaN","hasZ","hasM","writeCoordinate","arrayBuffer","coordinate","coordinateSize","getCoordinateSize","size","LineString","writeUInt32LE","Polygon","exteriorRing","interiorRings","interiorRing","multiPoint","points","MultiPoint","point","writeBuffer","multiLineString","lineStrings","MultiLineString","lineString","encodedLineString","multiPolygon","polygons","MultiPolygon","polygon","encodedPolygon","collection","GeometryCollection","geometries","geometryType","srid","dimensionType"],"sources":["../../../src/lib/encode-wkb.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Forked from https://github.com/cschwarz/wkx under MIT license, Copyright (c) 2013 Christian Schwarz\n// Reference: https://www.ogc.org/standards/sfa\n\nimport type {\n  Feature,\n  Geometry,\n  Point,\n  MultiPoint,\n  LineString,\n  MultiLineString,\n  Polygon,\n  MultiPolygon,\n  GeometryCollection\n} from '@loaders.gl/schema';\n\nimport BinaryWriter from './utils/binary-writer';\n\n/**\n * Integer code for geometry type\n * Reference: https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary\n */\nenum WKB {\n  Point = 1,\n  LineString = 2,\n  Polygon = 3,\n  MultiPoint = 4,\n  MultiLineString = 5,\n  MultiPolygon = 6,\n  GeometryCollection = 7\n}\n\n/**\n * Options for encodeWKB\n */\ninterface WKBOptions {\n  /** Does the GeoJSON input have Z values? */\n  hasZ?: boolean;\n\n  /** Does the GeoJSON input have M values? */\n  hasM?: boolean;\n\n  /** Spatial reference for input GeoJSON */\n  srid?: any;\n}\n\n/**\n * Encodes a GeoJSON object into WKB\n * @param geojson A GeoJSON Feature or Geometry\n * @returns string\n */\nexport default function encodeWKB(\n  geometry: Geometry | Feature,\n  options: WKBOptions | {wkb: WKBOptions} = {}\n): ArrayBuffer {\n  if (geometry.type === 'Feature') {\n    geometry = geometry.geometry;\n  }\n\n  // Options should be wrapped in a `wkb` key, but we allow top-level options here for backwards\n  // compatibility\n  if ('wkb' in options) {\n    options = options.wkb;\n  }\n\n  switch (geometry.type) {\n    case 'Point':\n      return encodePoint(geometry.coordinates, options);\n    case 'LineString':\n      return encodeLineString(geometry.coordinates, options);\n    case 'Polygon':\n      return encodePolygon(geometry.coordinates, options);\n    case 'MultiPoint':\n      return encodeMultiPoint(geometry, options);\n    case 'MultiPolygon':\n      return encodeMultiPolygon(geometry, options);\n    case 'MultiLineString':\n      return encodeMultiLineString(geometry, options);\n    case 'GeometryCollection':\n      return encodeGeometryCollection(geometry, options);\n    default:\n      const exhaustiveCheck: never = geometry;\n      throw new Error(`Unhandled case: ${exhaustiveCheck}`);\n  }\n}\n\n/** Calculate the binary size (in the WKB encoding) of a specific GeoJSON geometry */\nfunction getGeometrySize(geometry: Geometry, options: WKBOptions): number {\n  switch (geometry.type) {\n    case 'Point':\n      return getPointSize(options);\n    case 'LineString':\n      return getLineStringSize(geometry.coordinates, options);\n    case 'Polygon':\n      return getPolygonSize(geometry.coordinates, options);\n    case 'MultiPoint':\n      return getMultiPointSize(geometry, options);\n    case 'MultiPolygon':\n      return getMultiPolygonSize(geometry, options);\n    case 'MultiLineString':\n      return getMultiLineStringSize(geometry, options);\n    case 'GeometryCollection':\n      return getGeometryCollectionSize(geometry, options);\n    default:\n      const exhaustiveCheck: never = geometry;\n      throw new Error(`Unhandled case: ${exhaustiveCheck}`);\n  }\n}\n\n/** Encode Point geometry as WKB ArrayBuffer */\nfunction encodePoint(coordinates: Point['coordinates'], options: WKBOptions): ArrayBuffer {\n  const writer = new BinaryWriter(getPointSize(options));\n\n  writer.writeInt8(1);\n  writeWkbType(writer, WKB.Point, options);\n\n  // I believe this special case is to handle writing Point(NaN, NaN) correctly\n  if (typeof coordinates[0] === 'undefined' && typeof coordinates[1] === 'undefined') {\n    writer.writeDoubleLE(NaN);\n    writer.writeDoubleLE(NaN);\n\n    if (options.hasZ) {\n      writer.writeDoubleLE(NaN);\n    }\n    if (options.hasM) {\n      writer.writeDoubleLE(NaN);\n    }\n  } else {\n    writeCoordinate(writer, coordinates, options);\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Write coordinate to buffer */\nfunction writeCoordinate(\n  writer: BinaryWriter,\n  coordinate: Point['coordinates'],\n  options: WKBOptions\n): void {\n  writer.writeDoubleLE(coordinate[0]);\n  writer.writeDoubleLE(coordinate[1]);\n\n  if (options.hasZ) {\n    writer.writeDoubleLE(coordinate[2]);\n  }\n  if (options.hasM) {\n    writer.writeDoubleLE(coordinate[3]);\n  }\n}\n\n/** Get encoded size of Point geometry */\nfunction getPointSize(options: WKBOptions): number {\n  const coordinateSize = getCoordinateSize(options);\n  return 1 + 4 + coordinateSize;\n}\n\n/** Encode LineString geometry as WKB ArrayBuffer */\nfunction encodeLineString(\n  coordinates: LineString['coordinates'],\n  options: WKBOptions\n): ArrayBuffer {\n  const size = getLineStringSize(coordinates, options);\n\n  const writer = new BinaryWriter(size);\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.LineString, options);\n  writer.writeUInt32LE(coordinates.length);\n\n  for (const coordinate of coordinates) {\n    writeCoordinate(writer, coordinate, options);\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Get encoded size of LineString geometry */\nfunction getLineStringSize(coordinates: LineString['coordinates'], options: WKBOptions): number {\n  const coordinateSize = getCoordinateSize(options);\n\n  return 1 + 4 + 4 + coordinates.length * coordinateSize;\n}\n\n/** Encode Polygon geometry as WKB ArrayBuffer */\nfunction encodePolygon(coordinates: Polygon['coordinates'], options: WKBOptions): ArrayBuffer {\n  const writer = new BinaryWriter(getPolygonSize(coordinates, options));\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.Polygon, options);\n  const [exteriorRing, ...interiorRings] = coordinates;\n\n  if (exteriorRing.length > 0) {\n    writer.writeUInt32LE(1 + interiorRings.length);\n    writer.writeUInt32LE(exteriorRing.length);\n  } else {\n    writer.writeUInt32LE(0);\n  }\n\n  for (const coordinate of exteriorRing) {\n    writeCoordinate(writer, coordinate, options);\n  }\n\n  for (const interiorRing of interiorRings) {\n    writer.writeUInt32LE(interiorRing.length);\n\n    for (const coordinate of interiorRing) {\n      writeCoordinate(writer, coordinate, options);\n    }\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Get encoded size of Polygon geometry */\nfunction getPolygonSize(coordinates: Polygon['coordinates'], options: WKBOptions): number {\n  const coordinateSize = getCoordinateSize(options);\n  const [exteriorRing, ...interiorRings] = coordinates;\n\n  let size = 1 + 4 + 4;\n\n  if (exteriorRing.length > 0) {\n    size += 4 + exteriorRing.length * coordinateSize;\n  }\n\n  for (const interiorRing of interiorRings) {\n    size += 4 + interiorRing.length * coordinateSize;\n  }\n\n  return size;\n}\n\n/** Encode MultiPoint geometry as WKB ArrayBufer */\nfunction encodeMultiPoint(multiPoint: MultiPoint, options: WKBOptions) {\n  const writer = new BinaryWriter(getMultiPointSize(multiPoint, options));\n  const points = multiPoint.coordinates;\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.MultiPoint, options);\n  writer.writeUInt32LE(points.length);\n\n  for (const point of points) {\n    // TODO: add srid to this options object? {srid: multiPoint.srid}\n    const arrayBuffer = encodePoint(point, options);\n    writer.writeBuffer(arrayBuffer);\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Get encoded size of MultiPoint geometry */\nfunction getMultiPointSize(multiPoint: MultiPoint, options: WKBOptions) {\n  let coordinateSize = getCoordinateSize(options);\n  const points = multiPoint.coordinates;\n\n  // This is because each point has a 5-byte header?\n  coordinateSize += 5;\n\n  return 1 + 4 + 4 + points.length * coordinateSize;\n}\n\n/** Encode MultiLineString geometry as WKB ArrayBufer */\nfunction encodeMultiLineString(multiLineString: MultiLineString, options: WKBOptions) {\n  const writer = new BinaryWriter(getMultiLineStringSize(multiLineString, options));\n  const lineStrings = multiLineString.coordinates;\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.MultiLineString, options);\n  writer.writeUInt32LE(lineStrings.length);\n\n  for (const lineString of lineStrings) {\n    // TODO: Handle srid?\n    const encodedLineString = encodeLineString(lineString, options);\n    writer.writeBuffer(encodedLineString);\n  }\n\n  return writer.arrayBuffer;\n}\n\n/** Get encoded size of MultiLineString geometry */\nfunction getMultiLineStringSize(multiLineString: MultiLineString, options: WKBOptions): number {\n  let size = 1 + 4 + 4;\n  const lineStrings = multiLineString.coordinates;\n\n  for (const lineString of lineStrings) {\n    size += getLineStringSize(lineString, options);\n  }\n\n  return size;\n}\n\nfunction encodeMultiPolygon(multiPolygon: MultiPolygon, options: WKBOptions): ArrayBuffer {\n  const writer = new BinaryWriter(getMultiPolygonSize(multiPolygon, options));\n  const polygons = multiPolygon.coordinates;\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.MultiPolygon, options);\n  writer.writeUInt32LE(polygons.length);\n\n  for (const polygon of polygons) {\n    const encodedPolygon = encodePolygon(polygon, options);\n    writer.writeBuffer(encodedPolygon);\n  }\n\n  return writer.arrayBuffer;\n}\n\nfunction getMultiPolygonSize(multiPolygon: MultiPolygon, options: WKBOptions): number {\n  let size = 1 + 4 + 4;\n  const polygons = multiPolygon.coordinates;\n\n  for (const polygon of polygons) {\n    size += getPolygonSize(polygon, options);\n  }\n\n  return size;\n}\n\nfunction encodeGeometryCollection(\n  collection: GeometryCollection,\n  options: WKBOptions\n): ArrayBuffer {\n  const writer = new BinaryWriter(getGeometryCollectionSize(collection, options));\n\n  writer.writeInt8(1);\n\n  writeWkbType(writer, WKB.GeometryCollection, options);\n  writer.writeUInt32LE(collection.geometries.length);\n\n  for (const geometry of collection.geometries) {\n    // TODO: handle srid? {srid: collection.srid}\n    const arrayBuffer = encodeWKB(geometry, options);\n    writer.writeBuffer(arrayBuffer);\n  }\n\n  return writer.arrayBuffer;\n}\n\nfunction getGeometryCollectionSize(collection: GeometryCollection, options: WKBOptions): number {\n  let size = 1 + 4 + 4;\n\n  for (const geometry of collection.geometries) {\n    size += getGeometrySize(geometry, options);\n  }\n\n  return size;\n}\n\n// HELPERS\n\n/**\n * Construct and write WKB integer code\n * Reference: https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry#Well-known_binary\n */\nfunction writeWkbType(writer: BinaryWriter, geometryType: number, options: WKBOptions): void {\n  const {hasZ, hasM, srid} = options;\n\n  let dimensionType = 0;\n\n  if (!srid) {\n    if (hasZ && hasM) {\n      dimensionType += 3000;\n    } else if (hasZ) {\n      dimensionType += 1000;\n    } else if (hasM) {\n      dimensionType += 2000;\n    }\n  } else {\n    if (hasZ) {\n      dimensionType |= 0x80000000;\n    }\n    if (hasM) {\n      dimensionType |= 0x40000000;\n    }\n  }\n\n  writer.writeUInt32LE((dimensionType + geometryType) >>> 0);\n}\n\n/** Get coordinate size given Z/M dimensions */\nfunction getCoordinateSize(options: WKBOptions): number {\n  let coordinateSize = 16;\n\n  if (options.hasZ) {\n    coordinateSize += 8;\n  }\n  if (options.hasM) {\n    coordinateSize += 8;\n  }\n\n  return coordinateSize;\n}\n"],"mappings":"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"}