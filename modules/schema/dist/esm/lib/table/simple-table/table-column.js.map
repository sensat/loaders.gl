{"version":3,"file":"table-column.js","names":["getArrayTypeFromDataType","makeColumnFromField","field","length","ArrayType","type","nullable"],"sources":["../../../../../src/lib/table/simple-table/table-column.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// import type {TypedArray,} from '../../../types/types';\nimport {Field} from '../../../types/schema';\nimport {getArrayTypeFromDataType} from './data-type';\n\nexport interface ArrayType<T = unknown> {\n  readonly length: number;\n  [n: number]: T;\n}\n\nexport function makeColumnFromField(field: Field, length: number): ArrayType {\n  const ArrayType = getArrayTypeFromDataType(field.type, field.nullable);\n  return new ArrayType(length);\n}\n\n/*\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction deduceSchema(rows) {\n  const row = rows[0];\n\n  const schema = {};\n  let i = 0;\n  for (const columnName in row) {\n    const value = row[columnName];\n    switch (typeof value) {\n      case 'number':\n      case 'boolean':\n        // TODO - booleans could be handled differently...\n        schema[columnName] = {name: String(columnName), index: i, type: Float32Array};\n        break;\n\n      case 'object':\n        schema[columnName] = {name: String(columnName), index: i, type: Array};\n        break;\n\n      case 'string':\n      default:\n        schema[columnName] = {name: String(columnName), index: i, type: Array};\n      // We currently only handle numeric rows\n      // TODO we could offer a function to map strings to numbers?\n    }\n    i++;\n  }\n  return schema;\n}\n*/\n"],"mappings":"AAIA,SAAQA,wBAAwB,QAAO,aAAa;AAOpD,OAAO,SAASC,mBAAmBA,CAACC,KAAY,EAAEC,MAAc,EAAa;EAC3E,MAAMC,SAAS,GAAGJ,wBAAwB,CAACE,KAAK,CAACG,IAAI,EAAEH,KAAK,CAACI,QAAQ,CAAC;EACtE,OAAO,IAAIF,SAAS,CAACD,MAAM,CAAC;AAC9B"}