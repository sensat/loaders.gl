{"version":3,"file":"convert-table.js","names":["getTableCell","getTableLength","getTableRowAsArray","getTableRowAsObject","deduceTableSchema","makeColumnFromField","makeColumnarTable","table","_table$schema","schema","fields","shape","length","columns","field","column","name","rowIndex","data","makeArrayRowTable","Array","makeObjectRowTable"],"sources":["../../../../../src/lib/table/simple-table/convert-table.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {\n  getTableCell,\n  getTableLength,\n  getTableRowAsArray,\n  getTableRowAsObject\n} from './table-accessors';\nimport {Table, ArrayRowTable, ObjectRowTable, ColumnarTable} from '../../../types/category-table';\nimport {deduceTableSchema} from './table-schema';\nimport {makeColumnFromField} from './table-column';\n\n/** Convert any simple table into columnar format */\nexport function makeColumnarTable(table: Table): ColumnarTable {\n  // TODO - should schema really be optional?\n  const schema = table.schema || deduceTableSchema(table);\n  const fields = table.schema?.fields || [];\n\n  if (table.shape === 'columnar-table') {\n    return {...table, schema};\n  }\n\n  const length = getTableLength(table);\n\n  const columns: {[column: string]: ArrayLike<unknown>} = {};\n  for (const field of fields) {\n    const column = makeColumnFromField(field, length);\n    columns[field.name] = column;\n    for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n      column[rowIndex] = getTableCell(table, rowIndex, field.name);\n    }\n  }\n\n  return {\n    shape: 'columnar-table',\n    schema,\n    data: columns\n  };\n}\n\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table: Table): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n"],"mappings":"AACA,SACEA,YAAY,EACZC,cAAc,EACdC,kBAAkB,EAClBC,mBAAmB,QACd,mBAAmB;AAE1B,SAAQC,iBAAiB,QAAO,gBAAgB;AAChD,SAAQC,mBAAmB,QAAO,gBAAgB;AAGlD,OAAO,SAASC,iBAAiBA,CAACC,KAAY,EAAiB;EAAA,IAAAC,aAAA;EAE7D,MAAMC,MAAM,GAAGF,KAAK,CAACE,MAAM,IAAIL,iBAAiB,CAACG,KAAK,CAAC;EACvD,MAAMG,MAAM,GAAG,EAAAF,aAAA,GAAAD,KAAK,CAACE,MAAM,cAAAD,aAAA,uBAAZA,aAAA,CAAcE,MAAM,KAAI,EAAE;EAEzC,IAAIH,KAAK,CAACI,KAAK,KAAK,gBAAgB,EAAE;IACpC,OAAO;MAAC,GAAGJ,KAAK;MAAEE;IAAM,CAAC;EAC3B;EAEA,MAAMG,MAAM,GAAGX,cAAc,CAACM,KAAK,CAAC;EAEpC,MAAMM,OAA+C,GAAG,CAAC,CAAC;EAC1D,KAAK,MAAMC,KAAK,IAAIJ,MAAM,EAAE;IAC1B,MAAMK,MAAM,GAAGV,mBAAmB,CAACS,KAAK,EAAEF,MAAM,CAAC;IACjDC,OAAO,CAACC,KAAK,CAACE,IAAI,CAAC,GAAGD,MAAM;IAC5B,KAAK,IAAIE,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGL,MAAM,EAAEK,QAAQ,EAAE,EAAE;MACpDF,MAAM,CAACE,QAAQ,CAAC,GAAGjB,YAAY,CAACO,KAAK,EAAEU,QAAQ,EAAEH,KAAK,CAACE,IAAI,CAAC;IAC9D;EACF;EAEA,OAAO;IACLL,KAAK,EAAE,gBAAgB;IACvBF,MAAM;IACNS,IAAI,EAAEL;EACR,CAAC;AACH;AAGA,OAAO,SAASM,iBAAiBA,CAACZ,KAAY,EAAiB;EAC7D,IAAIA,KAAK,CAACI,KAAK,KAAK,iBAAiB,EAAE;IACrC,OAAOJ,KAAK;EACd;EACA,MAAMK,MAAM,GAAGX,cAAc,CAACM,KAAK,CAAC;EACpC,MAAMW,IAAI,GAAG,IAAIE,KAAK,CAAYR,MAAM,CAAC;EACzC,KAAK,IAAIK,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGL,MAAM,EAAEK,QAAQ,EAAE,EAAE;IACpDC,IAAI,CAACD,QAAQ,CAAC,GAAGf,kBAAkB,CAACK,KAAK,EAAEU,QAAQ,CAAC;EACtD;EACA,OAAO;IACLN,KAAK,EAAE,iBAAiB;IACxBF,MAAM,EAAEF,KAAK,CAACE,MAAM;IACpBS;EACF,CAAC;AACH;AAGA,OAAO,SAASG,kBAAkBA,CAACd,KAAY,EAAkB;EAC/D,IAAIA,KAAK,CAACI,KAAK,KAAK,kBAAkB,EAAE;IACtC,OAAOJ,KAAK;EACd;EACA,MAAMK,MAAM,GAAGX,cAAc,CAACM,KAAK,CAAC;EACpC,MAAMW,IAAI,GAAG,IAAIE,KAAK,CAA2BR,MAAM,CAAC;EACxD,KAAK,IAAIK,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGL,MAAM,EAAEK,QAAQ,EAAE,EAAE;IACpDC,IAAI,CAACD,QAAQ,CAAC,GAAGd,mBAAmB,CAACI,KAAK,EAAEU,QAAQ,CAAC;EACvD;EACA,OAAO;IACLN,KAAK,EAAE,kBAAkB;IACzBF,MAAM,EAAEF,KAAK,CAACE,MAAM;IACpBS;EACF,CAAC;AACH"}