{"version":3,"file":"table-accessors.js","names":["getTableLength","table","shape","data","length","numRows","column","Object","values","Error","getTableNumCols","schema","fields","keys","numCols","getTableCell","rowIndex","columnName","_table$data$getChildA","columnIndex","getTableColumnIndex","arrowColumnIndex","findIndex","field","name","getChildAt","get","getTableCellAt","_table$data$getChildA2","getTableColumnName","getTableRowShape","_table$schema","undefined","_table$schema2","_table$schema2$fields","concat","getTableRowAsObject","target","copy","fromEntries","entries","objectRow","i","row","getTableRowAsArray","Array","from","arrayRow","makeArrayRowTable","makeObjectRowTable","makeColumnarTable","makeRowIterator","makeArrayRowIterator","makeObjectRowIterator","arguments"],"sources":["../../../../../src/lib/table/simple-table/table-accessors.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/* eslint-disable no-else-return */\n\nimport {Table, ArrayRowTable, ObjectRowTable} from '../../../types/category-table';\n\n/**\n * Returns the length of the table (i.e. the number of rows)\n */\nexport function getTableLength(table: Table): number {\n  switch (table.shape) {\n    case 'array-row-table':\n    case 'object-row-table':\n    case 'geojson-row-table':\n      return table.data.length;\n\n    case 'arrow-table':\n      return table.data.numRows;\n\n    case 'columnar-table':\n      for (const column of Object.values(table.data)) {\n        return column.length || 0;\n      }\n      return 0;\n    default:\n      throw new Error('table');\n  }\n}\n\n/**\n * Returns the number of columns in the table\n * @throws Fails to deduce number of columns if the table has no schema and is empty\n */\nexport function getTableNumCols(table: Table): number {\n  if (table.schema) {\n    return table.schema.fields.length;\n  }\n  if (getTableLength(table) === 0) {\n    throw new Error('empty table');\n  }\n  switch (table.shape) {\n    case 'array-row-table':\n      return table.data[0].length;\n    case 'object-row-table':\n    case 'geojson-row-table':\n      return Object.keys(table.data[0]).length;\n\n    case 'columnar-table':\n      return Object.keys(table.data).length;\n\n    case 'arrow-table':\n      return table.data.numCols;\n    default:\n      throw new Error('table');\n  }\n}\n\n/** Get a table cell value at row index and column name */\nexport function getTableCell(table: Table, rowIndex: number, columnName: string): unknown {\n  switch (table.shape) {\n    case 'array-row-table':\n      const columnIndex = getTableColumnIndex(table, columnName);\n      return table.data[rowIndex][columnIndex];\n\n    case 'object-row-table':\n    case 'geojson-row-table':\n      return table.data[rowIndex][columnName];\n\n    case 'columnar-table':\n      const column = table.data[columnName];\n      return column[rowIndex];\n\n    case 'arrow-table':\n      const arrowColumnIndex = table.data.schema.fields.findIndex(\n        (field) => field.name === columnName\n      );\n      return table.data.getChildAt(arrowColumnIndex)?.get(rowIndex);\n\n    default:\n      throw new Error('todo');\n  }\n}\n\n/** Get a table cell value at row index and column name */\nexport function getTableCellAt(table: Table, rowIndex: number, columnIndex: number): unknown {\n  switch (table.shape) {\n    case 'array-row-table':\n      return table.data[rowIndex][columnIndex];\n\n    case 'object-row-table':\n    case 'geojson-row-table':\n      let columnName = getTableColumnName(table, columnIndex);\n      return table.data[rowIndex][columnName];\n\n    case 'columnar-table':\n      columnName = getTableColumnName(table, columnIndex);\n      const column = table.data[columnName];\n      return column[rowIndex];\n\n    case 'arrow-table':\n      return table.data.getChildAt(columnIndex)?.get(rowIndex);\n\n    default:\n      throw new Error('todo');\n  }\n}\n\n/** Deduce the table row shape */\nexport function getTableRowShape(table: Table): 'array-row-table' | 'object-row-table' {\n  switch (table.shape) {\n    case 'array-row-table':\n    case 'object-row-table':\n      return table.shape;\n\n    case 'geojson-row-table':\n      return 'object-row-table';\n\n    case 'columnar-table':\n    default:\n      throw new Error('Not a row table');\n  }\n}\n\n/** Get the index of a named table column. Requires the table to have a schema */\nexport function getTableColumnIndex(table: Table, columnName: string): number {\n  const columnIndex = table.schema?.fields.findIndex((field) => field.name === columnName);\n  if (columnIndex === undefined) {\n    throw new Error(columnName);\n  }\n  return columnIndex;\n}\n\n/** Get the name of a table column by index. Requires the table to have a schema */\nexport function getTableColumnName(table: Table, columnIndex: number): string {\n  const columnName = table.schema?.fields[columnIndex]?.name;\n  if (!columnName) {\n    throw new Error(`${columnIndex}`);\n  }\n  return columnName;\n}\n\n/**\n * Returns one row of the table in object format.\n * @param target Optional parameter will be used if needed to store the row. Can be reused between calls to improve performance\n * @returns an array representing the row. May be the original array in the row, a new object, or the target parameter\n */\n// eslint-disable-next-line complexity\nexport function getTableRowAsObject(\n  table: Table,\n  rowIndex: number,\n  target?: {[columnName: string]: unknown},\n  copy?: 'copy'\n): {[columnName: string]: unknown} {\n  switch (table.shape) {\n    case 'object-row-table':\n      return copy ? Object.fromEntries(Object.entries(table.data[rowIndex])) : table.data[rowIndex];\n\n    case 'array-row-table':\n    case 'geojson-row-table':\n      if (table.schema) {\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          objectRow[table.schema.fields[i].name] = table.data[rowIndex][i];\n        }\n        return objectRow;\n      }\n      throw new Error('no schema');\n\n    case 'columnar-table':\n      if (table.schema) {\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          objectRow[table.schema.fields[i].name] =\n            table.data[table.schema.fields[i].name][rowIndex];\n        }\n        return objectRow;\n      } else {\n        // eslint-disable-line no-else-return\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (const [name, column] of Object.entries(table.data)) {\n          objectRow[name] = column[rowIndex];\n        }\n        return objectRow;\n      }\n\n    case 'arrow-table':\n      const objectRow: {[columnName: string]: unknown} = target || {};\n      const row = table.data.get(rowIndex);\n      const schema = table.data.schema;\n      for (let i = 0; i < schema.fields.length; i++) {\n        objectRow[schema.fields[i].name] = row?.[schema.fields[i].name];\n      }\n      return objectRow;\n\n    default:\n      throw new Error('shape');\n  }\n}\n\n/**\n * Returns one row of the table in array format.\n * @param target Optional parameter will be used if needed to store the row. Can be reused between calls to improve performance.\n * @returns an array representing the row. May be the original array in the row, a new object, or the target parameter\n */\n// eslint-disable-next-line complexity\nexport function getTableRowAsArray(\n  table: Table,\n  rowIndex: number,\n  target?: unknown[],\n  copy?: 'copy'\n): unknown[] {\n  switch (table.shape) {\n    case 'array-row-table':\n      return copy ? Array.from(table.data[rowIndex]) : table.data[rowIndex];\n\n    case 'object-row-table':\n    case 'geojson-row-table':\n      if (table.schema) {\n        const arrayRow: unknown[] = target || [];\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          arrayRow[i] = table.data[rowIndex][table.schema.fields[i].name];\n        }\n        return arrayRow;\n      }\n      // Warning: just slap on the values, this risks mismatches between rows\n      return Object.values(table.data[rowIndex]);\n\n    case 'columnar-table':\n      if (table.schema) {\n        const arrayRow: unknown[] = target || [];\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          arrayRow[i] = table.data[table.schema.fields[i].name][rowIndex];\n        }\n        return arrayRow;\n      } else {\n        // eslint-disable-line no-else-return\n        const arrayRow: unknown[] = target || [];\n        let i = 0;\n        for (const column of Object.values(table.data)) {\n          arrayRow[i] = column[rowIndex];\n          i++;\n        }\n        return arrayRow;\n      }\n\n    case 'arrow-table':\n      const arrayRow: unknown[] = target || [];\n      const row = table.data.get(rowIndex);\n      const schema = table.data.schema;\n      for (let i = 0; i < schema.fields.length; i++) {\n        arrayRow[i] = row?.[schema.fields[i].name];\n      }\n      return arrayRow;\n\n    default:\n      throw new Error('shape');\n  }\n}\n\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table: Table): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeColumnarTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n// Row Iterators\n\n/**\n * Iterate over table rows\n * @param table\n * @param shape\n */\nexport function* makeRowIterator(\n  table: Table,\n  shape: 'object-row-table' | 'array-row-table'\n): Iterable<unknown[] | {[key: string]: unknown}> {\n  switch (shape) {\n    case 'array-row-table':\n      yield* makeArrayRowIterator(table);\n      break;\n    case 'object-row-table':\n      yield* makeObjectRowIterator(table);\n      break;\n\n    default:\n      throw new Error(`Unknown row type ${shape}`);\n  }\n}\n\n/**\n * Streaming processing: Iterate over table, yielding array rows\n * @param table\n * @param shape\n */\nexport function* makeArrayRowIterator(table: Table, target: unknown[] = []): Iterable<unknown[]> {\n  const length = getTableLength(table);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    yield getTableRowAsArray(table, rowIndex, target);\n  }\n}\n\n/**\n * Streaming processing: Iterate over table, yielding object rows\n * @param table\n * @param shape\n */\nexport function* makeObjectRowIterator(\n  table: Table,\n  target: {[key: string]: unknown} = {}\n): Iterable<{[key: string]: unknown}> {\n  const length = getTableLength(table);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    yield getTableRowAsObject(table, rowIndex, target);\n  }\n}\n"],"mappings":"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"}