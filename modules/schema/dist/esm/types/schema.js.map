{"version":3,"file":"schema.js","names":[],"sources":["../../../src/types/schema.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {RecordBatch} from 'apache-arrow';\n\n/** For dictionary type */\nexport type KeyType = 'int8' | 'int16' | 'int32' | 'uint8' | 'uint16' | 'uint32';\n\n/** ArrowLike DataType class */\nexport type DataType =\n  | 'null'\n  // Primitive types\n  | 'bool'\n  | 'int'\n  | 'int8'\n  | 'int16'\n  | 'int32'\n  | 'int64'\n  | 'uint8'\n  | 'uint16'\n  | 'uint32'\n  | 'uint64'\n  | 'float'\n  | 'float16'\n  | 'float32'\n  | 'float64'\n  | 'binary'\n  | 'utf8'\n  | 'date-day'\n  | 'date-millisecond'\n  | 'time-second'\n  | 'time-millisecond'\n  | 'time-microsecond'\n  | 'time-nanosecond'\n  | 'timestamp-second'\n  | 'timestamp-millisecond'\n  | 'timestamp-microsecond'\n  | 'timestamp-nanosecond'\n  | 'interval-daytime'\n  | 'interval-yearmonth'\n  // Composite types\n  | {type: 'list'; children: Field[]} // one child only\n  | {type: 'struct'; children: Field[]}\n  | {\n      type: 'sparse-union';\n      typeIds: Int32Array;\n      children: Field[];\n      typeIdToChildIndex: {[key: number]: number};\n    }\n  | {\n      type: 'dense-union';\n      typeIds: Int32Array;\n      children: Field[];\n      typeIdToChildIndex: {[key: number]: number};\n    }\n  | {type: 'fixed-size-binary'; byteWidth: number}\n  | {type: 'fixed-size-list'; listSize: number; children: Field[]}\n  | {type: 'map'; keysSorted: boolean; children: Field[]} // Field is \"struct\"\n  | {type: 'dictionary'; id: number; indices: KeyType; dictionary: DataType; isOrdered: boolean};\n// TODO - unions etc\n\n/**\n * SchemaMetadata\n */\nexport type SchemaMetadata = Record<string, string>;\nexport type FieldMetadata = Record<string, string>;\n\nexport type Field = {\n  name: string;\n  type: DataType;\n  nullable?: boolean;\n  metadata?: FieldMetadata;\n};\n\n/**\n * `Schema` type that that can hold all data required by an Arrow Schema\n * but is fully serializable. Helper functions make it easy to convert to and from arrow schemas\n * https://loaders.gl/arrowjs/docs/api-reference/schema\n */\nexport type Schema = {\n  fields: Field[];\n  metadata: SchemaMetadata;\n};\n\nexport type Batch = {\n  batchType: 'data' | 'metadata' | 'partial-result' | 'final-result';\n  batch?: number;\n  mimeType?: string;\n  shape: string;\n  data: any;\n  recordBatch?: RecordBatch;\n  length: number;\n  schema?: Schema;\n  bytesUsed?: number;\n  count?: number;\n  cursor?: number;\n  [key: string]: any;\n};\n"],"mappings":""}