{"version":3,"file":"arrow-like-schema.js","names":["_arrowLikeField","require","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ArrowLikeSchema","fields","metadata","arguments","undefined","Map","_classCallCheck2","default","_defineProperty2","map","field","ArrowLikeField","type","nullable","entries","_createClass2","key","compareTo","other","select","nameMap","create","_len","columnNames","_key","_i","_columnNames","selectedFields","filter","selectAt","_this","_len2","columnIndices","_key2","index","Boolean","assign","schemaOrFields","otherArrowLikeSchema","mergeMaps","fieldMap","_iterator","_step","_iterator2","_step2","mergedFields","values","exports","m1","m2","concat","_toConsumableArray2"],"sources":["../../../../../src/lib/table/arrow-api/arrow-like-schema.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {SchemaMetadata, Field} from '../../../types/schema';\nimport {ArrowLikeField} from './arrow-like-field';\n\nexport class ArrowLikeSchema {\n  fields: ArrowLikeField[];\n  metadata: Map<string, string>;\n\n  constructor(\n    fields: ArrowLikeField[] | Field[],\n    metadata: SchemaMetadata | Map<string, string> = new Map<string, string>()\n  ) {\n    // checkNames(fields);\n    // For kepler fields, create arrow compatible `Fields` that have kepler fields as `metadata`\n    this.fields = fields.map(\n      (field) => new ArrowLikeField(field.name, field.type, field.nullable, field.metadata)\n    );\n    this.metadata =\n      metadata instanceof Map ? metadata : new Map<string, string>(Object.entries(metadata));\n  }\n\n  // TODO - arrow only seems to compare fields, not metadata\n  compareTo(other: ArrowLikeSchema): boolean {\n    if (this.metadata !== other.metadata) {\n      return false;\n    }\n    if (this.fields.length !== other.fields.length) {\n      return false;\n    }\n    for (let i = 0; i < this.fields.length; ++i) {\n      if (!this.fields[i].compareTo(other.fields[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  select(...columnNames: string[]): ArrowLikeSchema {\n    // Ensure column names reference valid fields\n    const nameMap = Object.create(null);\n    for (const name of columnNames) {\n      nameMap[name] = true;\n    }\n    const selectedFields = this.fields.filter((field) => nameMap[field.name]);\n    return new ArrowLikeSchema(selectedFields, this.metadata);\n  }\n\n  selectAt(...columnIndices: number[]): ArrowLikeSchema {\n    // Ensure column indices reference valid fields\n    const selectedFields = columnIndices.map((index) => this.fields[index]).filter(Boolean);\n    return new ArrowLikeSchema(selectedFields, this.metadata);\n  }\n\n  assign(schemaOrFields: ArrowLikeSchema | ArrowLikeField[]): ArrowLikeSchema {\n    let fields: ArrowLikeField[];\n    let metadata = this.metadata;\n\n    if (schemaOrFields instanceof ArrowLikeSchema) {\n      const otherArrowLikeSchema = schemaOrFields;\n      fields = otherArrowLikeSchema.fields;\n      metadata = mergeMaps(mergeMaps(new Map(), this.metadata), otherArrowLikeSchema.metadata);\n    } else {\n      fields = schemaOrFields;\n    }\n\n    // Create a merged list of fields, overwrite fields in place, new fields at end\n    const fieldMap: {[key: string]: ArrowLikeField} = Object.create(null);\n\n    for (const field of this.fields) {\n      fieldMap[field.name] = field;\n    }\n\n    for (const field of fields) {\n      fieldMap[field.name] = field;\n    }\n\n    const mergedFields = Object.values(fieldMap);\n\n    return new ArrowLikeSchema(mergedFields, metadata);\n  }\n}\n\n// Warn if any duplicated field names\n// function checkNames(fields: Field[]): void {\n//   const usedNames: Record<string, boolean> = {};\n//   for (const field of fields) {\n//     if (usedNames[field.name]) {\n//       // eslint-disable-next-line\n//       console.warn('ArrowLikeSchema: duplicated field name', field.name, field);\n//     }\n//     usedNames[field.name] = true;\n//   }\n// }\n\nfunction mergeMaps<T>(m1: T, m2: T): T {\n  // @ts-ignore\n  return new Map([...(m1 || new Map()), ...(m2 || new Map())]);\n}\n"],"mappings":"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"}