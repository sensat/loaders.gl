{"version":3,"file":"table-accessors.js","names":["makeRowIterator","getTableLength","table","shape","data","length","numRows","_i","_Object$values","Object","values","column","Error","getTableNumCols","schema","fields","keys","numCols","getTableCell","rowIndex","columnName","_table$data$getChildA","columnIndex","getTableColumnIndex","arrowColumnIndex","findIndex","field","name","getChildAt","get","getTableCellAt","_table$data$getChildA2","getTableColumnName","getTableRowShape","_table$schema","undefined","_table$schema2","_table$schema2$fields","concat","getTableRowAsObject","target","copy","fromEntries","entries","objectRow","i","_i3","_Object$entries","_Object$entries$_i","_slicedToArray2","default","row","getTableRowAsArray","Array","from","arrayRow","_i7","_Object$values2","makeArrayRowTable","makeObjectRowTable","makeColumnarTable","_regenerator","wrap","makeRowIterator$","_context","prev","next","t0","delegateYield","makeArrayRowIterator","abrupt","makeObjectRowIterator","stop","_marked","arguments","mark","_callee","_callee$","_context2","_callee2","_callee2$","_context3"],"sources":["../../../../../src/lib/table/simple-table/table-accessors.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n/* eslint-disable no-else-return */\n\nimport {Table, ArrayRowTable, ObjectRowTable} from '../../../types/category-table';\n\n/**\n * Returns the length of the table (i.e. the number of rows)\n */\nexport function getTableLength(table: Table): number {\n  switch (table.shape) {\n    case 'array-row-table':\n    case 'object-row-table':\n    case 'geojson-row-table':\n      return table.data.length;\n\n    case 'arrow-table':\n      return table.data.numRows;\n\n    case 'columnar-table':\n      for (const column of Object.values(table.data)) {\n        return column.length || 0;\n      }\n      return 0;\n    default:\n      throw new Error('table');\n  }\n}\n\n/**\n * Returns the number of columns in the table\n * @throws Fails to deduce number of columns if the table has no schema and is empty\n */\nexport function getTableNumCols(table: Table): number {\n  if (table.schema) {\n    return table.schema.fields.length;\n  }\n  if (getTableLength(table) === 0) {\n    throw new Error('empty table');\n  }\n  switch (table.shape) {\n    case 'array-row-table':\n      return table.data[0].length;\n    case 'object-row-table':\n    case 'geojson-row-table':\n      return Object.keys(table.data[0]).length;\n\n    case 'columnar-table':\n      return Object.keys(table.data).length;\n\n    case 'arrow-table':\n      return table.data.numCols;\n    default:\n      throw new Error('table');\n  }\n}\n\n/** Get a table cell value at row index and column name */\nexport function getTableCell(table: Table, rowIndex: number, columnName: string): unknown {\n  switch (table.shape) {\n    case 'array-row-table':\n      const columnIndex = getTableColumnIndex(table, columnName);\n      return table.data[rowIndex][columnIndex];\n\n    case 'object-row-table':\n    case 'geojson-row-table':\n      return table.data[rowIndex][columnName];\n\n    case 'columnar-table':\n      const column = table.data[columnName];\n      return column[rowIndex];\n\n    case 'arrow-table':\n      const arrowColumnIndex = table.data.schema.fields.findIndex(\n        (field) => field.name === columnName\n      );\n      return table.data.getChildAt(arrowColumnIndex)?.get(rowIndex);\n\n    default:\n      throw new Error('todo');\n  }\n}\n\n/** Get a table cell value at row index and column name */\nexport function getTableCellAt(table: Table, rowIndex: number, columnIndex: number): unknown {\n  switch (table.shape) {\n    case 'array-row-table':\n      return table.data[rowIndex][columnIndex];\n\n    case 'object-row-table':\n    case 'geojson-row-table':\n      let columnName = getTableColumnName(table, columnIndex);\n      return table.data[rowIndex][columnName];\n\n    case 'columnar-table':\n      columnName = getTableColumnName(table, columnIndex);\n      const column = table.data[columnName];\n      return column[rowIndex];\n\n    case 'arrow-table':\n      return table.data.getChildAt(columnIndex)?.get(rowIndex);\n\n    default:\n      throw new Error('todo');\n  }\n}\n\n/** Deduce the table row shape */\nexport function getTableRowShape(table: Table): 'array-row-table' | 'object-row-table' {\n  switch (table.shape) {\n    case 'array-row-table':\n    case 'object-row-table':\n      return table.shape;\n\n    case 'geojson-row-table':\n      return 'object-row-table';\n\n    case 'columnar-table':\n    default:\n      throw new Error('Not a row table');\n  }\n}\n\n/** Get the index of a named table column. Requires the table to have a schema */\nexport function getTableColumnIndex(table: Table, columnName: string): number {\n  const columnIndex = table.schema?.fields.findIndex((field) => field.name === columnName);\n  if (columnIndex === undefined) {\n    throw new Error(columnName);\n  }\n  return columnIndex;\n}\n\n/** Get the name of a table column by index. Requires the table to have a schema */\nexport function getTableColumnName(table: Table, columnIndex: number): string {\n  const columnName = table.schema?.fields[columnIndex]?.name;\n  if (!columnName) {\n    throw new Error(`${columnIndex}`);\n  }\n  return columnName;\n}\n\n/**\n * Returns one row of the table in object format.\n * @param target Optional parameter will be used if needed to store the row. Can be reused between calls to improve performance\n * @returns an array representing the row. May be the original array in the row, a new object, or the target parameter\n */\n// eslint-disable-next-line complexity\nexport function getTableRowAsObject(\n  table: Table,\n  rowIndex: number,\n  target?: {[columnName: string]: unknown},\n  copy?: 'copy'\n): {[columnName: string]: unknown} {\n  switch (table.shape) {\n    case 'object-row-table':\n      return copy ? Object.fromEntries(Object.entries(table.data[rowIndex])) : table.data[rowIndex];\n\n    case 'array-row-table':\n    case 'geojson-row-table':\n      if (table.schema) {\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          objectRow[table.schema.fields[i].name] = table.data[rowIndex][i];\n        }\n        return objectRow;\n      }\n      throw new Error('no schema');\n\n    case 'columnar-table':\n      if (table.schema) {\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          objectRow[table.schema.fields[i].name] =\n            table.data[table.schema.fields[i].name][rowIndex];\n        }\n        return objectRow;\n      } else {\n        // eslint-disable-line no-else-return\n        const objectRow: {[columnName: string]: unknown} = target || {};\n        for (const [name, column] of Object.entries(table.data)) {\n          objectRow[name] = column[rowIndex];\n        }\n        return objectRow;\n      }\n\n    case 'arrow-table':\n      const objectRow: {[columnName: string]: unknown} = target || {};\n      const row = table.data.get(rowIndex);\n      const schema = table.data.schema;\n      for (let i = 0; i < schema.fields.length; i++) {\n        objectRow[schema.fields[i].name] = row?.[schema.fields[i].name];\n      }\n      return objectRow;\n\n    default:\n      throw new Error('shape');\n  }\n}\n\n/**\n * Returns one row of the table in array format.\n * @param target Optional parameter will be used if needed to store the row. Can be reused between calls to improve performance.\n * @returns an array representing the row. May be the original array in the row, a new object, or the target parameter\n */\n// eslint-disable-next-line complexity\nexport function getTableRowAsArray(\n  table: Table,\n  rowIndex: number,\n  target?: unknown[],\n  copy?: 'copy'\n): unknown[] {\n  switch (table.shape) {\n    case 'array-row-table':\n      return copy ? Array.from(table.data[rowIndex]) : table.data[rowIndex];\n\n    case 'object-row-table':\n    case 'geojson-row-table':\n      if (table.schema) {\n        const arrayRow: unknown[] = target || [];\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          arrayRow[i] = table.data[rowIndex][table.schema.fields[i].name];\n        }\n        return arrayRow;\n      }\n      // Warning: just slap on the values, this risks mismatches between rows\n      return Object.values(table.data[rowIndex]);\n\n    case 'columnar-table':\n      if (table.schema) {\n        const arrayRow: unknown[] = target || [];\n        for (let i = 0; i < table.schema.fields.length; i++) {\n          arrayRow[i] = table.data[table.schema.fields[i].name][rowIndex];\n        }\n        return arrayRow;\n      } else {\n        // eslint-disable-line no-else-return\n        const arrayRow: unknown[] = target || [];\n        let i = 0;\n        for (const column of Object.values(table.data)) {\n          arrayRow[i] = column[rowIndex];\n          i++;\n        }\n        return arrayRow;\n      }\n\n    case 'arrow-table':\n      const arrayRow: unknown[] = target || [];\n      const row = table.data.get(rowIndex);\n      const schema = table.data.schema;\n      for (let i = 0; i < schema.fields.length; i++) {\n        arrayRow[i] = row?.[schema.fields[i].name];\n      }\n      return arrayRow;\n\n    default:\n      throw new Error('shape');\n  }\n}\n\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table: Table): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeColumnarTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n// Row Iterators\n\n/**\n * Iterate over table rows\n * @param table\n * @param shape\n */\nexport function* makeRowIterator(\n  table: Table,\n  shape: 'object-row-table' | 'array-row-table'\n): Iterable<unknown[] | {[key: string]: unknown}> {\n  switch (shape) {\n    case 'array-row-table':\n      yield* makeArrayRowIterator(table);\n      break;\n    case 'object-row-table':\n      yield* makeObjectRowIterator(table);\n      break;\n\n    default:\n      throw new Error(`Unknown row type ${shape}`);\n  }\n}\n\n/**\n * Streaming processing: Iterate over table, yielding array rows\n * @param table\n * @param shape\n */\nexport function* makeArrayRowIterator(table: Table, target: unknown[] = []): Iterable<unknown[]> {\n  const length = getTableLength(table);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    yield getTableRowAsArray(table, rowIndex, target);\n  }\n}\n\n/**\n * Streaming processing: Iterate over table, yielding object rows\n * @param table\n * @param shape\n */\nexport function* makeObjectRowIterator(\n  table: Table,\n  target: {[key: string]: unknown} = {}\n): Iterable<{[key: string]: unknown}> {\n  const length = getTableLength(table);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    yield getTableRowAsObject(table, rowIndex, target);\n  }\n}\n"],"mappings":"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"}