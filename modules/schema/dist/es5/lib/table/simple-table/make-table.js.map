{"version":3,"file":"make-table.js","names":["_tableSchema","require","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","makeTableFromData","data","table","getTableShapeFromData","shape","Error","schema","deduceTableSchema","Array","isArray","firstRow","_typeof2"],"sources":["../../../../../src/lib/table/simple-table/make-table.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {Table, ArrayRowTable, ObjectRowTable, ColumnarTable} from '../../../types/category-table';\nimport {deduceTableSchema} from './table-schema';\n\n/**\n * Makes a typed table from data.\n * @throws Row tables must contain at least one row. Columnar tables must contain empty arrays\n */\nexport function makeTableFromData(data: unknown[][]): ArrayRowTable;\nexport function makeTableFromData(data: {[column: string]: unknown}[]): ObjectRowTable;\nexport function makeTableFromData(data: {[column: string]: ArrayLike<unknown>}): ColumnarTable;\nexport function makeTableFromData(data: unknown): Table {\n  let table: Table;\n  switch (getTableShapeFromData(data)) {\n    case 'array-row-table':\n      table = {shape: 'array-row-table', data: data as unknown[][]};\n      break;\n    case 'object-row-table':\n      table = {shape: 'object-row-table', data: data as {[key: string]: unknown}[]};\n      break;\n    case 'columnar-table':\n      table = {shape: 'columnar-table', data: data as {[column: string]: ArrayLike<unknown>}};\n      break;\n    default:\n      throw new Error('table');\n  }\n  const schema = deduceTableSchema(table);\n  return {...table, schema};\n}\n\n/** Helper function to get shape of data */\nfunction getTableShapeFromData(data) {\n  if (Array.isArray(data)) {\n    if (data.length === 0) {\n      throw new Error('cannot deduce type of empty table');\n    }\n\n    // Deduce the table shape from the first row\n    const firstRow = data[0];\n\n    if (Array.isArray(firstRow)) {\n      return 'array-row-table';\n    }\n\n    if (firstRow && typeof firstRow === 'object') {\n      return 'object-row-table';\n    }\n  }\n\n  if (data && typeof data === 'object') {\n    return 'columnar-table';\n  }\n\n  throw new Error('invalid table');\n}\n\n/** Convert any table into object row format *\nexport function makeColumnarTable(table: Table): ColumnarTable {\n  if (table.shape === 'columnar-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'columnar-table',\n    schema: table.schema,\n    data\n  };\n}\n\n\n/** Convert any table into array row format *\nexport function makeArrayRowTable(table: TableLike): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format *\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n*/\n"],"mappings":";;;;;;;;;AAEA,IAAAA,YAAA,GAAAC,OAAA;AAAiD,SAAAC,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAC,MAAA,CAAAD,IAAA,CAAAF,MAAA,OAAAG,MAAA,CAAAC,qBAAA,QAAAC,OAAA,GAAAF,MAAA,CAAAC,qBAAA,CAAAJ,MAAA,GAAAC,cAAA,KAAAI,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAJ,MAAA,CAAAK,wBAAA,CAAAR,MAAA,EAAAO,GAAA,EAAAE,UAAA,OAAAP,IAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,IAAA,EAAAG,OAAA,YAAAH,IAAA;AAAA,SAAAU,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,UAAAG,MAAA,WAAAF,SAAA,CAAAD,CAAA,IAAAC,SAAA,CAAAD,CAAA,QAAAA,CAAA,OAAAf,OAAA,CAAAI,MAAA,CAAAc,MAAA,OAAAC,OAAA,WAAAC,GAAA,QAAAC,gBAAA,CAAAC,OAAA,EAAAR,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA,SAAAhB,MAAA,CAAAmB,yBAAA,GAAAnB,MAAA,CAAAoB,gBAAA,CAAAV,MAAA,EAAAV,MAAA,CAAAmB,yBAAA,CAAAL,MAAA,KAAAlB,OAAA,CAAAI,MAAA,CAAAc,MAAA,GAAAC,OAAA,WAAAC,GAAA,IAAAhB,MAAA,CAAAqB,cAAA,CAAAX,MAAA,EAAAM,GAAA,EAAAhB,MAAA,CAAAK,wBAAA,CAAAS,MAAA,EAAAE,GAAA,iBAAAN,MAAA;AAS1C,SAASY,iBAAiBA,CAACC,IAAa,EAAS;EACtD,IAAIC,KAAY;EAChB,QAAQC,qBAAqB,CAACF,IAAI,CAAC;IACjC,KAAK,iBAAiB;MACpBC,KAAK,GAAG;QAACE,KAAK,EAAE,iBAAiB;QAAEH,IAAI,EAAEA;MAAmB,CAAC;MAC7D;IACF,KAAK,kBAAkB;MACrBC,KAAK,GAAG;QAACE,KAAK,EAAE,kBAAkB;QAAEH,IAAI,EAAEA;MAAkC,CAAC;MAC7E;IACF,KAAK,gBAAgB;MACnBC,KAAK,GAAG;QAACE,KAAK,EAAE,gBAAgB;QAAEH,IAAI,EAAEA;MAA8C,CAAC;MACvF;IACF;MACE,MAAM,IAAII,KAAK,CAAC,OAAO,CAAC;EAC5B;EACA,IAAMC,MAAM,GAAG,IAAAC,8BAAiB,EAACL,KAAK,CAAC;EACvC,OAAAf,aAAA,CAAAA,aAAA,KAAWe,KAAK;IAAEI,MAAM,EAANA;EAAM;AAC1B;AAGA,SAASH,qBAAqBA,CAACF,IAAI,EAAE;EACnC,IAAIO,KAAK,CAACC,OAAO,CAACR,IAAI,CAAC,EAAE;IACvB,IAAIA,IAAI,CAACV,MAAM,KAAK,CAAC,EAAE;MACrB,MAAM,IAAIc,KAAK,CAAC,mCAAmC,CAAC;IACtD;IAGA,IAAMK,QAAQ,GAAGT,IAAI,CAAC,CAAC,CAAC;IAExB,IAAIO,KAAK,CAACC,OAAO,CAACC,QAAQ,CAAC,EAAE;MAC3B,OAAO,iBAAiB;IAC1B;IAEA,IAAIA,QAAQ,IAAI,IAAAC,QAAA,CAAAf,OAAA,EAAOc,QAAQ,MAAK,QAAQ,EAAE;MAC5C,OAAO,kBAAkB;IAC3B;EACF;EAEA,IAAIT,IAAI,IAAI,IAAAU,QAAA,CAAAf,OAAA,EAAOK,IAAI,MAAK,QAAQ,EAAE;IACpC,OAAO,gBAAgB;EACzB;EAEA,MAAM,IAAII,KAAK,CAAC,eAAe,CAAC;AAClC"}