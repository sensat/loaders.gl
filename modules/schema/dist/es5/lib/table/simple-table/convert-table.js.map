{"version":3,"file":"convert-table.js","names":["_tableAccessors","require","_tableSchema","_tableColumn","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","makeColumnarTable","table","_table$schema","schema","deduceTableSchema","fields","shape","getTableLength","columns","_iterator","_step","field","column","makeColumnFromField","rowIndex","getTableCell","data","makeArrayRowTable","getTableRowAsArray","makeObjectRowTable","getTableRowAsObject"],"sources":["../../../../../src/lib/table/simple-table/convert-table.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport {\n  getTableCell,\n  getTableLength,\n  getTableRowAsArray,\n  getTableRowAsObject\n} from './table-accessors';\nimport {Table, ArrayRowTable, ObjectRowTable, ColumnarTable} from '../../../types/category-table';\nimport {deduceTableSchema} from './table-schema';\nimport {makeColumnFromField} from './table-column';\n\n/** Convert any simple table into columnar format */\nexport function makeColumnarTable(table: Table): ColumnarTable {\n  // TODO - should schema really be optional?\n  const schema = table.schema || deduceTableSchema(table);\n  const fields = table.schema?.fields || [];\n\n  if (table.shape === 'columnar-table') {\n    return {...table, schema};\n  }\n\n  const length = getTableLength(table);\n\n  const columns: {[column: string]: ArrayLike<unknown>} = {};\n  for (const field of fields) {\n    const column = makeColumnFromField(field, length);\n    columns[field.name] = column;\n    for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n      column[rowIndex] = getTableCell(table, rowIndex, field.name);\n    }\n  }\n\n  return {\n    shape: 'columnar-table',\n    schema,\n    data: columns\n  };\n}\n\n/** Convert any table into array row format */\nexport function makeArrayRowTable(table: Table): ArrayRowTable {\n  if (table.shape === 'array-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<unknown[]>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsArray(table, rowIndex);\n  }\n  return {\n    shape: 'array-row-table',\n    schema: table.schema,\n    data\n  };\n}\n\n/** Convert any table into object row format */\nexport function makeObjectRowTable(table: Table): ObjectRowTable {\n  if (table.shape === 'object-row-table') {\n    return table;\n  }\n  const length = getTableLength(table);\n  const data = new Array<{[key: string]: unknown}>(length);\n  for (let rowIndex = 0; rowIndex < length; rowIndex++) {\n    data[rowIndex] = getTableRowAsObject(table, rowIndex);\n  }\n  return {\n    shape: 'object-row-table',\n    schema: table.schema,\n    data\n  };\n}\n"],"mappings":"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"}