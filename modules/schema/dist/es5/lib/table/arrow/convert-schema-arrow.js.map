{"version":3,"file":"convert-schema-arrow.js","names":["_Arrow","require","serializeArrowSchema","arrowSchema","fields","map","arrowField","serializeArrowField","metadata","serializeArrowMetadata","deserializeArrowSchema","schema","ArrowSchema","field","deserializeArrowField","deserializeArrowMetadata","arrowMetadata","Object","fromEntries","Map","entries","name","type","serializeArrowType","nullable","ArrowField","deserializeArrowType","arrowType","constructor","Null","Binary","Bool","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","Float16","Float32","Float64","Utf8","DateDay","DateMillisecond","TimeMillisecond","TimeSecond","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","IntervalDayTime","IntervalYearMonth","FixedSizeList","listSize","children","Error","dataType","_typeof2","default","child","Struct"],"sources":["../../../../../src/lib/table/arrow/convert-schema-arrow.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {DataType, Field, Schema, SchemaMetadata} from '../../../types/schema';\nimport {\n  Field as ArrowField,\n  Schema as ArrowSchema,\n  DataType as ArrowDataType,\n  Null,\n  Binary,\n  Bool,\n  // Int,\n  Int8,\n  Int16,\n  Int32,\n  Int64,\n  Uint8,\n  Uint16,\n  Uint32,\n  Uint64,\n  // Float,\n  Float16,\n  Float32,\n  Float64,\n  Utf8,\n  // Date,\n  DateDay,\n  DateMillisecond,\n  // Time,\n  TimeMillisecond,\n  TimeSecond,\n  // Timestamp,\n  TimestampSecond,\n  TimestampMillisecond,\n  TimestampMicrosecond,\n  TimestampNanosecond,\n  // Interval,\n  IntervalDayTime,\n  IntervalYearMonth,\n  FixedSizeList,\n  Struct\n} from 'apache-arrow/Arrow.dom';\n\nexport function serializeArrowSchema(arrowSchema: ArrowSchema): Schema {\n  return {\n    fields: arrowSchema.fields.map((arrowField) => serializeArrowField(arrowField)),\n    metadata: serializeArrowMetadata(arrowSchema.metadata)\n  };\n}\n\nexport function deserializeArrowSchema(schema: Schema): ArrowSchema {\n  return new ArrowSchema(\n    schema.fields.map((field) => deserializeArrowField(field)),\n    deserializeArrowMetadata(schema.metadata)\n  );\n}\n\nexport function serializeArrowMetadata(arrowMetadata: Map<string, string>): SchemaMetadata {\n  return Object.fromEntries(arrowMetadata);\n}\n\nexport function deserializeArrowMetadata(metadata?: SchemaMetadata): Map<string, string> {\n  return metadata ? new Map(Object.entries(metadata)) : new Map<string, string>();\n}\n\nexport function serializeArrowField(field: ArrowField): Field {\n  return {\n    name: field.name,\n    type: serializeArrowType(field.type),\n    nullable: field.nullable,\n    metadata: serializeArrowMetadata(field.metadata)\n  };\n}\n\nexport function deserializeArrowField(field: Field): ArrowField {\n  return new ArrowField(\n    field.name,\n    deserializeArrowType(field.type),\n    field.nullable,\n    deserializeArrowMetadata(field.metadata)\n  );\n}\n\n/** Converts a serializable loaders.gl data type to hydrated arrow data type */\n// eslint-disable-next-line complexity\nexport function serializeArrowType(arrowType: ArrowDataType): DataType {\n  switch (arrowType.constructor) {\n    case Null:\n      return 'null';\n    case Binary:\n      return 'binary';\n    case Bool:\n      return 'bool';\n    // case Int: return 'int';\n    case Int8:\n      return 'int8';\n    case Int16:\n      return 'int16';\n    case Int32:\n      return 'int32';\n    case Int64:\n      return 'int64';\n    case Uint8:\n      return 'uint8';\n    case Uint16:\n      return 'uint16';\n    case Uint32:\n      return 'uint32';\n    case Uint64:\n      return 'uint64';\n    // case Float: return 'float';\n    case Float16:\n      return 'float16';\n    case Float32:\n      return 'float32';\n    case Float64:\n      return 'float64';\n    case Utf8:\n      return 'utf8';\n    // case Date: return 'date';\n    case DateDay:\n      return 'date-day';\n    case DateMillisecond:\n      return 'date-millisecond';\n    // case Time: return 'time';\n    case TimeMillisecond:\n      return 'time-millisecond';\n    case TimeSecond:\n      return 'time-second';\n    // case Timestamp: return 'timestamp';\n    case TimestampSecond:\n      return 'timestamp-second';\n    case TimestampMillisecond:\n      return 'timestamp-millisecond';\n    case TimestampMicrosecond:\n      return 'timestamp-microsecond';\n    case TimestampNanosecond:\n      return 'timestamp-nanosecond';\n    // case Interval: return 'interval';\n    case IntervalDayTime:\n      return 'interval-daytime';\n    case IntervalYearMonth:\n      return 'interval-yearmonth';\n    case FixedSizeList:\n      return {\n        type: 'fixed-size-list',\n        listSize: (arrowType as FixedSizeList).listSize,\n        children: [serializeArrowField((arrowType as FixedSizeList).children[0])]\n      };\n    // case Struct:\n    //   return {type: 'struct', children: (arrowType as Struct).children};\n    default:\n      throw new Error('array type not supported');\n  }\n}\n\n/** Converts a serializable loaders.gl data type to hydrated arrow data type */\n// eslint-disable-next-line complexity\nexport function deserializeArrowType(dataType: DataType): ArrowDataType {\n  if (typeof dataType === 'object') {\n    switch (dataType.type) {\n      case 'fixed-size-list':\n        const child = deserializeArrowField(dataType.children[0]);\n        return new FixedSizeList(dataType.listSize, child);\n      case 'struct':\n        const children = dataType.children.map((arrowField) => deserializeArrowField(arrowField));\n        return new Struct(children);\n      default:\n        throw new Error('array type not supported');\n    }\n  }\n\n  switch (dataType) {\n    case 'null':\n      return new Null();\n    case 'binary':\n      return new Binary();\n    case 'bool':\n      return new Bool();\n    // case 'int': return new Int();\n    case 'int8':\n      return new Int8();\n    case 'int16':\n      return new Int16();\n    case 'int32':\n      return new Int32();\n    case 'int64':\n      return new Int64();\n    case 'uint8':\n      return new Uint8();\n    case 'uint16':\n      return new Uint16();\n    case 'uint32':\n      return new Uint32();\n    case 'uint64':\n      return new Uint64();\n    // case 'float': return new Float();\n    case 'float16':\n      return new Float16();\n    case 'float32':\n      return new Float32();\n    case 'float64':\n      return new Float64();\n    case 'utf8':\n      return new Utf8();\n    // case 'date': return new Date();\n    case 'date-day':\n      return new DateDay();\n    case 'date-millisecond':\n      return new DateMillisecond();\n    // case 'time': return new Time();\n    case 'time-millisecond':\n      return new TimeMillisecond();\n    case 'time-second':\n      return new TimeSecond();\n    // case 'timestamp': return new Timestamp();\n    case 'timestamp-second':\n      return new TimestampSecond();\n    case 'timestamp-millisecond':\n      return new TimestampMillisecond();\n    case 'timestamp-microsecond':\n      return new TimestampMicrosecond();\n    case 'timestamp-nanosecond':\n      return new TimestampNanosecond();\n    // case 'interval': return new Interval();\n    case 'interval-daytime':\n      return new IntervalDayTime();\n    case 'interval-yearmonth':\n      return new IntervalYearMonth();\n    default:\n      throw new Error('array type not supported');\n  }\n}\n"],"mappings":"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"}