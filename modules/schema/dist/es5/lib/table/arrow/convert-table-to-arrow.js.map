{"version":3,"file":"convert-table-to-arrow.js","names":[],"sources":["../../../../../src/lib/table/arrow/convert-table-to-arrow.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// import {\n//   Table as ApacheArrowTable,\n//   Schema as ApacheArrowSchema,\n//   RecordBatch,\n//   FixedSizeList,\n//   Field,\n//   Data,\n//   FixedSizeListVector\n// } from 'apache-arrow/Arrow.dom';\n// import {AbstractVector} from 'apache-arrow/vector';\n\n// import {Table} from '../../types/category-table';\n// import {getArrowType, getArrowVector} from './arrow-type-utils';\n// import {makeMeshAttributeMetadata} from './deduce-mesh-schema';\n// import {getTableLength, getTableNumCols} from './table-accessors';\n\n/**\n * * Convert a loaders.gl Mesh to an Apache Arrow Table\n * @param mesh\n * @param metadata\n * @param batchSize\n * @returns\n *\nexport function convertTableToArrow(table: Table, options?: {batchSize?: number}): ArrowTable {\n  const vectors: AbstractVector[] = [];\n  const fields: Field[] = [];\n\n  const length = getTableLength(table);\n  const batchSize = options?.batchSize || length;\n\n  const recordBatches: RecordBatch[] = [];\n  for (let i = 0; i < length; i += batchSize) {\n    for (let columnIndex = 0; columnIndex < getTableNumCols(table); ++columnIndex) {\n      const field_ = table.schema.fields[columnIndex];\n      const column = getTableColumnAt(table, columnIndex, i, batchSize);\n      const type = getArrowType(column);\n      const vector = getArrowVector(column);\n      const listType = new FixedSizeList(size, new Field('value', type));\n      const field = new Field(field_.name, listType, false, makeMeshAttributeMetadata(attribute));\n      const data = new Data(listType, 0, value.length / size, 0, undefined, [vector]);\n      const listVector = new FixedSizeListVector(data);\n      vectors.push(listVector);\n      fields.push(field);\n    }\n\n  for (const attributeKey in table.columns) {\n    const attribute = mesh.attributes[attributeKey];\n    const {value, size = 1} = attribute;\n  }\n\n  const schema = new ApacheArrowSchema(fields, table?.schema?.metadata || new Map<string, string>());\n  const recordBatch = new RecordBatch(schema, vectors[0].length, vectors);\n  const apacheArrowTable = new ApacheArrowTable(schema, recordBatch);\n\n  return apacheArrowTable;\n}\n*/\n"],"mappings":""}