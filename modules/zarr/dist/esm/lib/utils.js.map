{"version":3,"file":"utils.js","names":["openGroup","HTTPStore","normalizeStore","source","loadMultiscales","store","path","arguments","length","undefined","grp","rootAttrs","attrs","asObject","Array","isArray","multiscales","Error","datasets","promises","map","d","getItem","data","Promise","all","getDims","labels","lookup","Map","name","i","size","index","get","prevPowerOf2","x","Math","floor","log2","isInterleaved","shape","lastDimSize","guessTileSize","arr","interleaved","yChunk","xChunk","chunks","slice","min","guessLabels","getIndexer","dims","sel","selection","fill","key","value","Object","entries","getImageSize","height","width","joinUrlParts","_len","args","_key","part","trim","replace","filter","join","validLabels","n"],"sources":["../../../src/lib/utils.ts"],"sourcesContent":["import type {ZarrArray} from 'zarr';\n// eslint-disable-next-line import/no-unresolved\nimport type {Store} from 'zarr/types/storage/types';\nimport type {PixelSource, RootAttrs, Labels} from '../types';\n\nimport {openGroup, HTTPStore} from 'zarr';\n\nexport function normalizeStore(source: string | Store): Store {\n  if (typeof source === 'string') {\n    return new HTTPStore(source);\n  }\n  return source;\n}\n\nexport async function loadMultiscales(store: Store, path = '') {\n  const grp = await openGroup(store, path);\n  const rootAttrs = (await grp.attrs.asObject()) as RootAttrs;\n\n  // Root of Zarr store must implement multiscales extension.\n  // https://github.com/zarr-developers/zarr-specs/issues/50\n  if (!Array.isArray(rootAttrs.multiscales)) {\n    throw new Error('Cannot find Zarr multiscales metadata.');\n  }\n\n  const {datasets} = rootAttrs.multiscales[0];\n  const promises = datasets.map((d) => grp.getItem(d.path)) as Promise<ZarrArray>[];\n\n  return {\n    data: await Promise.all(promises),\n    rootAttrs\n  };\n}\n\n/*\n * Creates an ES6 map of 'label' -> index\n * > const labels = ['a', 'b', 'c', 'd'];\n * > const dims = getDims(labels);\n * > dims('a') === 0;\n * > dims('b') === 1;\n * > dims('c') === 2;\n * > dims('hi!'); // throws\n */\nexport function getDims<S extends string>(labels: S[]) {\n  const lookup = new Map(labels.map((name, i) => [name, i]));\n  if (lookup.size !== labels.length) {\n    throw Error('Labels must be unique, found duplicated label.');\n  }\n  return (name: S) => {\n    const index = lookup.get(name);\n    if (index === undefined) {\n      throw Error('Invalid dimension.');\n    }\n    return index;\n  };\n}\n\nfunction prevPowerOf2(x: number) {\n  return 2 ** Math.floor(Math.log2(x));\n}\n\n/*\n * Helper method to determine whether pixel data is interleaved or not.\n * > isInterleaved([1, 24, 24]) === false;\n * > isInterleaved([1, 24, 24, 3]) === true;\n */\nexport function isInterleaved(shape: number[]) {\n  const lastDimSize = shape[shape.length - 1];\n  return lastDimSize === 3 || lastDimSize === 4;\n}\n\nexport function guessTileSize(arr: ZarrArray) {\n  const interleaved = isInterleaved(arr.shape);\n  const [yChunk, xChunk] = arr.chunks.slice(interleaved ? -3 : -2);\n  const size = Math.min(yChunk, xChunk);\n  // deck.gl requirement for power-of-two tile size.\n  return prevPowerOf2(size);\n}\n\nexport function guessLabels(rootAttrs: RootAttrs) {\n  if ('omero' in rootAttrs) {\n    return ['t', 'c', 'z', 'y', 'x'] as Labels<['t', 'c', 'z']>;\n  }\n  throw new Error(\n    'Could not infer dimension labels for Zarr source. Must provide dimension labels.'\n  );\n}\n\n/*\n * The 'indexer' for a Zarr-based source translates\n * a 'selection' to an array of indices that align to\n * the labeled dimensions.\n *\n * > const labels = ['a', 'b', 'y', 'x'];\n * > const indexer = getIndexer(labels);\n * > console.log(indexer({ a: 10, b: 20 }));\n * > // [10, 20, 0, 0]\n */\nexport function getIndexer<T extends string>(labels: T[]) {\n  const size = labels.length;\n  const dims = getDims(labels);\n  return (sel: {[K in T]: number} | number[]) => {\n    if (Array.isArray(sel)) {\n      return [...sel];\n    }\n    const selection: number[] = Array(size).fill(0);\n    for (const [key, value] of Object.entries(sel)) {\n      selection[dims(key as T)] = value as number;\n    }\n    return selection;\n  };\n}\n\nexport function getImageSize<T extends string[]>(\n  source: PixelSource<T>\n): {height: number; width: number} {\n  const interleaved = isInterleaved(source.shape);\n  // 2D image data in Zarr are represented as (..., rows, columns [, bands])\n  // If an image is interleaved (RGB/A), we need to ignore the last dimension (bands)\n  // to get the height and weight of the image.\n  const [height, width] = source.shape.slice(interleaved ? -3 : -2);\n  return {height, width};\n}\n\n/**\n * Preserves (double) slashes earlier in the path, so this works better\n * for URLs. From https://stackoverflow.com/a/46427607\n * @param args parts of a path or URL to join.\n */\nexport function joinUrlParts(...args: string[]) {\n  return args\n    .map((part, i) => {\n      if (i === 0) return part.trim().replace(/[/]*$/g, '');\n      return part.trim().replace(/(^[/]*|[/]*$)/g, '');\n    })\n    .filter((x) => x.length)\n    .join('/');\n}\n\nexport function validLabels(labels: string[], shape: number[]): labels is Labels<string[]> {\n  if (labels.length !== shape.length) {\n    throw new Error('Labels do not match Zarr array shape.');\n  }\n  const n = shape.length;\n  if (isInterleaved(shape)) {\n    // last three dimensions are [row, column, bands]\n    return labels[n - 3] === 'y' && labels[n - 2] === 'x' && labels[n - 1] === '_c';\n  }\n  // last two dimensions are [row, column]\n  return labels[n - 2] === 'y' && labels[n - 1] === 'x';\n}\n"],"mappings":"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"}