{"version":3,"file":"zarr-pixel-source.js","names":["BoundsCheckError","slice","getImageSize","isInterleaved","getIndexer","DTYPE_LOOKUP","u1","u2","u4","f4","f8","i1","i2","i4","ZarrPixelSource","constructor","data","labels","tileSize","_defineProperty","_indexer","_data","xChunkSize","chunks","_xIndex","yChunkSize","_readChunks","shape","dtype","suffix","Error","concat","interleave","length","_chunkIndex","selection","x","y","sel","_getSlices","height","width","xStart","xStop","Math","min","yStart","yStop","getRaster","_ref","getRaw","getTile","props","signal","res","getRawChunk","storeOptions","xSlice","ySlice","onTileError","err"],"sources":["../../../src/lib/zarr-pixel-source.ts"],"sourcesContent":["import type {ZarrArray} from 'zarr';\n// eslint-disable-next-line import/no-unresolved\nimport type {RawArray} from 'zarr/types/rawArray';\nimport type {\n  PixelSource,\n  Labels,\n  RasterSelection,\n  PixelSourceSelection,\n  PixelData,\n  TileSelection\n} from '../types';\n\nimport {BoundsCheckError, slice} from 'zarr';\nimport {getImageSize, isInterleaved, getIndexer} from './utils';\n\nexport const DTYPE_LOOKUP = {\n  u1: 'Uint8',\n  u2: 'Uint16',\n  u4: 'Uint32',\n  f4: 'Float32',\n  f8: 'Float64',\n  i1: 'Int8',\n  i2: 'Int16',\n  i4: 'Int32'\n} as const;\n\ntype ZarrIndexer<S extends string[]> = (sel: {[K in S[number]]: number} | number[]) => number[];\n\ninterface ZarrTileSelection {\n  x: number;\n  y: number;\n  selection: number[];\n  signal?: AbortSignal;\n}\n\nclass ZarrPixelSource<S extends string[]> implements PixelSource<S> {\n  public labels: Labels<S>;\n  public tileSize: number;\n  private _data: ZarrArray;\n  private _indexer: ZarrIndexer<S>;\n  private _readChunks: boolean;\n\n  constructor(data: ZarrArray, labels: Labels<S>, tileSize: number) {\n    this._indexer = getIndexer(labels);\n    this._data = data;\n\n    const xChunkSize = data.chunks[this._xIndex];\n    const yChunkSize = data.chunks[this._xIndex - 1];\n    this._readChunks = tileSize === xChunkSize && tileSize === yChunkSize;\n    this.labels = labels;\n    this.tileSize = tileSize;\n  }\n\n  get shape() {\n    return this._data.shape;\n  }\n\n  get dtype() {\n    const suffix = this._data.dtype.slice(1) as keyof typeof DTYPE_LOOKUP;\n    if (!(suffix in DTYPE_LOOKUP)) {\n      throw Error(`Zarr dtype not supported, got ${suffix}.`);\n    }\n    return DTYPE_LOOKUP[suffix];\n  }\n\n  private get _xIndex() {\n    const interleave = isInterleaved(this._data.shape);\n    return this._data.shape.length - (interleave ? 2 : 1);\n  }\n\n  private _chunkIndex<T>(selection: PixelSourceSelection<S> | number[], x: T, y: T) {\n    const sel: (number | T)[] = this._indexer(selection);\n    sel[this._xIndex] = x;\n    sel[this._xIndex - 1] = y;\n    return sel;\n  }\n\n  /**\n   * Converts x, y tile indices to zarr dimension Slices within image bounds.\n   */\n  private _getSlices(x: number, y: number) {\n    const {height, width} = getImageSize(this);\n    const [xStart, xStop] = [x * this.tileSize, Math.min((x + 1) * this.tileSize, width)];\n    const [yStart, yStop] = [y * this.tileSize, Math.min((y + 1) * this.tileSize, height)];\n    // Deck.gl can sometimes request edge tiles that don't exist. We throw\n    // a BoundsCheckError which is picked up in `ZarrPixelSource.onTileError`\n    // and ignored by deck.gl.\n    if (xStart === xStop || yStart === yStop) {\n      throw new BoundsCheckError('Tile slice is zero-sized.');\n    }\n    return [slice(xStart, xStop), slice(yStart, yStop)];\n  }\n\n  async getRaster({selection}: RasterSelection<S> | {selection: number[]}) {\n    const sel = this._chunkIndex(selection, null, null);\n    const {data, shape} = (await this._data.getRaw(sel)) as RawArray;\n    const [height, width] = shape;\n    return {data, width, height} as PixelData;\n  }\n\n  async getTile(props: TileSelection<S> | ZarrTileSelection) {\n    const {x, y, selection, signal} = props;\n\n    let res;\n    if (this._readChunks) {\n      // Can read chunks directly by key since tile size matches chunk shape\n      const sel = this._chunkIndex(selection, x, y);\n      res = await this._data.getRawChunk(sel, {storeOptions: {signal}});\n    } else {\n      // Need to use zarr fancy indexing to get desired tile size.\n      const [xSlice, ySlice] = this._getSlices(x, y);\n      const sel = this._chunkIndex(selection, xSlice, ySlice);\n      res = await this._data.getRaw(sel);\n    }\n\n    const {\n      data,\n      shape: [height, width]\n    } = res as RawArray;\n    return {data, width, height} as PixelData;\n  }\n\n  onTileError(err: Error) {\n    if (!(err instanceof BoundsCheckError)) {\n      // Rethrow error if something other than tile being requested is out of bounds.\n      throw err;\n    }\n  }\n}\n\nexport default ZarrPixelSource;\n"],"mappings":"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"}