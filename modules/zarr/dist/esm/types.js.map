{"version":3,"file":"types.js","names":[],"sources":["../../src/types.ts"],"sourcesContent":["/* eslint-disable */\nimport {DTYPE_LOOKUP} from './lib/zarr-pixel-source';\nexport type SupportedDtype = typeof DTYPE_LOOKUP[keyof typeof DTYPE_LOOKUP];\nexport type SupportedTypedArray = InstanceType<typeof globalThis[`${SupportedDtype}Array`]>;\n\ninterface Multiscale {\n  datasets: {path: string}[];\n  version?: string;\n}\n\ninterface Channel {\n  active: boolean;\n  color: string;\n  label: string;\n  window: {\n    min?: number;\n    max?: number;\n    start: number;\n    end: number;\n  };\n}\n\ninterface Omero {\n  channels: Channel[];\n  rdefs: {\n    defaultT?: number;\n    defaultZ?: number;\n    model: string;\n  };\n  name?: string;\n}\n\ninterface MultiscaleAttrs {\n  multiscales: Multiscale[];\n}\n\ninterface OmeAttrs extends MultiscaleAttrs {\n  omero: Omero;\n}\n\nexport type RootAttrs = MultiscaleAttrs | OmeAttrs;\n\nexport interface PixelData {\n  data: SupportedTypedArray;\n  width: number;\n  height: number;\n}\n\nexport type PixelSourceSelection<S extends string[]> = {\n  [K in S[number]]: number;\n};\n\nexport interface RasterSelection<S extends string[]> {\n  selection: PixelSourceSelection<S>;\n  signal?: AbortSignal;\n}\n\nexport interface TileSelection<S extends string[]> {\n  x: number;\n  y: number;\n  selection: PixelSourceSelection<S>;\n  signal?: AbortSignal;\n}\n\ninterface PhysicalSize {\n  size: number;\n  unit: string;\n}\n\nexport interface PixelSourceMeta {\n  physicalSizes?: Record<string, PhysicalSize>;\n  photometricInterpretation?: number;\n}\n\nexport type Labels<S extends string[]> = [...S, 'y', 'x'] | [...S, 'y', 'x', '_c'];\n\nexport interface PixelSource<S extends string[]> {\n  getRaster(sel: RasterSelection<S>): Promise<PixelData>;\n  getTile(sel: TileSelection<S>): Promise<PixelData>;\n  onTileError(err: Error): void;\n  shape: number[];\n  dtype: SupportedDtype;\n  labels: Labels<S>;\n  tileSize: number;\n  meta?: PixelSourceMeta;\n}\n"],"mappings":""}