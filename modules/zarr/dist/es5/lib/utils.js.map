{"version":3,"file":"utils.js","names":["_zarr","require","normalizeStore","source","HTTPStore","loadMultiscales","_x","_loadMultiscales","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","store","path","grp","rootAttrs","datasets","promises","_args","wrap","_callee$","_context","prev","next","length","undefined","openGroup","sent","attrs","asObject","Array","isArray","multiscales","Error","map","d","getItem","Promise","all","t0","t1","abrupt","data","stop","getDims","labels","lookup","Map","name","i","size","index","get","prevPowerOf2","x","Math","pow","floor","log2","isInterleaved","shape","lastDimSize","guessTileSize","arr","interleaved","_arr$chunks$slice","chunks","slice","_arr$chunks$slice2","_slicedToArray2","yChunk","xChunk","min","guessLabels","getIndexer","dims","sel","_toConsumableArray2","selection","fill","_i","_Object$entries","Object","entries","_Object$entries$_i","key","value","getImageSize","_source$shape$slice","_source$shape$slice2","height","width","joinUrlParts","_len","args","_key","part","trim","replace","filter","join","validLabels","n"],"sources":["../../../src/lib/utils.ts"],"sourcesContent":["import type {ZarrArray} from 'zarr';\n// eslint-disable-next-line import/no-unresolved\nimport type {Store} from 'zarr/types/storage/types';\nimport type {PixelSource, RootAttrs, Labels} from '../types';\n\nimport {openGroup, HTTPStore} from 'zarr';\n\nexport function normalizeStore(source: string | Store): Store {\n  if (typeof source === 'string') {\n    return new HTTPStore(source);\n  }\n  return source;\n}\n\nexport async function loadMultiscales(store: Store, path = '') {\n  const grp = await openGroup(store, path);\n  const rootAttrs = (await grp.attrs.asObject()) as RootAttrs;\n\n  // Root of Zarr store must implement multiscales extension.\n  // https://github.com/zarr-developers/zarr-specs/issues/50\n  if (!Array.isArray(rootAttrs.multiscales)) {\n    throw new Error('Cannot find Zarr multiscales metadata.');\n  }\n\n  const {datasets} = rootAttrs.multiscales[0];\n  const promises = datasets.map((d) => grp.getItem(d.path)) as Promise<ZarrArray>[];\n\n  return {\n    data: await Promise.all(promises),\n    rootAttrs\n  };\n}\n\n/*\n * Creates an ES6 map of 'label' -> index\n * > const labels = ['a', 'b', 'c', 'd'];\n * > const dims = getDims(labels);\n * > dims('a') === 0;\n * > dims('b') === 1;\n * > dims('c') === 2;\n * > dims('hi!'); // throws\n */\nexport function getDims<S extends string>(labels: S[]) {\n  const lookup = new Map(labels.map((name, i) => [name, i]));\n  if (lookup.size !== labels.length) {\n    throw Error('Labels must be unique, found duplicated label.');\n  }\n  return (name: S) => {\n    const index = lookup.get(name);\n    if (index === undefined) {\n      throw Error('Invalid dimension.');\n    }\n    return index;\n  };\n}\n\nfunction prevPowerOf2(x: number) {\n  return 2 ** Math.floor(Math.log2(x));\n}\n\n/*\n * Helper method to determine whether pixel data is interleaved or not.\n * > isInterleaved([1, 24, 24]) === false;\n * > isInterleaved([1, 24, 24, 3]) === true;\n */\nexport function isInterleaved(shape: number[]) {\n  const lastDimSize = shape[shape.length - 1];\n  return lastDimSize === 3 || lastDimSize === 4;\n}\n\nexport function guessTileSize(arr: ZarrArray) {\n  const interleaved = isInterleaved(arr.shape);\n  const [yChunk, xChunk] = arr.chunks.slice(interleaved ? -3 : -2);\n  const size = Math.min(yChunk, xChunk);\n  // deck.gl requirement for power-of-two tile size.\n  return prevPowerOf2(size);\n}\n\nexport function guessLabels(rootAttrs: RootAttrs) {\n  if ('omero' in rootAttrs) {\n    return ['t', 'c', 'z', 'y', 'x'] as Labels<['t', 'c', 'z']>;\n  }\n  throw new Error(\n    'Could not infer dimension labels for Zarr source. Must provide dimension labels.'\n  );\n}\n\n/*\n * The 'indexer' for a Zarr-based source translates\n * a 'selection' to an array of indices that align to\n * the labeled dimensions.\n *\n * > const labels = ['a', 'b', 'y', 'x'];\n * > const indexer = getIndexer(labels);\n * > console.log(indexer({ a: 10, b: 20 }));\n * > // [10, 20, 0, 0]\n */\nexport function getIndexer<T extends string>(labels: T[]) {\n  const size = labels.length;\n  const dims = getDims(labels);\n  return (sel: {[K in T]: number} | number[]) => {\n    if (Array.isArray(sel)) {\n      return [...sel];\n    }\n    const selection: number[] = Array(size).fill(0);\n    for (const [key, value] of Object.entries(sel)) {\n      selection[dims(key as T)] = value as number;\n    }\n    return selection;\n  };\n}\n\nexport function getImageSize<T extends string[]>(\n  source: PixelSource<T>\n): {height: number; width: number} {\n  const interleaved = isInterleaved(source.shape);\n  // 2D image data in Zarr are represented as (..., rows, columns [, bands])\n  // If an image is interleaved (RGB/A), we need to ignore the last dimension (bands)\n  // to get the height and weight of the image.\n  const [height, width] = source.shape.slice(interleaved ? -3 : -2);\n  return {height, width};\n}\n\n/**\n * Preserves (double) slashes earlier in the path, so this works better\n * for URLs. From https://stackoverflow.com/a/46427607\n * @param args parts of a path or URL to join.\n */\nexport function joinUrlParts(...args: string[]) {\n  return args\n    .map((part, i) => {\n      if (i === 0) return part.trim().replace(/[/]*$/g, '');\n      return part.trim().replace(/(^[/]*|[/]*$)/g, '');\n    })\n    .filter((x) => x.length)\n    .join('/');\n}\n\nexport function validLabels(labels: string[], shape: number[]): labels is Labels<string[]> {\n  if (labels.length !== shape.length) {\n    throw new Error('Labels do not match Zarr array shape.');\n  }\n  const n = shape.length;\n  if (isInterleaved(shape)) {\n    // last three dimensions are [row, column, bands]\n    return labels[n - 3] === 'y' && labels[n - 2] === 'x' && labels[n - 1] === '_c';\n  }\n  // last two dimensions are [row, column]\n  return labels[n - 2] === 'y' && labels[n - 1] === 'x';\n}\n"],"mappings":"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"}