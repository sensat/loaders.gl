{"version":3,"file":"load-zarr.js","names":["_utils","require","_zarrPixelSource","_interopRequireDefault","loadZarr","_x","_loadZarr","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","root","_options$labels","options","store","_yield$loadMultiscale","data","rootAttrs","tileSize","labels","pyramid","_args","wrap","_callee$","_context","prev","next","length","undefined","normalizeStore","loadMultiscales","sent","guessTileSize","guessLabels","validLabels","shape","Error","map","arr","ZarrPixelSource","abrupt","metadata","stop"],"sources":["../../../src/lib/load-zarr.ts"],"sourcesContent":["// eslint-disable-next-line import/no-unresolved\nimport type {Store} from 'zarr/types/storage/types';\nimport {loadMultiscales, guessTileSize, guessLabels, normalizeStore, validLabels} from './utils';\nimport ZarrPixelSource from './zarr-pixel-source';\n\ninterface ZarrOptions {\n  labels?: string[];\n}\n\nexport async function loadZarr(root: string | Store, options: ZarrOptions = {}) {\n  const store = normalizeStore(root);\n  const {data, rootAttrs} = await loadMultiscales(store);\n  const tileSize = guessTileSize(data[0]);\n\n  // If no labels are provided, inspect the root attributes for the store.\n  // For now, we only infer labels for OME-Zarr.\n  const labels = options.labels ?? guessLabels(rootAttrs);\n\n  if (!validLabels(labels, data[0].shape)) {\n    throw new Error('Invalid labels for Zarr array dimensions.');\n  }\n\n  const pyramid = data.map((arr) => new ZarrPixelSource(arr, labels, tileSize));\n  return {\n    data: pyramid,\n    metadata: rootAttrs\n  };\n}\n"],"mappings":";;;;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,gBAAA,GAAAC,sBAAA,CAAAF,OAAA;AAAkD,SAM5BG,QAAQA,CAAAC,EAAA;EAAA,OAAAC,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,UAAA;EAAAA,SAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAAvB,SAAAC,QAAwBC,IAAoB;IAAA,IAAAC,eAAA;IAAA,IAAAC,OAAA;MAAAC,KAAA;MAAAC,qBAAA;MAAAC,IAAA;MAAAC,SAAA;MAAAC,QAAA;MAAAC,MAAA;MAAAC,OAAA;MAAAC,KAAA,GAAAhB,SAAA;IAAA,OAAAG,YAAA,CAAAD,OAAA,CAAAe,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAEb,OAAoB,GAAAQ,KAAA,CAAAM,MAAA,QAAAN,KAAA,QAAAO,SAAA,GAAAP,KAAA,MAAG,CAAC,CAAC;UACtEP,KAAK,GAAG,IAAAe,qBAAc,EAAClB,IAAI,CAAC;UAAAa,QAAA,CAAAE,IAAA;UAAA,OACF,IAAAI,sBAAe,EAAChB,KAAK,CAAC;QAAA;UAAAC,qBAAA,GAAAS,QAAA,CAAAO,IAAA;UAA/Cf,IAAI,GAAAD,qBAAA,CAAJC,IAAI;UAAEC,SAAS,GAAAF,qBAAA,CAATE,SAAS;UAChBC,QAAQ,GAAG,IAAAc,oBAAa,EAAChB,IAAI,CAAC,CAAC,CAAC,CAAC;UAIjCG,MAAM,IAAAP,eAAA,GAAGC,OAAO,CAACM,MAAM,cAAAP,eAAA,cAAAA,eAAA,GAAI,IAAAqB,kBAAW,EAAChB,SAAS,CAAC;UAAA,IAElD,IAAAiB,kBAAW,EAACf,MAAM,EAAEH,IAAI,CAAC,CAAC,CAAC,CAACmB,KAAK,CAAC;YAAAX,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,MAC/B,IAAIU,KAAK,CAAC,2CAA2C,CAAC;QAAA;UAGxDhB,OAAO,GAAGJ,IAAI,CAACqB,GAAG,CAAC,UAACC,GAAG;YAAA,OAAK,IAAIC,wBAAe,CAACD,GAAG,EAAEnB,MAAM,EAAED,QAAQ,CAAC;UAAA,EAAC;UAAA,OAAAM,QAAA,CAAAgB,MAAA,WACtE;YACLxB,IAAI,EAAEI,OAAO;YACbqB,QAAQ,EAAExB;UACZ,CAAC;QAAA;QAAA;UAAA,OAAAO,QAAA,CAAAkB,IAAA;MAAA;IAAA,GAAAhC,OAAA;EAAA,CACF;EAAA,OAAAP,SAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA"}