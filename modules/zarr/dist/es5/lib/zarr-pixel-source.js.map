{"version":3,"file":"zarr-pixel-source.js","names":["_zarr","require","_utils","DTYPE_LOOKUP","u1","u2","u4","f4","f8","i1","i2","i4","exports","ZarrPixelSource","data","labels","tileSize","_classCallCheck2","default","_defineProperty2","_indexer","getIndexer","_data","xChunkSize","chunks","_xIndex","yChunkSize","_readChunks","_createClass2","key","get","shape","suffix","dtype","slice","Error","concat","interleave","isInterleaved","length","value","_chunkIndex","selection","x","y","sel","_getSlices","_getImageSize","getImageSize","height","width","_ref","Math","min","xStart","xStop","_ref2","yStart","yStop","BoundsCheckError","_getRaster","_asyncToGenerator2","_regenerator","mark","_callee","_ref3","_ref4","_shape","wrap","_callee$","_context","prev","next","getRaw","sent","_slicedToArray2","abrupt","stop","getRaster","_x","apply","arguments","_getTile","_callee2","props","signal","res","_sel","_this$_getSlices","_this$_getSlices2","xSlice","ySlice","_sel2","_ref5","_ref5$shape","_callee2$","_context2","getRawChunk","storeOptions","getTile","_x2","onTileError","err","_default"],"sources":["../../../src/lib/zarr-pixel-source.ts"],"sourcesContent":["import type {ZarrArray} from 'zarr';\n// eslint-disable-next-line import/no-unresolved\nimport type {RawArray} from 'zarr/types/rawArray';\nimport type {\n  PixelSource,\n  Labels,\n  RasterSelection,\n  PixelSourceSelection,\n  PixelData,\n  TileSelection\n} from '../types';\n\nimport {BoundsCheckError, slice} from 'zarr';\nimport {getImageSize, isInterleaved, getIndexer} from './utils';\n\nexport const DTYPE_LOOKUP = {\n  u1: 'Uint8',\n  u2: 'Uint16',\n  u4: 'Uint32',\n  f4: 'Float32',\n  f8: 'Float64',\n  i1: 'Int8',\n  i2: 'Int16',\n  i4: 'Int32'\n} as const;\n\ntype ZarrIndexer<S extends string[]> = (sel: {[K in S[number]]: number} | number[]) => number[];\n\ninterface ZarrTileSelection {\n  x: number;\n  y: number;\n  selection: number[];\n  signal?: AbortSignal;\n}\n\nclass ZarrPixelSource<S extends string[]> implements PixelSource<S> {\n  public labels: Labels<S>;\n  public tileSize: number;\n  private _data: ZarrArray;\n  private _indexer: ZarrIndexer<S>;\n  private _readChunks: boolean;\n\n  constructor(data: ZarrArray, labels: Labels<S>, tileSize: number) {\n    this._indexer = getIndexer(labels);\n    this._data = data;\n\n    const xChunkSize = data.chunks[this._xIndex];\n    const yChunkSize = data.chunks[this._xIndex - 1];\n    this._readChunks = tileSize === xChunkSize && tileSize === yChunkSize;\n    this.labels = labels;\n    this.tileSize = tileSize;\n  }\n\n  get shape() {\n    return this._data.shape;\n  }\n\n  get dtype() {\n    const suffix = this._data.dtype.slice(1) as keyof typeof DTYPE_LOOKUP;\n    if (!(suffix in DTYPE_LOOKUP)) {\n      throw Error(`Zarr dtype not supported, got ${suffix}.`);\n    }\n    return DTYPE_LOOKUP[suffix];\n  }\n\n  private get _xIndex() {\n    const interleave = isInterleaved(this._data.shape);\n    return this._data.shape.length - (interleave ? 2 : 1);\n  }\n\n  private _chunkIndex<T>(selection: PixelSourceSelection<S> | number[], x: T, y: T) {\n    const sel: (number | T)[] = this._indexer(selection);\n    sel[this._xIndex] = x;\n    sel[this._xIndex - 1] = y;\n    return sel;\n  }\n\n  /**\n   * Converts x, y tile indices to zarr dimension Slices within image bounds.\n   */\n  private _getSlices(x: number, y: number) {\n    const {height, width} = getImageSize(this);\n    const [xStart, xStop] = [x * this.tileSize, Math.min((x + 1) * this.tileSize, width)];\n    const [yStart, yStop] = [y * this.tileSize, Math.min((y + 1) * this.tileSize, height)];\n    // Deck.gl can sometimes request edge tiles that don't exist. We throw\n    // a BoundsCheckError which is picked up in `ZarrPixelSource.onTileError`\n    // and ignored by deck.gl.\n    if (xStart === xStop || yStart === yStop) {\n      throw new BoundsCheckError('Tile slice is zero-sized.');\n    }\n    return [slice(xStart, xStop), slice(yStart, yStop)];\n  }\n\n  async getRaster({selection}: RasterSelection<S> | {selection: number[]}) {\n    const sel = this._chunkIndex(selection, null, null);\n    const {data, shape} = (await this._data.getRaw(sel)) as RawArray;\n    const [height, width] = shape;\n    return {data, width, height} as PixelData;\n  }\n\n  async getTile(props: TileSelection<S> | ZarrTileSelection) {\n    const {x, y, selection, signal} = props;\n\n    let res;\n    if (this._readChunks) {\n      // Can read chunks directly by key since tile size matches chunk shape\n      const sel = this._chunkIndex(selection, x, y);\n      res = await this._data.getRawChunk(sel, {storeOptions: {signal}});\n    } else {\n      // Need to use zarr fancy indexing to get desired tile size.\n      const [xSlice, ySlice] = this._getSlices(x, y);\n      const sel = this._chunkIndex(selection, xSlice, ySlice);\n      res = await this._data.getRaw(sel);\n    }\n\n    const {\n      data,\n      shape: [height, width]\n    } = res as RawArray;\n    return {data, width, height} as PixelData;\n  }\n\n  onTileError(err: Error) {\n    if (!(err instanceof BoundsCheckError)) {\n      // Rethrow error if something other than tile being requested is out of bounds.\n      throw err;\n    }\n  }\n}\n\nexport default ZarrPixelSource;\n"],"mappings":"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"}