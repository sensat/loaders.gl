{"version":3,"file":"parse-flatgeobuf.js","names":["Proj4Projection","transformGeoJsonCoords","deserialize","deserializeGeoJson","deserializeGeneric","parseProperties","parsePropertiesBinary","fromGeometry","binaryFromGeometry","binaryFromFeature","feature","header","geometry","geometryType","type","parsedGeometry","properties","columns","parseFlatGeobuf","arrayBuffer","options","_options$gis","_options$flatgeobuf","shape","gis","format","flatgeobuf","table","data","parseFlatGeobufToGeoJSON","parseFlatGeobufToBinary","Error","array","Uint8Array","byteLength","reproject","_targetCrs","arr","headerMeta","features","crs","projection","from","wkt","to","e","coords","project","parseFlatGeobufInBatches","stream","parseFlatGeobufInBatchesToBinary","parseFlatGeobufInBatchesToGeoJSON","iterator","firstRecord"],"sources":["../../../src/lib/parse-flatgeobuf.ts"],"sourcesContent":["// @ts-nocheck\nimport {Proj4Projection} from '@math.gl/proj4';\nimport {transformGeoJsonCoords} from '@loaders.gl/gis';\n\nimport {deserialize as deserializeGeoJson} from 'flatgeobuf/lib/cjs/geojson';\nimport {deserialize as deserializeGeneric} from 'flatgeobuf/lib/cjs/generic';\nimport {parseProperties as parsePropertiesBinary} from 'flatgeobuf/lib/cjs/generic/feature';\n\nimport {fromGeometry as binaryFromGeometry} from './binary-geometries';\nimport {FlatGeobufLoaderOptions} from './types';\nimport {GeoJSONRowTable, Feature} from '@loaders.gl/schema';\n\n// TODO: reproject binary features\nfunction binaryFromFeature(feature, header) {\n  const geometry = feature.geometry();\n\n  // FlatGeobuf files can only hold a single geometry type per file, otherwise\n  // GeometryType is GeometryCollection\n  // I believe geometry.type() is null (0) except when the geometry type isn't\n  // known in the header?\n  const geometryType = header.geometryType || geometry.type();\n  const parsedGeometry = binaryFromGeometry(geometry, geometryType);\n  parsedGeometry.properties = parsePropertiesBinary(feature, header.columns);\n\n  // TODO: wrap binary data either in points, lines, or polygons key\n  return parsedGeometry;\n}\n\n/*\n * Parse FlatGeobuf arrayBuffer and return GeoJSON.\n *\n * @param arrayBuffer  A FlatGeobuf arrayBuffer\n * @return A GeoJSON geometry object\n */\nexport function parseFlatGeobuf(arrayBuffer: ArrayBuffer, options?: FlatGeobufLoaderOptions) {\n  const shape = options?.gis?.format || options?.flatgeobuf?.shape;\n\n  switch (shape) {\n    case 'geojson-row-table': {\n      const table: GeoJSONRowTable = {\n        shape: 'geojson-row-table',\n        data: parseFlatGeobufToGeoJSON(arrayBuffer, options)\n      };\n      return table;\n    }\n    case 'columnar-table': // binary + some JS arrays\n      return {shape: 'columnar-table', data: parseFlatGeobufToBinary(arrayBuffer, options)};\n    case 'geojson':\n      return parseFlatGeobufToGeoJSON(arrayBuffer, options);\n    case 'binary':\n      return parseFlatGeobufToBinary(arrayBuffer, options);\n    default:\n      throw new Error(shape);\n  }\n}\n\nfunction parseFlatGeobufToBinary(arrayBuffer: ArrayBuffer, options: FlatGeobufLoaderOptions) {\n  // TODO: reproject binary features\n  // const {reproject = false, _targetCrs = 'WGS84'} = (options && options.gis) || {};\n\n  const array = new Uint8Array(arrayBuffer);\n  return deserializeGeneric(array, binaryFromFeature);\n}\n\nfunction parseFlatGeobufToGeoJSON(\n  arrayBuffer: ArrayBuffer,\n  options: FlatGeobufLoaderOptions\n): Feature[] {\n  if (arrayBuffer.byteLength === 0) {\n    return [];\n  }\n\n  const {reproject = false, _targetCrs = 'WGS84'} = (options && options.gis) || {};\n\n  const arr = new Uint8Array(arrayBuffer);\n\n  let headerMeta;\n  const {features} = deserializeGeoJson(arr, false, (header) => {\n    headerMeta = header;\n  });\n\n  const crs = headerMeta && headerMeta.crs;\n  let projection;\n  if (reproject && crs) {\n    // Constructing the projection may fail for some invalid WKT strings\n    try {\n      projection = new Proj4Projection({from: crs.wkt, to: _targetCrs});\n    } catch (e) {\n      // no op\n    }\n  }\n\n  if (projection) {\n    return transformGeoJsonCoords(features, (coords) => projection.project(coords));\n  }\n\n  return features;\n}\n\n/*\n * Parse FlatGeobuf arrayBuffer and return GeoJSON.\n *\n * @param {ReadableStream} _ A FlatGeobuf arrayBuffer\n * @return  A GeoJSON geometry object iterator\n */\n// eslint-disable-next-line complexity\nexport function parseFlatGeobufInBatches(stream, options: FlatGeobufLoaderOptions) {\n  if (options && options.gis && options.gis.format === 'binary') {\n    return parseFlatGeobufInBatchesToBinary(stream, options);\n  }\n\n  return parseFlatGeobufInBatchesToGeoJSON(stream, options);\n}\n\nfunction parseFlatGeobufInBatchesToBinary(stream, options: FlatGeobufLoaderOptions) {\n  // TODO: reproject binary streaming features\n  // const {reproject = false, _targetCrs = 'WGS84'} = (options && options.gis) || {};\n\n  const iterator = deserializeGeneric(stream, binaryFromFeature);\n  return iterator;\n}\n\n// eslint-disable-next-line complexity\nasync function* parseFlatGeobufInBatchesToGeoJSON(stream, options: FlatGeobufLoaderOptions) {\n  const {reproject = false, _targetCrs = 'WGS84'} = (options && options.gis) || {};\n\n  let headerMeta;\n  const iterator = deserializeGeoJson(stream, false, (header) => {\n    headerMeta = header;\n  });\n\n  let projection;\n  let firstRecord = true;\n  for await (const feature of iterator) {\n    if (firstRecord) {\n      const crs = headerMeta && headerMeta.crs;\n      if (reproject && crs) {\n        projection = new Proj4Projection({from: crs.wkt, to: _targetCrs});\n      }\n\n      firstRecord = false;\n    }\n\n    if (reproject && projection) {\n      // eslint-disable-next-line\n      yield transformGeoJsonCoords([feature], (coords) => projection.project(coords));\n    } else {\n      yield feature;\n    }\n  }\n}\n"],"mappings":"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"}