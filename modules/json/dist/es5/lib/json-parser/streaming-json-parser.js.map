{"version":3,"file":"streaming-json-parser.js","names":["_jsonParser","_interopRequireDefault","require","_jsonpath","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","_getPrototypeOf2","default","result","NewTarget","Reflect","construct","arguments","apply","_possibleConstructorReturn2","sham","Proxy","Boolean","valueOf","StreamingJSONParser","_JSONParser","_inherits2","_super","_this","options","undefined","_classCallCheck2","onopenarray","streamingArray","_matchJSONPath","streamingJsonPath","getJsonPath","clone","_openArray","onopenobject","topLevelObject","_openObject","parser","emit","_defineProperty2","_assertThisInitialized2","jsonpaths","jsonPaths","map","jsonpath","JSONPath","_createClass2","key","write","chunk","_get2","array","_toConsumableArray2","getPartialResult","getStreamingJsonPath","getStreamingJsonPathAsString","currentPath","_iterator","_step","jsonPath","equals","JSONParser","exports"],"sources":["../../../../src/lib/json-parser/streaming-json-parser.ts"],"sourcesContent":["import {default as JSONParser} from './json-parser';\nimport JSONPath from '../jsonpath/jsonpath';\n\n/**\n * The `StreamingJSONParser` looks for the first array in the JSON structure.\n * and emits an array of chunks\n */\nexport default class StreamingJSONParser extends JSONParser {\n  private jsonPaths: JSONPath[];\n  private streamingJsonPath: JSONPath | null = null;\n  private streamingArray: any[] | null = null;\n  private topLevelObject: object | null = null;\n\n  constructor(options: {[key: string]: any} = {}) {\n    super({\n      onopenarray: () => {\n        if (!this.streamingArray) {\n          if (this._matchJSONPath()) {\n            // @ts-ignore\n            this.streamingJsonPath = this.getJsonPath().clone();\n            this.streamingArray = [];\n            this._openArray(this.streamingArray as []);\n            return;\n          }\n        }\n\n        this._openArray();\n      },\n\n      // Redefine onopenarray to inject value for top-level object\n      onopenobject: (name) => {\n        if (!this.topLevelObject) {\n          this.topLevelObject = {};\n          this._openObject(this.topLevelObject);\n        } else {\n          this._openObject({});\n        }\n        if (typeof name !== 'undefined') {\n          this.parser.emit('onkey', name);\n        }\n      }\n    });\n    const jsonpaths = options.jsonpaths || [];\n    this.jsonPaths = jsonpaths.map((jsonpath) => new JSONPath(jsonpath));\n  }\n\n  /**\n   * write REDEFINITION\n   * - super.write() chunk to parser\n   * - get the contents (so far) of \"topmost-level\" array as batch of rows\n   * - clear top-level array\n   * - return the batch of rows\\\n   */\n  write(chunk) {\n    super.write(chunk);\n    let array: any[] = [];\n    if (this.streamingArray) {\n      array = [...this.streamingArray];\n      this.streamingArray.length = 0;\n    }\n    return array;\n  }\n\n  /**\n   * Returns a partially formed result object\n   * Useful for returning the \"wrapper\" object when array is not top level\n   * e.g. GeoJSON\n   */\n  getPartialResult() {\n    return this.topLevelObject;\n  }\n\n  getStreamingJsonPath() {\n    return this.streamingJsonPath;\n  }\n\n  getStreamingJsonPathAsString() {\n    return this.streamingJsonPath && this.streamingJsonPath.toString();\n  }\n\n  getJsonPath() {\n    return this.jsonpath;\n  }\n\n  // PRIVATE METHODS\n\n  /**\n   * Checks is this.getJsonPath matches the jsonpaths provided in options\n   */\n  _matchJSONPath() {\n    const currentPath = this.getJsonPath();\n    // console.debug(`Testing JSONPath`, currentPath);\n\n    // Backwards compatibility, match any array\n    // TODO implement using wildcard once that is supported\n    if (this.jsonPaths.length === 0) {\n      return true;\n    }\n\n    for (const jsonPath of this.jsonPaths) {\n      if (jsonPath.equals(currentPath)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,IAAAA,WAAA,GAAAC,sBAAA,CAAAC,OAAA;AACA,IAAAC,SAAA,GAAAF,sBAAA,CAAAC,OAAA;AAA4C,SAAAE,2BAAAC,CAAA,EAAAC,cAAA,QAAAC,EAAA,UAAAC,MAAA,oBAAAH,CAAA,CAAAG,MAAA,CAAAC,QAAA,KAAAJ,CAAA,qBAAAE,EAAA,QAAAG,KAAA,CAAAC,OAAA,CAAAN,CAAA,MAAAE,EAAA,GAAAK,2BAAA,CAAAP,CAAA,MAAAC,cAAA,IAAAD,CAAA,WAAAA,CAAA,CAAAQ,MAAA,qBAAAN,EAAA,EAAAF,CAAA,GAAAE,EAAA,MAAAO,CAAA,UAAAC,CAAA,YAAAA,EAAA,eAAAC,CAAA,EAAAD,CAAA,EAAAE,CAAA,WAAAA,EAAA,QAAAH,CAAA,IAAAT,CAAA,CAAAQ,MAAA,WAAAK,IAAA,mBAAAA,IAAA,SAAAC,KAAA,EAAAd,CAAA,CAAAS,CAAA,UAAAM,CAAA,WAAAA,EAAAC,EAAA,UAAAA,EAAA,KAAAC,CAAA,EAAAP,CAAA,gBAAAQ,SAAA,iJAAAC,gBAAA,SAAAC,MAAA,UAAAC,GAAA,WAAAV,CAAA,WAAAA,EAAA,IAAAT,EAAA,GAAAA,EAAA,CAAAoB,IAAA,CAAAtB,CAAA,MAAAY,CAAA,WAAAA,EAAA,QAAAW,IAAA,GAAArB,EAAA,CAAAsB,IAAA,IAAAL,gBAAA,GAAAI,IAAA,CAAAV,IAAA,SAAAU,IAAA,KAAAR,CAAA,WAAAA,EAAAU,GAAA,IAAAL,MAAA,SAAAC,GAAA,GAAAI,GAAA,KAAAR,CAAA,WAAAA,EAAA,eAAAE,gBAAA,IAAAjB,EAAA,CAAAwB,MAAA,UAAAxB,EAAA,CAAAwB,MAAA,oBAAAN,MAAA,QAAAC,GAAA;AAAA,SAAAd,4BAAAP,CAAA,EAAA2B,MAAA,SAAA3B,CAAA,qBAAAA,CAAA,sBAAA4B,iBAAA,CAAA5B,CAAA,EAAA2B,MAAA,OAAAf,CAAA,GAAAiB,MAAA,CAAAC,SAAA,CAAAC,QAAA,CAAAT,IAAA,CAAAtB,CAAA,EAAAgC,KAAA,aAAApB,CAAA,iBAAAZ,CAAA,CAAAiC,WAAA,EAAArB,CAAA,GAAAZ,CAAA,CAAAiC,WAAA,CAAAC,IAAA,MAAAtB,CAAA,cAAAA,CAAA,mBAAAP,KAAA,CAAA8B,IAAA,CAAAnC,CAAA,OAAAY,CAAA,+DAAAwB,IAAA,CAAAxB,CAAA,UAAAgB,iBAAA,CAAA5B,CAAA,EAAA2B,MAAA;AAAA,SAAAC,kBAAAS,GAAA,EAAAC,GAAA,QAAAA,GAAA,YAAAA,GAAA,GAAAD,GAAA,CAAA7B,MAAA,EAAA8B,GAAA,GAAAD,GAAA,CAAA7B,MAAA,WAAAC,CAAA,MAAA8B,IAAA,OAAAlC,KAAA,CAAAiC,GAAA,GAAA7B,CAAA,GAAA6B,GAAA,EAAA7B,CAAA,IAAA8B,IAAA,CAAA9B,CAAA,IAAA4B,GAAA,CAAA5B,CAAA,UAAA8B,IAAA;AAAA,SAAAC,aAAAC,OAAA,QAAAC,yBAAA,GAAAC,yBAAA,oBAAAC,qBAAA,QAAAC,KAAA,OAAAC,gBAAA,CAAAC,OAAA,EAAAN,OAAA,GAAAO,MAAA,MAAAN,yBAAA,QAAAO,SAAA,OAAAH,gBAAA,CAAAC,OAAA,QAAAd,WAAA,EAAAe,MAAA,GAAAE,OAAA,CAAAC,SAAA,CAAAN,KAAA,EAAAO,SAAA,EAAAH,SAAA,YAAAD,MAAA,GAAAH,KAAA,CAAAQ,KAAA,OAAAD,SAAA,gBAAAE,2BAAA,CAAAP,OAAA,QAAAC,MAAA;AAAA,SAAAL,0BAAA,eAAAO,OAAA,qBAAAA,OAAA,CAAAC,SAAA,oBAAAD,OAAA,CAAAC,SAAA,CAAAI,IAAA,2BAAAC,KAAA,oCAAAC,OAAA,CAAA3B,SAAA,CAAA4B,OAAA,CAAApC,IAAA,CAAA4B,OAAA,CAAAC,SAAA,CAAAM,OAAA,8CAAA1C,CAAA;AAAA,IAMvB4C,mBAAmB,aAAAC,WAAA;EAAA,IAAAC,UAAA,CAAAd,OAAA,EAAAY,mBAAA,EAAAC,WAAA;EAAA,IAAAE,MAAA,GAAAtB,YAAA,CAAAmB,mBAAA;EAMtC,SAAAA,oBAAA,EAAgD;IAAA,IAAAI,KAAA;IAAA,IAApCC,OAA6B,GAAAZ,SAAA,CAAA5C,MAAA,QAAA4C,SAAA,QAAAa,SAAA,GAAAb,SAAA,MAAG,CAAC,CAAC;IAAA,IAAAc,gBAAA,CAAAnB,OAAA,QAAAY,mBAAA;IAC5CI,KAAA,GAAAD,MAAA,CAAAxC,IAAA,OAAM;MACJ6C,WAAW,EAAE,SAAAA,YAAA,EAAM;QACjB,IAAI,CAACJ,KAAA,CAAKK,cAAc,EAAE;UACxB,IAAIL,KAAA,CAAKM,cAAc,CAAC,CAAC,EAAE;YAEzBN,KAAA,CAAKO,iBAAiB,GAAGP,KAAA,CAAKQ,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;YACnDT,KAAA,CAAKK,cAAc,GAAG,EAAE;YACxBL,KAAA,CAAKU,UAAU,CAACV,KAAA,CAAKK,cAAoB,CAAC;YAC1C;UACF;QACF;QAEAL,KAAA,CAAKU,UAAU,CAAC,CAAC;MACnB,CAAC;MAGDC,YAAY,EAAE,SAAAA,aAACxC,IAAI,EAAK;QACtB,IAAI,CAAC6B,KAAA,CAAKY,cAAc,EAAE;UACxBZ,KAAA,CAAKY,cAAc,GAAG,CAAC,CAAC;UACxBZ,KAAA,CAAKa,WAAW,CAACb,KAAA,CAAKY,cAAc,CAAC;QACvC,CAAC,MAAM;UACLZ,KAAA,CAAKa,WAAW,CAAC,CAAC,CAAC,CAAC;QACtB;QACA,IAAI,OAAO1C,IAAI,KAAK,WAAW,EAAE;UAC/B6B,KAAA,CAAKc,MAAM,CAACC,IAAI,CAAC,OAAO,EAAE5C,IAAI,CAAC;QACjC;MACF;IACF,CAAC;IAAE,IAAA6C,gBAAA,CAAAhC,OAAA,MAAAiC,uBAAA,CAAAjC,OAAA,EAAAgB,KAAA;IAAA,IAAAgB,gBAAA,CAAAhC,OAAA,MAAAiC,uBAAA,CAAAjC,OAAA,EAAAgB,KAAA,wBAhCwC,IAAI;IAAA,IAAAgB,gBAAA,CAAAhC,OAAA,MAAAiC,uBAAA,CAAAjC,OAAA,EAAAgB,KAAA,qBACV,IAAI;IAAA,IAAAgB,gBAAA,CAAAhC,OAAA,MAAAiC,uBAAA,CAAAjC,OAAA,EAAAgB,KAAA,qBACH,IAAI;IA+B1C,IAAMkB,SAAS,GAAGjB,OAAO,CAACiB,SAAS,IAAI,EAAE;IACzClB,KAAA,CAAKmB,SAAS,GAAGD,SAAS,CAACE,GAAG,CAAC,UAACC,QAAQ;MAAA,OAAK,IAAIC,iBAAQ,CAACD,QAAQ,CAAC;IAAA,EAAC;IAAC,OAAArB,KAAA;EACvE;EAAC,IAAAuB,aAAA,CAAAvC,OAAA,EAAAY,mBAAA;IAAA4B,GAAA;IAAAzE,KAAA,EASD,SAAA0E,MAAMC,KAAK,EAAE;MACX,IAAAC,KAAA,CAAA3C,OAAA,MAAAD,gBAAA,CAAAC,OAAA,EAAAY,mBAAA,CAAA7B,SAAA,kBAAAR,IAAA,OAAYmE,KAAK;MACjB,IAAIE,KAAY,GAAG,EAAE;MACrB,IAAI,IAAI,CAACvB,cAAc,EAAE;QACvBuB,KAAK,OAAAC,mBAAA,CAAA7C,OAAA,EAAO,IAAI,CAACqB,cAAc,CAAC;QAChC,IAAI,CAACA,cAAc,CAAC5D,MAAM,GAAG,CAAC;MAChC;MACA,OAAOmF,KAAK;IACd;EAAC;IAAAJ,GAAA;IAAAzE,KAAA,EAOD,SAAA+E,iBAAA,EAAmB;MACjB,OAAO,IAAI,CAAClB,cAAc;IAC5B;EAAC;IAAAY,GAAA;IAAAzE,KAAA,EAED,SAAAgF,qBAAA,EAAuB;MACrB,OAAO,IAAI,CAACxB,iBAAiB;IAC/B;EAAC;IAAAiB,GAAA;IAAAzE,KAAA,EAED,SAAAiF,6BAAA,EAA+B;MAC7B,OAAO,IAAI,CAACzB,iBAAiB,IAAI,IAAI,CAACA,iBAAiB,CAACvC,QAAQ,CAAC,CAAC;IACpE;EAAC;IAAAwD,GAAA;IAAAzE,KAAA,EAED,SAAAyD,YAAA,EAAc;MACZ,OAAO,IAAI,CAACa,QAAQ;IACtB;EAAC;IAAAG,GAAA;IAAAzE,KAAA,EAOD,SAAAuD,eAAA,EAAiB;MACf,IAAM2B,WAAW,GAAG,IAAI,CAACzB,WAAW,CAAC,CAAC;MAKtC,IAAI,IAAI,CAACW,SAAS,CAAC1E,MAAM,KAAK,CAAC,EAAE;QAC/B,OAAO,IAAI;MACb;MAAC,IAAAyF,SAAA,GAAAlG,0BAAA,CAEsB,IAAI,CAACmF,SAAS;QAAAgB,KAAA;MAAA;QAArC,KAAAD,SAAA,CAAAtF,CAAA,MAAAuF,KAAA,GAAAD,SAAA,CAAArF,CAAA,IAAAC,IAAA,GAAuC;UAAA,IAA5BsF,QAAQ,GAAAD,KAAA,CAAApF,KAAA;UACjB,IAAIqF,QAAQ,CAACC,MAAM,CAACJ,WAAW,CAAC,EAAE;YAChC,OAAO,IAAI;UACb;QACF;MAAC,SAAA3E,GAAA;QAAA4E,SAAA,CAAAlF,CAAA,CAAAM,GAAA;MAAA;QAAA4E,SAAA,CAAAhF,CAAA;MAAA;MAED,OAAO,KAAK;IACd;EAAC;EAAA,OAAA0C,mBAAA;AAAA,EAnG8C0C,mBAAU;AAAAC,OAAA,CAAAvD,OAAA,GAAAY,mBAAA"}