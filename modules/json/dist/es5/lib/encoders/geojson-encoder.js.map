{"version":3,"file":"geojson-encoder.js","names":["_schema","require","_encodeUtils","_utf8Encoder","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_asyncIterator","iterable","method","async","sync","retry","Symbol","asyncIterator","iterator","call","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Promise","reject","done","resolve","value","then","n","next","prototype","return","_return","ret","throw","_throw","thr","encodeTableAsGeojsonInBatches","_x","_encodeTableAsGeojsonInBatches","_wrapAsyncGenerator2","batchIterator","inputOpts","undefined","_regenerator","mark","_callee","options","utf8Encoder","geometryColumn","isFirstLine","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","batch","table","start","_batch$end","end","rowIndex","arrayBufferBatch","wrap","_callee$","_context","prev","geojson","chunkSize","Utf8ArrayBufferEncoder","featureArray","_awaitAsyncGenerator2","sent","getTableLength","detectGeometryColumnIndex","encodeRow","isFull","getArrayBufferBatch","byteLength","t0","finish","stop","geometryColumnIndex","row","getTableRowAsObject","featureWithProperties","getFeatureFromRow","featureString","JSON","stringify","_table$schema","_featureOrGeometry","_featureOrGeometry2","properties","getRowPropertyObject","columnName","schema","fields","name","featureOrGeometry","type","geometry","parse","err","Error","_typeof2"],"sources":["../../../../src/lib/encoders/geojson-encoder.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Feature, getTableLength} from '@loaders.gl/schema';\nimport {Table, TableBatch, getTableRowAsObject} from '@loaders.gl/schema';\nimport {detectGeometryColumnIndex, getRowPropertyObject} from './encode-utils';\nimport {Utf8ArrayBufferEncoder} from './utf8-encoder';\n\ntype Row = {[key: string]: unknown};\n\nexport type GeoJSONWriterOptions = {\n  geojson?: {\n    featureArray?: boolean;\n    geometryColumn?: number | null;\n  };\n  chunkSize?: number;\n};\n\n/**\n * Encode a table as GeoJSON\n */\n// eslint-disable-next-line max-statements\nexport async function* encodeTableAsGeojsonInBatches(\n  batchIterator: AsyncIterable<TableBatch>, // | Iterable<TableBatch>,\n  inputOpts: GeoJSONWriterOptions = {}\n): AsyncIterable<ArrayBuffer> {\n  const options: Required<GeoJSONWriterOptions> = {geojson: {}, chunkSize: 10000, ...inputOpts};\n\n  const utf8Encoder = new Utf8ArrayBufferEncoder(options.chunkSize);\n\n  if (!options.geojson.featureArray) {\n    utf8Encoder.push('{\\n', '\"type\": \"FeatureCollection\",\\n', '\"features\":\\n');\n  }\n  utf8Encoder.push('['); // Note no newline\n\n  let geometryColumn = options.geojson.geometryColumn;\n\n  let isFirstLine = true;\n\n  for await (const batch of batchIterator) {\n    const {table, start, end = getTableLength(batch.table) - start} = batch;\n\n    // Deduce geometry column if not already done\n    if (!geometryColumn) {\n      geometryColumn = geometryColumn || detectGeometryColumnIndex(table);\n    }\n\n    for (let rowIndex = start; rowIndex < end; ++rowIndex) {\n      // Add a comma except on final feature\n      if (!isFirstLine) {\n        utf8Encoder.push(',');\n      }\n      utf8Encoder.push('\\n');\n      isFirstLine = false;\n\n      encodeRow(table, rowIndex, geometryColumn, utf8Encoder);\n\n      // eslint-disable-next-line max-depth\n      if (utf8Encoder.isFull()) {\n        yield utf8Encoder.getArrayBufferBatch();\n      }\n    }\n    const arrayBufferBatch = utf8Encoder.getArrayBufferBatch();\n    if (arrayBufferBatch.byteLength > 0) {\n      yield arrayBufferBatch;\n    }\n  }\n\n  utf8Encoder.push('\\n');\n\n  // Add completing rows and emit final batch\n  utf8Encoder.push(']\\n');\n  if (!options.geojson.featureArray) {\n    utf8Encoder.push('}');\n  }\n\n  // Note: Since we pushed a few final lines, the last batch will always exist, no need to check first\n  yield utf8Encoder.getArrayBufferBatch();\n}\n\n// Helpers\n\n/**\n * Encode a row. Currently this ignores properties in the geometry column.\n */\nfunction encodeRow(\n  table: Table,\n  rowIndex: number,\n  geometryColumnIndex: number,\n  utf8Encoder: Utf8ArrayBufferEncoder\n): void {\n  const row = getTableRowAsObject(table, rowIndex);\n  if (!row) return;\n  const featureWithProperties = getFeatureFromRow(table, row, geometryColumnIndex);\n  const featureString = JSON.stringify(featureWithProperties);\n  utf8Encoder.push(featureString);\n}\n\n/**\n * Encode a row as a Feature. Currently this ignores properties objects in the geometry column.\n */\nfunction getFeatureFromRow(table: Table, row: Row, geometryColumnIndex: number): Feature {\n  // Extract non-feature/geometry properties\n  const properties = getRowPropertyObject(table, row, [geometryColumnIndex]);\n\n  // Extract geometry feature\n  const columnName = table.schema?.fields[geometryColumnIndex].name;\n  let featureOrGeometry =\n    columnName && (row[columnName] as {[key: string]: unknown} | string | null | undefined);\n\n  // GeoJSON support null geometries\n  if (!featureOrGeometry) {\n    // @ts-ignore Feature type does not support null geometries\n    return {type: 'Feature', geometry: null, properties};\n  }\n\n  // Support string geometries?\n  // TODO: This assumes GeoJSON strings, which may not be the correct format\n  // (could be WKT, encoded WKB...)\n  if (typeof featureOrGeometry === 'string') {\n    try {\n      featureOrGeometry = JSON.parse(featureOrGeometry);\n    } catch (err) {\n      throw new Error('Invalid string geometry');\n    }\n  }\n\n  if (typeof featureOrGeometry !== 'object' || typeof featureOrGeometry?.type !== 'string') {\n    throw new Error('invalid geometry column value');\n  }\n\n  if (featureOrGeometry?.type === 'Feature') {\n    // @ts-ignore Feature type does not support null geometries\n    return {...featureOrGeometry, properties};\n  }\n\n  // @ts-ignore Feature type does not support null geometries\n  return {type: 'Feature', geometry: featureOrGeometry, properties};\n}\n"],"mappings":"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"}