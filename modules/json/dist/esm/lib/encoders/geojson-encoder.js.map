{"version":3,"file":"geojson-encoder.js","names":["getTableLength","getTableRowAsObject","detectGeometryColumnIndex","getRowPropertyObject","Utf8ArrayBufferEncoder","encodeTableAsGeojsonInBatches","batchIterator","inputOpts","arguments","length","undefined","options","geojson","chunkSize","utf8Encoder","featureArray","push","geometryColumn","isFirstLine","batch","table","start","end","rowIndex","encodeRow","isFull","getArrayBufferBatch","arrayBufferBatch","byteLength","e","Promise","reject","geometryColumnIndex","row","featureWithProperties","getFeatureFromRow","featureString","JSON","stringify","_table$schema","_featureOrGeometry","_featureOrGeometry2","properties","columnName","schema","fields","name","featureOrGeometry","type","geometry","parse","err","Error"],"sources":["../../../../src/lib/encoders/geojson-encoder.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Feature, getTableLength} from '@loaders.gl/schema';\nimport {Table, TableBatch, getTableRowAsObject} from '@loaders.gl/schema';\nimport {detectGeometryColumnIndex, getRowPropertyObject} from './encode-utils';\nimport {Utf8ArrayBufferEncoder} from './utf8-encoder';\n\ntype Row = {[key: string]: unknown};\n\nexport type GeoJSONWriterOptions = {\n  geojson?: {\n    featureArray?: boolean;\n    geometryColumn?: number | null;\n  };\n  chunkSize?: number;\n};\n\n/**\n * Encode a table as GeoJSON\n */\n// eslint-disable-next-line max-statements\nexport async function* encodeTableAsGeojsonInBatches(\n  batchIterator: AsyncIterable<TableBatch>, // | Iterable<TableBatch>,\n  inputOpts: GeoJSONWriterOptions = {}\n): AsyncIterable<ArrayBuffer> {\n  const options: Required<GeoJSONWriterOptions> = {geojson: {}, chunkSize: 10000, ...inputOpts};\n\n  const utf8Encoder = new Utf8ArrayBufferEncoder(options.chunkSize);\n\n  if (!options.geojson.featureArray) {\n    utf8Encoder.push('{\\n', '\"type\": \"FeatureCollection\",\\n', '\"features\":\\n');\n  }\n  utf8Encoder.push('['); // Note no newline\n\n  let geometryColumn = options.geojson.geometryColumn;\n\n  let isFirstLine = true;\n\n  for await (const batch of batchIterator) {\n    const {table, start, end = getTableLength(batch.table) - start} = batch;\n\n    // Deduce geometry column if not already done\n    if (!geometryColumn) {\n      geometryColumn = geometryColumn || detectGeometryColumnIndex(table);\n    }\n\n    for (let rowIndex = start; rowIndex < end; ++rowIndex) {\n      // Add a comma except on final feature\n      if (!isFirstLine) {\n        utf8Encoder.push(',');\n      }\n      utf8Encoder.push('\\n');\n      isFirstLine = false;\n\n      encodeRow(table, rowIndex, geometryColumn, utf8Encoder);\n\n      // eslint-disable-next-line max-depth\n      if (utf8Encoder.isFull()) {\n        yield utf8Encoder.getArrayBufferBatch();\n      }\n    }\n    const arrayBufferBatch = utf8Encoder.getArrayBufferBatch();\n    if (arrayBufferBatch.byteLength > 0) {\n      yield arrayBufferBatch;\n    }\n  }\n\n  utf8Encoder.push('\\n');\n\n  // Add completing rows and emit final batch\n  utf8Encoder.push(']\\n');\n  if (!options.geojson.featureArray) {\n    utf8Encoder.push('}');\n  }\n\n  // Note: Since we pushed a few final lines, the last batch will always exist, no need to check first\n  yield utf8Encoder.getArrayBufferBatch();\n}\n\n// Helpers\n\n/**\n * Encode a row. Currently this ignores properties in the geometry column.\n */\nfunction encodeRow(\n  table: Table,\n  rowIndex: number,\n  geometryColumnIndex: number,\n  utf8Encoder: Utf8ArrayBufferEncoder\n): void {\n  const row = getTableRowAsObject(table, rowIndex);\n  if (!row) return;\n  const featureWithProperties = getFeatureFromRow(table, row, geometryColumnIndex);\n  const featureString = JSON.stringify(featureWithProperties);\n  utf8Encoder.push(featureString);\n}\n\n/**\n * Encode a row as a Feature. Currently this ignores properties objects in the geometry column.\n */\nfunction getFeatureFromRow(table: Table, row: Row, geometryColumnIndex: number): Feature {\n  // Extract non-feature/geometry properties\n  const properties = getRowPropertyObject(table, row, [geometryColumnIndex]);\n\n  // Extract geometry feature\n  const columnName = table.schema?.fields[geometryColumnIndex].name;\n  let featureOrGeometry =\n    columnName && (row[columnName] as {[key: string]: unknown} | string | null | undefined);\n\n  // GeoJSON support null geometries\n  if (!featureOrGeometry) {\n    // @ts-ignore Feature type does not support null geometries\n    return {type: 'Feature', geometry: null, properties};\n  }\n\n  // Support string geometries?\n  // TODO: This assumes GeoJSON strings, which may not be the correct format\n  // (could be WKT, encoded WKB...)\n  if (typeof featureOrGeometry === 'string') {\n    try {\n      featureOrGeometry = JSON.parse(featureOrGeometry);\n    } catch (err) {\n      throw new Error('Invalid string geometry');\n    }\n  }\n\n  if (typeof featureOrGeometry !== 'object' || typeof featureOrGeometry?.type !== 'string') {\n    throw new Error('invalid geometry column value');\n  }\n\n  if (featureOrGeometry?.type === 'Feature') {\n    // @ts-ignore Feature type does not support null geometries\n    return {...featureOrGeometry, properties};\n  }\n\n  // @ts-ignore Feature type does not support null geometries\n  return {type: 'Feature', geometry: featureOrGeometry, properties};\n}\n"],"mappings":"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"}