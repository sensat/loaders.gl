{"version":3,"file":"json-encoder.js","names":["makeRowIterator","encodeTableAsJSON","table","options","arguments","length","undefined","shape","strings","rowIterator","row","push","JSON","stringify","concat","join"],"sources":["../../../../src/lib/encoders/json-encoder.ts"],"sourcesContent":["// loaders.gl, MIT license\n// Copyright 2022 Foursquare Labs, Inc.\n\nimport {Table, makeRowIterator} from '@loaders.gl/schema';\n\ntype RowArray = unknown[];\ntype RowObject = {[key: string]: unknown};\ntype TableJSON = RowArray[] | RowObject[];\n\nexport type JSONWriterOptions = {\n  shape?: 'object-row-table' | 'array-row-table';\n  wrapper?: (table: TableJSON) => unknown;\n};\n\n/**\n * Encode a table as a JSON string\n */\nexport function encodeTableAsJSON(table: Table, options: JSONWriterOptions = {}): string {\n  const shape = options.shape || 'object-row-table';\n\n  const strings: string[] = [];\n  const rowIterator = makeRowIterator(table, shape);\n  for (const row of rowIterator) {\n    // Round elements etc\n    // processRow(wrappedRow, table.schema);\n    // const wrappedRow = options.wrapper ? options.wrapper(row) : row;\n    strings.push(JSON.stringify(row));\n  }\n  return `[${strings.join(',')}]`;\n}\n"],"mappings":"AAGA,SAAeA,eAAe,QAAO,oBAAoB;AAczD,OAAO,SAASC,iBAAiBA,CAACC,KAAY,EAA2C;EAAA,IAAzCC,OAA0B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC7E,MAAMG,KAAK,GAAGJ,OAAO,CAACI,KAAK,IAAI,kBAAkB;EAEjD,MAAMC,OAAiB,GAAG,EAAE;EAC5B,MAAMC,WAAW,GAAGT,eAAe,CAACE,KAAK,EAAEK,KAAK,CAAC;EACjD,KAAK,MAAMG,GAAG,IAAID,WAAW,EAAE;IAI7BD,OAAO,CAACG,IAAI,CAACC,IAAI,CAACC,SAAS,CAACH,GAAG,CAAC,CAAC;EACnC;EACA,WAAAI,MAAA,CAAWN,OAAO,CAACO,IAAI,CAAC,GAAG,CAAC;AAC9B"}