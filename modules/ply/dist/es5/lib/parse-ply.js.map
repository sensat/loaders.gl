{"version":3,"file":"parse-ply.js","names":["_normalizePly","_interopRequireDefault","require","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","parsePLY","data","options","arguments","undefined","header","attributes","ArrayBuffer","text","TextDecoder","decode","parseHeader","format","parseASCII","parseBinary","normalizePLY","PLY_HEADER_PATTERN","headerText","headerLength","result","exec","lines","split","parseHeaderLines","comments","elements","lineType","lineValues","currentElement","line","trim","shift","join","version","push","count","parseInt","properties","property","makePLYElementProperty","propertyNameMapping","console","log","getPLYAttributes","indices","vertices","normals","uvs","colors","_iterator","_step","element","_iterator2","_step2","propertyValues","type","countType","itemType","parseASCIINumber","parseFloat","Error","parsePLYElement","values","list","j","patternBody","body","currentElementCount","handleElement","buffer","elementName","_i","_Object$keys","keys","propertyName","x","y","z","nx","ny","nz","t","red","green","blue","vertexIndices","vertex_indices","vertex_index","binaryRead","dataview","at","littleEndian","getInt8","getUint8","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","binaryReadElement","read","DataView","loc"],"sources":["../../../src/lib/parse-ply.ts"],"sourcesContent":["// PLY Loader, adapted from THREE.js (MIT license)\n//\n// Attributions per original THREE.js source file:\n//\n// @author Wei Meng / http://about.me/menway\n//\n// Description: A loader for PLY ASCII files (known as the Polygon File Format\n// or the Stanford Triangle Format).\n//\n// Limitations: ASCII decoding assumes file is UTF-8.\n//\n// If the PLY file uses non standard property names, they can be mapped while\n// loading. For example, the following maps the properties\n// “diffuse_(red|green|blue)” in the file to standard color names.\n//\n// parsePLY(data, {\n//   propertyNameMapping: {\n//     diffuse_red: 'red',\n//     diffuse_green: 'green',\n//     diffuse_blue: 'blue'\n//   }\n// });\nimport type {\n  PLYMesh,\n  PLYHeader,\n  PLYAttributes,\n  MeshHeader,\n  PLYElement,\n  PLYProperty\n} from './ply-types';\nimport normalizePLY from './normalize-ply';\n\nexport type ParsePLYOptions = {\n  propertyNameMapping?: Record<string, string>;\n};\n\n/**\n * @param data\n * @param options\n * @returns\n */\nexport function parsePLY(data: ArrayBuffer | string, options: ParsePLYOptions = {}): PLYMesh {\n  let header: PLYHeader & MeshHeader;\n  let attributes: PLYAttributes;\n\n  if (data instanceof ArrayBuffer) {\n    const text = new TextDecoder().decode(data);\n    header = parseHeader(text, options);\n    attributes = header.format === 'ascii' ? parseASCII(text, header) : parseBinary(data, header);\n  } else {\n    header = parseHeader(data, options);\n    attributes = parseASCII(data, header);\n  }\n\n  return normalizePLY(header, attributes);\n}\n\n/**\n * @param data\n * @param options\n * @returns header\n */\nfunction parseHeader(data: any, options?: ParsePLYOptions): PLYHeader {\n  const PLY_HEADER_PATTERN = /ply([\\s\\S]*)end_header\\s/;\n\n  let headerText = '';\n  let headerLength = 0;\n\n  const result = PLY_HEADER_PATTERN.exec(data);\n\n  if (result !== null) {\n    headerText = result[1];\n    headerLength = result[0].length;\n  }\n  const lines = headerText.split('\\n');\n  const header = parseHeaderLines(lines, headerLength, options);\n\n  return header;\n}\n\n/**\n * @param lines\n * @param headerLength\n * @param options\n * @returns header\n */\n// eslint-disable-next-line complexity\nfunction parseHeaderLines(\n  lines: string[],\n  headerLength: number,\n  options?: ParsePLYOptions\n): PLYHeader {\n  const header: PLYHeader = {\n    comments: [],\n    elements: [],\n    headerLength\n  };\n\n  let lineType: string | undefined;\n  let lineValues: string[];\n  let currentElement: PLYElement | null = null;\n\n  for (let i = 0; i < lines.length; i++) {\n    let line: string = lines[i];\n    line = line.trim();\n\n    if (line === '') {\n      // eslint-disable-next-line\n      continue;\n    }\n\n    lineValues = line.split(/\\s+/);\n    lineType = lineValues.shift();\n    line = lineValues.join(' ');\n\n    switch (lineType) {\n      case 'format':\n        header.format = lineValues[0];\n        header.version = lineValues[1];\n        break;\n\n      case 'comment':\n        header.comments.push(line);\n        break;\n\n      case 'element':\n        // Start new element, store previous element\n        if (currentElement) {\n          header.elements.push(currentElement);\n        }\n\n        currentElement = {\n          name: lineValues[0],\n          count: parseInt(lineValues[1], 10),\n          properties: []\n        };\n        break;\n\n      case 'property':\n        if (currentElement) {\n          const property = makePLYElementProperty(lineValues);\n          if (options?.propertyNameMapping && property.name in options?.propertyNameMapping) {\n            property.name = options?.propertyNameMapping[property.name];\n          }\n          currentElement.properties.push(property);\n        }\n        break;\n\n      default:\n        // eslint-disable-next-line\n        console.log('unhandled', lineType, lineValues);\n    }\n  }\n\n  // Store in-progress element\n  if (currentElement) {\n    header.elements.push(currentElement);\n  }\n\n  return header;\n}\n\n/** Generate attributes arrays from the header */\n// eslint-disable-next-line complexity\nfunction getPLYAttributes(header: PLYHeader): PLYAttributes {\n  // TODO Generate only the attribute arrays actually in the header\n  const attributes = {\n    indices: [],\n    vertices: [],\n    normals: [],\n    uvs: [],\n    colors: []\n  };\n\n  for (const element of header.elements) {\n    if (element.name === 'vertex') {\n      for (const property of element.properties) {\n        switch (property.name) {\n          case 'x':\n          case 'y':\n          case 'z':\n          case 'nx':\n          case 'ny':\n          case 'nz':\n          case 's':\n          case 't':\n          case 'red':\n          case 'green':\n          case 'blue':\n            break;\n          default:\n            // Add any non-geometry attributes\n            attributes[property.name] = [];\n            break;\n        }\n      }\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * @param propertyValues\n * @returns property of ply element\n */\nfunction makePLYElementProperty(propertyValues: string[]): PLYProperty {\n  const type = propertyValues[0];\n  switch (type) {\n    case 'list':\n      return {\n        type,\n        name: propertyValues[3],\n        countType: propertyValues[1],\n        itemType: propertyValues[2]\n      };\n    default:\n      return {\n        type,\n        name: propertyValues[1]\n      };\n  }\n}\n\n/**\n * Parses ASCII number\n * @param n\n * @param type\n * @returns\n */\n// eslint-disable-next-line complexity\nfunction parseASCIINumber(n: string, type: string): number {\n  switch (type) {\n    case 'char':\n    case 'uchar':\n    case 'short':\n    case 'ushort':\n    case 'int':\n    case 'uint':\n    case 'int8':\n    case 'uint8':\n    case 'int16':\n    case 'uint16':\n    case 'int32':\n    case 'uint32':\n      return parseInt(n, 10);\n\n    case 'float':\n    case 'double':\n    case 'float32':\n    case 'float64':\n      return parseFloat(n);\n\n    default:\n      throw new Error(type);\n  }\n}\n\n/**\n * @param properties\n * @param line\n * @returns ASCII element\n */\nfunction parsePLYElement(properties: any[], line: string) {\n  const values: any = line.split(/\\s+/);\n\n  const element = {};\n\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      const list: any = [];\n      const n = parseASCIINumber(values.shift(), properties[i].countType);\n\n      for (let j = 0; j < n; j++) {\n        list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n      }\n\n      element[properties[i].name] = list;\n    } else {\n      element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n    }\n  }\n\n  return element;\n}\n\n/**\n * @param data\n * @param header\n * @returns [attributes]\n */\nfunction parseASCII(data: any, header: PLYHeader): PLYAttributes {\n  // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n\n  const attributes = getPLYAttributes(header);\n\n  let result: RegExpExecArray | null;\n\n  const patternBody = /end_header\\s([\\s\\S]*)$/;\n  let body = '';\n  if ((result = patternBody.exec(data)) !== null) {\n    body = result[1];\n  }\n\n  const lines = body.split('\\n');\n  let currentElement = 0;\n  let currentElementCount = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    let line = lines[i];\n    line = line.trim();\n\n    if (line !== '') {\n      if (currentElementCount >= header.elements[currentElement].count) {\n        currentElement++;\n        currentElementCount = 0;\n      }\n\n      const element = parsePLYElement(header.elements[currentElement].properties, line);\n      handleElement(attributes, header.elements[currentElement].name, element);\n      currentElementCount++;\n    }\n  }\n\n  return attributes;\n}\n\n/**\n * @param buffer\n * @param elementName\n * @param element\n */\n// eslint-disable-next-line complexity\nfunction handleElement(\n  buffer: {[index: string]: number[]},\n  elementName: string,\n  element: any = {}\n) {\n  if (elementName === 'vertex') {\n    for (const propertyName of Object.keys(element)) {\n      switch (propertyName) {\n        case 'x':\n          buffer.vertices.push(element.x, element.y, element.z);\n          break;\n        case 'y':\n        case 'z':\n          break;\n\n        case 'nx':\n          if ('nx' in element && 'ny' in element && 'nz' in element) {\n            buffer.normals.push(element.nx, element.ny, element.nz);\n          }\n          break;\n        case 'ny':\n        case 'nz':\n          break;\n\n        case 's':\n          if ('s' in element && 't' in element) {\n            buffer.uvs.push(element.s, element.t);\n          }\n          break;\n        case 't':\n          break;\n\n        case 'red':\n          if ('red' in element && 'green' in element && 'blue' in element) {\n            buffer.colors.push(element.red, element.green, element.blue);\n          }\n          break;\n        case 'green':\n        case 'blue':\n          break;\n\n        default:\n          buffer[propertyName].push(element[propertyName]);\n      }\n    }\n  } else if (elementName === 'face') {\n    const vertexIndices = element.vertex_indices || element.vertex_index; // issue #9338\n\n    if (vertexIndices.length === 3) {\n      buffer.indices.push(vertexIndices[0], vertexIndices[1], vertexIndices[2]);\n    } else if (vertexIndices.length === 4) {\n      buffer.indices.push(vertexIndices[0], vertexIndices[1], vertexIndices[3]);\n      buffer.indices.push(vertexIndices[1], vertexIndices[2], vertexIndices[3]);\n    }\n  }\n}\n\n/**\n * Reads binary data\n * @param dataview\n * @param at\n * @param type\n * @param littleEndian\n * @returns [number, number]\n */\n// eslint-disable-next-line complexity\nfunction binaryRead(dataview: DataView, at: number, type: any, littleEndian: boolean): number[] {\n  switch (type) {\n    // corespondences for non-specific length types here match rply:\n    case 'int8':\n    case 'char':\n      return [dataview.getInt8(at), 1];\n    case 'uint8':\n    case 'uchar':\n      return [dataview.getUint8(at), 1];\n    case 'int16':\n    case 'short':\n      return [dataview.getInt16(at, littleEndian), 2];\n    case 'uint16':\n    case 'ushort':\n      return [dataview.getUint16(at, littleEndian), 2];\n    case 'int32':\n    case 'int':\n      return [dataview.getInt32(at, littleEndian), 4];\n    case 'uint32':\n    case 'uint':\n      return [dataview.getUint32(at, littleEndian), 4];\n    case 'float32':\n    case 'float':\n      return [dataview.getFloat32(at, littleEndian), 4];\n    case 'float64':\n    case 'double':\n      return [dataview.getFloat64(at, littleEndian), 8];\n\n    default:\n      throw new Error(type);\n  }\n}\n\n/**\n * Reads binary data\n * @param dataview\n * @param at\n * @param properties\n * @param littleEndian\n * @returns [object, number]\n */\nfunction binaryReadElement(\n  dataview: DataView,\n  at: number,\n  properties: {[index: string]: any},\n  littleEndian: boolean\n): {}[] {\n  const element = {};\n  let result: number[];\n  let read = 0;\n\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      const list = [];\n\n      result = binaryRead(dataview, at + read, properties[i].countType, littleEndian);\n      const n = result[0];\n      read += result[1];\n\n      for (let j = 0; j < n; j++) {\n        result = binaryRead(dataview, at + read, properties[i].itemType, littleEndian);\n        // @ts-ignore\n        list.push(result[0]);\n        read += result[1];\n      }\n\n      element[properties[i].name] = list;\n    } else {\n      result = binaryRead(dataview, at + read, properties[i].type, littleEndian);\n      element[properties[i].name] = result[0];\n      read += result[1];\n    }\n  }\n\n  return [element, read];\n}\n\ntype BinaryAttributes = {\n  [index: string]: number[];\n};\n\n/**\n * Parses binary data\n * @param data\n * @param header\n * @returns [attributes] of data\n */\nfunction parseBinary(data: ArrayBuffer, header: PLYHeader): BinaryAttributes {\n  const attributes = getPLYAttributes(header);\n\n  const littleEndian = header.format === 'binary_little_endian';\n  const body = new DataView(data, header.headerLength);\n  let result: any[];\n  let loc = 0;\n\n  for (let currentElement = 0; currentElement < header.elements.length; currentElement++) {\n    const count = header.elements[currentElement].count;\n    for (let currentElementCount = 0; currentElementCount < count; currentElementCount++) {\n      result = binaryReadElement(\n        body,\n        loc,\n        header.elements[currentElement].properties,\n        littleEndian\n      );\n      loc += result[1];\n      const element = result[0];\n\n      handleElement(attributes, header.elements[currentElement].name, element);\n    }\n  }\n\n  return attributes;\n}\n"],"mappings":"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"}