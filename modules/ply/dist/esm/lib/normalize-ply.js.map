{"version":3,"file":"normalize-ply.js","names":["getMeshBoundingBox","getPLYSchema","normalizePLY","plyHeader","plyAttributes","options","attributes","getMeshAttributes","boundingBox","vertexCount","indices","length","vertices","isTriangles","mode","topology","schema","plyMesh","loader","loaderData","header","value","Uint32Array","size","accessors","attributeName","Object","keys","POSITION","Float32Array","normals","NORMAL","uvs","TEXCOORD_0","colors","COLOR_0","Uint8Array","normalized"],"sources":["../../../src/lib/normalize-ply.ts"],"sourcesContent":["import type {MeshAttributes} from '@loaders.gl/schema';\nimport {getMeshBoundingBox} from '@loaders.gl/schema';\nimport type {PLYMesh, PLYHeader, PLYAttributes, MeshHeader} from './ply-types';\nimport {getPLYSchema} from './get-ply-schema';\n\n/**\n * @param header\n * @param attributes\n * @returns data and header\n */\nexport default function normalizePLY(\n  plyHeader: MeshHeader & PLYHeader,\n  plyAttributes: PLYAttributes,\n  options?: {}\n): PLYMesh {\n  const attributes = getMeshAttributes(plyAttributes);\n  const boundingBox = getMeshBoundingBox(attributes);\n  const vertexCount = plyAttributes.indices.length || plyAttributes.vertices.length / 3;\n\n  // TODO - how to detect POINT CLOUDS vs MESHES?\n  // TODO - For Meshes, PLY quadrangles must be split?\n  const isTriangles = plyAttributes.indices && plyAttributes.indices.length > 0;\n  const mode = isTriangles ? 4 : 0; // TRIANGLES vs POINTS\n  const topology = isTriangles ? 'triangle-list' : 'point-list';\n\n  const schema = getPLYSchema(plyHeader, attributes);\n\n  const plyMesh: PLYMesh = {\n    loader: 'ply',\n    loaderData: plyHeader,\n    header: {\n      vertexCount,\n      boundingBox\n    },\n    schema,\n    attributes,\n    indices: {value: new Uint32Array(0), size: 0},\n    mode,\n    topology\n  };\n\n  if (plyAttributes.indices.length > 0) {\n    plyMesh.indices = {value: new Uint32Array(plyAttributes.indices), size: 1};\n  }\n\n  return plyMesh;\n}\n\n/**\n * @param attributes\n * @returns accessors []\n */\n// eslint-disable-next-line complexity\nfunction getMeshAttributes(attributes: PLYAttributes): MeshAttributes {\n  const accessors: MeshAttributes = {};\n\n  for (const attributeName of Object.keys(attributes)) {\n    switch (attributeName) {\n      case 'vertices':\n        if (attributes.vertices.length > 0) {\n          accessors.POSITION = {value: new Float32Array(attributes.vertices), size: 3};\n        }\n        break;\n\n      // optional attributes data\n      case 'normals':\n        if (attributes.normals.length > 0) {\n          accessors.NORMAL = {value: new Float32Array(attributes.normals), size: 3};\n        }\n        break;\n\n      case 'uvs':\n        if (attributes.uvs.length > 0) {\n          accessors.TEXCOORD_0 = {value: new Float32Array(attributes.uvs), size: 2};\n        }\n        break;\n\n      case 'colors':\n        if (attributes.colors.length > 0) {\n          // TODO - normalized shoud be based on `uchar` flag in source data?\n          accessors.COLOR_0 = {value: new Uint8Array(attributes.colors), size: 3, normalized: true};\n        }\n        break;\n\n      case 'indices':\n        break;\n\n      default:\n        if (attributes[attributeName].length > 0) {\n          accessors[attributeName] = {value: new Float32Array(attributes[attributeName]), size: 1};\n        }\n        break;\n    }\n  }\n  return accessors;\n}\n"],"mappings":"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"}