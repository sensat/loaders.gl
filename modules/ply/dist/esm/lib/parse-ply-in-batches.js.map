{"version":3,"file":"parse-ply-in-batches.js","names":["makeLineIterator","makeTextDecoderIterator","forEach","normalizePLY","currentElement","parsePLYInBatches","iterator","options","lineIterator","header","parsePLYHeader","attributes","format","parseASCII","Error","comments","elements","line","trim","lineValues","split","lineType","shift","join","version","push","name","count","parseInt","properties","property","makePLYElementProperty","propertyNameMapping","console","log","propertyValues","type","countType","itemType","indices","vertices","normals","uvs","colors","currentElementCount","element","parsePLYElement","handleElement","parseASCIINumber","n","parseFloat","values","i","length","list","j","buffer","elementName","arguments","undefined","x","y","z","nx","ny","nz","s","t","red","green","blue","vertexIndices","vertex_indices","vertex_index"],"sources":["../../../src/lib/parse-ply-in-batches.ts"],"sourcesContent":["// PLY Loader, adapted from THREE.js (MIT license)\n//\n// Attributions per original THREE.js source file:\n//\n// @author Wei Meng / http://about.me/menway\n//\n// Description: A loader for PLY ASCII files (known as the Polygon File Format\n// or the Stanford Triangle Format).\n//\n// Limitations: ASCII decoding assumes file is UTF-8.\n//\n// If the PLY file uses non standard property names, they can be mapped while\n// loading. For example, the following maps the properties\n// “diffuse_(red|green|blue)” in the file to standard color names.\n//\n// parsePLY(data, {\n//   propertyNameMapping: {\n//     diffuse_red: 'red',\n//     diffuse_green: 'green',\n//     diffuse_blue: 'blue'\n//   }\n// });\n\nimport {makeLineIterator, makeTextDecoderIterator, forEach} from '@loaders.gl/loader-utils';\nimport normalizePLY from './normalize-ply';\nimport {PLYMesh, PLYHeader, PLYElement, PLYProperty, PLYAttributes} from './ply-types';\n\nlet currentElement: PLYElement;\n\n/**\n * PARSER\n * @param iterator\n * @param options\n */\nexport async function* parsePLYInBatches(\n  iterator: AsyncIterable<ArrayBuffer> | Iterable<ArrayBuffer>,\n  options: any\n): AsyncIterable<PLYMesh> {\n  const lineIterator = makeLineIterator(makeTextDecoderIterator(iterator));\n  const header = await parsePLYHeader(lineIterator, options);\n\n  let attributes: PLYAttributes;\n  switch (header.format) {\n    case 'ascii':\n      attributes = await parseASCII(lineIterator, header);\n      break;\n    default:\n      throw new Error('Binary PLY can not yet be parsed in streaming mode');\n    // attributes = await parseBinary(lineIterator, header);\n  }\n\n  yield normalizePLY(header, attributes, options);\n}\n\n/**\n * Parses header\n * @param lineIterator\n * @param options\n * @returns\n */\nasync function parsePLYHeader(\n  lineIterator: AsyncIterable<string> | Iterable<string>,\n  options: {[key: string]: any}\n): Promise<PLYHeader> {\n  const header: PLYHeader = {\n    comments: [],\n    elements: []\n    // headerLength\n  };\n\n  // Note: forEach does not reset iterator if exiting loop prematurely\n  // so that iteration can continue in a second loop\n  await forEach(lineIterator, (line: string) => {\n    line = line.trim();\n\n    // End of header\n    if (line === 'end_header') {\n      return true; // Returning true cancels `forEach`\n    }\n\n    // Ignore empty lines\n    if (line === '') {\n      // eslint-disable-next-line\n      return false; // Returning false does not cancel `forEach`\n    }\n\n    const lineValues = line.split(/\\s+/);\n    const lineType = lineValues.shift();\n    line = lineValues.join(' ');\n\n    switch (lineType) {\n      case 'ply':\n        // First line magic characters, ignore\n        break;\n\n      case 'format':\n        header.format = lineValues[0];\n        header.version = lineValues[1];\n        break;\n\n      case 'comment':\n        header.comments.push(line);\n        break;\n\n      case 'element':\n        if (currentElement) {\n          header.elements.push(currentElement);\n        }\n\n        currentElement = {\n          name: lineValues[0],\n          count: parseInt(lineValues[1], 10),\n          properties: []\n        };\n        break;\n\n      case 'property':\n        const property = makePLYElementProperty(lineValues, options.propertyNameMapping);\n        currentElement.properties.push(property);\n        break;\n\n      default:\n        // eslint-disable-next-line\n        console.log('unhandled', lineType, lineValues);\n    }\n\n    return false;\n  });\n\n  if (currentElement) {\n    header.elements.push(currentElement);\n  }\n\n  return header;\n}\n\nfunction makePLYElementProperty(propertyValues: string[], propertyNameMapping: []): PLYProperty {\n  const type = propertyValues[0];\n  switch (type) {\n    case 'list':\n      return {\n        type,\n        name: propertyValues[3],\n        countType: propertyValues[1],\n        itemType: propertyValues[2]\n      };\n    default:\n      return {\n        type,\n        name: propertyValues[1]\n      };\n  }\n}\n\n// ASCII PARSING\n/**\n * @param lineIterator\n * @param header\n * @returns\n */\nasync function parseASCII(lineIterator: AsyncIterable<string>, header: PLYHeader) {\n  // PLY ascii format specification, as per http://en.wikipedia.org/wiki/PLY_(file_format)\n  const attributes: PLYAttributes = {\n    indices: [],\n    vertices: [],\n    normals: [],\n    uvs: [],\n    colors: []\n  };\n\n  let currentElement = 0;\n  let currentElementCount = 0;\n\n  for await (let line of lineIterator) {\n    line = line.trim();\n\n    if (line !== '') {\n      if (currentElementCount >= header.elements[currentElement].count) {\n        currentElement++;\n        currentElementCount = 0;\n      }\n\n      const element = parsePLYElement(header.elements[currentElement].properties, line);\n      handleElement(attributes, header.elements[currentElement].name, element);\n      currentElementCount++;\n    }\n  }\n\n  return attributes;\n}\n/**\n * Parses ASCII number\n * @param n\n * @param type\n * @returns ASCII number\n */\n// eslint-disable-next-line complexity\nfunction parseASCIINumber(n: string, type: string): number {\n  switch (type) {\n    case 'char':\n    case 'uchar':\n    case 'short':\n    case 'ushort':\n    case 'int':\n    case 'uint':\n    case 'int8':\n    case 'uint8':\n    case 'int16':\n    case 'uint16':\n    case 'int32':\n    case 'uint32':\n      return parseInt(n, 10);\n\n    case 'float':\n    case 'double':\n    case 'float32':\n    case 'float64':\n      return parseFloat(n);\n\n    default:\n      throw new Error(type);\n  }\n}\n/**\n * Parses ASCII element\n * @param properties\n * @param line\n * @returns element\n */\nfunction parsePLYElement(properties: any[], line: string) {\n  const values: any = line.split(/\\s+/);\n\n  const element = {};\n\n  for (let i = 0; i < properties.length; i++) {\n    if (properties[i].type === 'list') {\n      const list: any = [];\n      const n = parseASCIINumber(values.shift(), properties[i].countType);\n\n      for (let j = 0; j < n; j++) {\n        list.push(parseASCIINumber(values.shift(), properties[i].itemType));\n      }\n\n      element[properties[i].name] = list;\n    } else {\n      element[properties[i].name] = parseASCIINumber(values.shift(), properties[i].type);\n    }\n  }\n\n  return element;\n}\n/**\n * @param buffer\n * @param elementName\n * @param element\n */\n// HELPER FUNCTIONS\n// eslint-disable-next-line complexity\nfunction handleElement(\n  buffer: {[index: string]: number[]},\n  elementName: string,\n  element: any = {}\n) {\n  switch (elementName) {\n    case 'vertex':\n      buffer.vertices.push(element.x, element.y, element.z);\n      if ('nx' in element && 'ny' in element && 'nz' in element) {\n        buffer.normals.push(element.nx, element.ny, element.nz);\n      }\n      if ('s' in element && 't' in element) {\n        buffer.uvs.push(element.s, element.t);\n      }\n      if ('red' in element && 'green' in element && 'blue' in element) {\n        buffer.colors.push(element.red / 255.0, element.green / 255.0, element.blue / 255.0);\n      }\n      break;\n\n    case 'face':\n      const vertexIndices = element.vertex_indices || element.vertex_index; // issue #9338\n      if (vertexIndices.length === 3) {\n        buffer.indices.push(vertexIndices[0], vertexIndices[1], vertexIndices[2]);\n      } else if (vertexIndices.length === 4) {\n        buffer.indices.push(vertexIndices[0], vertexIndices[1], vertexIndices[3]);\n        buffer.indices.push(vertexIndices[1], vertexIndices[2], vertexIndices[3]);\n      }\n      break;\n\n    default:\n      break;\n  }\n}\n"],"mappings":"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"}