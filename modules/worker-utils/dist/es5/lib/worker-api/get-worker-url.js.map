{"version":3,"file":"get-worker-url.js","names":["_assert","require","_globals","_version","NPM_TAG","VERSION","getWorkerName","worker","warning","version","concat","name","getWorkerURL","options","arguments","length","undefined","workerOptions","id","workerFile","isBrowser","url","workerUrl","_workerType","module","versionTag","assert"],"sources":["../../../../src/lib/worker-api/get-worker-url.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {WorkerObject, WorkerOptions} from '../../types';\nimport {assert} from '../env-utils/assert';\nimport {isBrowser} from '../env-utils/globals';\nimport {VERSION as __VERSION__} from '../env-utils/version';\n\nconst NPM_TAG = 'beta'; // 'beta', or 'latest' on release-branch\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : NPM_TAG;\n\n/**\n * Gets worker object's name (for debugging in Chrome thread inspector window)\n */\nexport function getWorkerName(worker: WorkerObject): string {\n  const warning = worker.version !== VERSION ? ` (worker-utils@${VERSION})` : '';\n  return `${worker.name}@${worker.version}${warning}`;\n}\n\n/**\n * Generate a worker URL based on worker object and options\n * @returns A URL to one of the following:\n * - a published worker on unpkg CDN\n * - a local test worker\n * - a URL provided by the user in options\n */\nexport function getWorkerURL(worker: WorkerObject, options: WorkerOptions = {}): string {\n  const workerOptions = options[worker.id] || {};\n\n  const workerFile = isBrowser ? `${worker.id}-worker.js` : `${worker.id}-worker-node.js`;\n\n  let url = workerOptions.workerUrl;\n\n  // HACK: Allow for non-nested workerUrl for the CompressionWorker.\n  // For the compression worker, workerOptions is currently not nested correctly. For most loaders,\n  // you'd have options within an object, i.e. `{mvt: {coordinates: ...}}` but the CompressionWorker\n  // puts options at the top level, not within a `compression` key (its `id`). For this reason, the\n  // above `workerOptions` will always be a string (i.e. `'gzip'`) for the CompressionWorker. To not\n  // break backwards compatibility, we allow the CompressionWorker to have options at the top level.\n  if (!url && worker.id === 'compression') {\n    url = options.workerUrl;\n  }\n\n  // If URL is test, generate local loaders.gl url\n  // @ts-ignore _workerType\n  if (options._workerType === 'test') {\n    url = `modules/${worker.module}/dist/${workerFile}`;\n  }\n\n  // If url override is not provided, generate a URL to published version on npm CDN unpkg.com\n  if (!url) {\n    // GENERATE\n    let version = worker.version;\n    // On master we need to load npm alpha releases published with the `beta` tag\n    if (version === 'latest') {\n      // throw new Error('latest worker version specified');\n      version = NPM_TAG;\n    }\n    const versionTag = version ? `@${version}` : '';\n    url = `https://unpkg.com/@loaders.gl/${worker.module}${versionTag}/dist/${workerFile}`;\n  }\n\n  assert(url);\n\n  // Allow user to override location\n  return url;\n}\n"],"mappings":";;;;;;;AAGA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AACA,IAAAE,QAAA,GAAAF,OAAA;AAEA,IAAMG,OAAO,GAAG,MAAM;AACtB,IAAMC,OAAO,GAAG,sBAAkB,KAAK,WAAW,qBAAiBD,OAAO;AAKnE,SAASE,aAAaA,CAACC,MAAoB,EAAU;EAC1D,IAAMC,OAAO,GAAGD,MAAM,CAACE,OAAO,KAAKJ,OAAO,qBAAAK,MAAA,CAAqBL,OAAO,SAAM,EAAE;EAC9E,UAAAK,MAAA,CAAUH,MAAM,CAACI,IAAI,OAAAD,MAAA,CAAIH,MAAM,CAACE,OAAO,EAAAC,MAAA,CAAGF,OAAO;AACnD;AASO,SAASI,YAAYA,CAACL,MAAoB,EAAuC;EAAA,IAArCM,OAAsB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAC5E,IAAMG,aAAa,GAAGJ,OAAO,CAACN,MAAM,CAACW,EAAE,CAAC,IAAI,CAAC,CAAC;EAE9C,IAAMC,UAAU,GAAGC,kBAAS,MAAAV,MAAA,CAAMH,MAAM,CAACW,EAAE,qBAAAR,MAAA,CAAkBH,MAAM,CAACW,EAAE,oBAAiB;EAEvF,IAAIG,GAAG,GAAGJ,aAAa,CAACK,SAAS;EAQjC,IAAI,CAACD,GAAG,IAAId,MAAM,CAACW,EAAE,KAAK,aAAa,EAAE;IACvCG,GAAG,GAAGR,OAAO,CAACS,SAAS;EACzB;EAIA,IAAIT,OAAO,CAACU,WAAW,KAAK,MAAM,EAAE;IAClCF,GAAG,cAAAX,MAAA,CAAcH,MAAM,CAACiB,MAAM,YAAAd,MAAA,CAASS,UAAU,CAAE;EACrD;EAGA,IAAI,CAACE,GAAG,EAAE;IAER,IAAIZ,OAAO,GAAGF,MAAM,CAACE,OAAO;IAE5B,IAAIA,OAAO,KAAK,QAAQ,EAAE;MAExBA,OAAO,GAAGL,OAAO;IACnB;IACA,IAAMqB,UAAU,GAAGhB,OAAO,OAAAC,MAAA,CAAOD,OAAO,IAAK,EAAE;IAC/CY,GAAG,oCAAAX,MAAA,CAAoCH,MAAM,CAACiB,MAAM,EAAAd,MAAA,CAAGe,UAAU,YAAAf,MAAA,CAASS,UAAU,CAAE;EACxF;EAEA,IAAAO,cAAM,EAACL,GAAG,CAAC;EAGX,OAAOA,GAAG;AACZ"}