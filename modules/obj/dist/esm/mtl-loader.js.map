{"version":3,"file":"mtl-loader.js","names":["VERSION","MTLLoader","name","id","module","version","worker","extensions","mimeTypes","testText","text","includes","options","mtl","_typecheckMTLLoader"],"sources":["../../src/mtl-loader.ts"],"sourcesContent":["// loaders.gl, MIT license\nimport type {Loader, LoaderOptions} from '@loaders.gl/loader-utils';\nimport type {MTLMaterial, ParseMTLOptions} from './lib/parse-mtl';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\nexport type MTLLoaderOptions = LoaderOptions & {\n  mtl?: ParseMTLOptions;\n};\n\n/**\n * Loader for the MTL material format\n * Parses a Wavefront .mtl file specifying materials\n */\nexport const MTLLoader: Loader<MTLMaterial[], never, LoaderOptions> = {\n  name: 'MTL',\n  id: 'mtl',\n  module: 'mtl',\n  version: VERSION,\n  worker: true,\n  extensions: ['mtl'],\n  mimeTypes: ['text/plain'],\n  testText: (text: string): boolean => text.includes('newmtl'),\n  options: {\n    mtl: {}\n  }\n};\n\nexport const _typecheckMTLLoader: Loader = MTLLoader;\n"],"mappings":"AAMA,MAAMA,OAAO,GAAG,sBAAkB,KAAK,WAAW,qBAAiB,QAAQ;AAU3E,OAAO,MAAMC,SAAsD,GAAG;EACpEC,IAAI,EAAE,KAAK;EACXC,EAAE,EAAE,KAAK;EACTC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAEL,OAAO;EAChBM,MAAM,EAAE,IAAI;EACZC,UAAU,EAAE,CAAC,KAAK,CAAC;EACnBC,SAAS,EAAE,CAAC,YAAY,CAAC;EACzBC,QAAQ,EAAGC,IAAY,IAAcA,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC;EAC5DC,OAAO,EAAE;IACPC,GAAG,EAAE,CAAC;EACR;AACF,CAAC;AAED,OAAO,MAAMC,mBAA2B,GAAGb,SAAS"}