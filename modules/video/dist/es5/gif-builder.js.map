{"version":3,"file":"gif-builder.js","names":["_assert","require","_gifshot","_interopRequireDefault","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","GIF_BUILDER_OPTIONS","width","height","crossOrigin","progressCallback","captureProgress","completeCallback","numWorkers","sampleInterval","interval","offset","numFrames","frameDuration","waterMark","waterMarkHeight","waterMarkWidth","waterMarkXCoordinate","waterMarkYCoordinate","text","showFrameText","fontWeight","fontSize","minFontSize","resizeFont","fontFamily","fontColor","textAlign","textBaseline","textXCoordinate","textYCoordinate","webcamVideoElement","keepCameraOn","cameraStream","saveRenderingContexts","savedRenderingContexts","GIFBuilder","options","_classCallCheck2","files","gifshot","_createClass2","value","_initialize","_asyncToGenerator2","_regenerator","mark","_callee","wrap","_callee$","_context","prev","next","stop","initialize","_x","_add","_callee2","file","_callee2$","_context2","add","_x2","_build","_callee3","_callee3$","_context3","_cleanOptions","t0","images","abrupt","video","assert","Error","_createGIF","sent","build","_createGIF2","_callee4","_this","_callee4$","_context4","Promise","resolve","reject","createGIF","result","error","errorMsg","image","gifWidth","gifHeight","console","warn","get","id","name","extensions","mimeTypes","builder","exports"],"sources":["../../src/gif-builder.ts"],"sourcesContent":["// A GIFBuilder based on the gifshot module\n// @ts-nocheck\nimport {assert} from './lib/utils/assert';\nimport gifshot from './lib/gifshot/gifshot'; // TODO - load dynamically to avoid bloating\n\n// These are gifshot module options\nconst GIF_BUILDER_OPTIONS = {\n  source: 'images',\n  width: 200, // Desired width of the image\n  height: 200, // Desired height of the image\n\n  crossOrigin: 'Anonymous', // Options are 'Anonymous', 'use-credentials', or a falsy value to not set a CORS attribute.\n\n  // CALLBACKS\n  progressCallback: (captureProgress) => {}, // Callback that provides the current progress of the current image\n  completeCallback: () => {}, // Callback function that is called when the current image is completed\n\n  // QUALITY SETTINGS\n  numWorkers: 2, // how many web workers to use to process the animated GIF frames. Default is 2.\n  sampleInterval: 10, // pixels to skip when creating the palette. Default is 10. Less is better, but slower.\n  interval: 0.1, // The amount of time (in seconds) to wait between each frame capture\n  offset: null, // The amount of time (in seconds) to start capturing the GIF (only for HTML5 videos)\n  numFrames: 10, // The number of frames to use to create the animated GIF. Note: Each frame is captured every 100 milliseconds of a video and every ms for existing images\n  frameDuration: 1, // The amount of time (10 = 1s) to stay on each frame\n\n  // CSS FILTER OPTIONS\n  filter: '', // CSS filter that will be applied to the image (eg. blur(5px))\n\n  // WATERMARK OPTIONS\n  waterMark: null, // If an image is given here, it will be stamped on top of the GIF frames\n  waterMarkHeight: null, // Height of the waterMark\n  waterMarkWidth: null, // Height of the waterMark\n  waterMarkXCoordinate: 1, // The X (horizontal) Coordinate of the watermark image\n  waterMarkYCoordinate: 1, // The Y (vertical) Coordinate of the watermark image\n\n  // TEXT OPTIONS\n  text: '', // The text that covers the animated GIF\n  showFrameText: true, // If frame-specific text is supplied with the image array, you can force to not be displayed\n  fontWeight: 'normal', // The font weight of the text that covers the animated GIF\n  fontSize: '16px', // The font size of the text that covers the animated GIF\n  minFontSize: '10px', // The minimum font size of the text that covers the animated GIF\n  resizeFont: false, // Whether or not the animated GIF text will be resized to fit within the GIF container\n  fontFamily: 'sans-serif', // The font family of the text that covers the animated GIF\n  fontColor: '#ffffff', // The font color of the text that covers the animated GIF\n  textAlign: 'center', // The horizontal text alignment of the text that covers the animated GIF\n  textBaseline: 'bottom', // The vertical text alignment of the text that covers the animated GIF\n  textXCoordinate: null, // The X (horizontal) Coordinate of the text that covers the animated GIF\n  textYCoordinate: null, // The Y (vertical) Coordinate of the text that covers the animated GIF\n\n  // ADVANCED OPTIONS\n\n  // WEBCAM CAPTURE OPTIONS\n  webcamVideoElement: null, // You can pass an existing video element to use for the webcam GIF creation process,\n  keepCameraOn: false, // Whether or not you would like the user's camera to stay on after the GIF is created\n  cameraStream: null, // Expects a cameraStream Media object\n\n  // CANVAS OPTIMIZATION OPTIONS\n  saveRenderingContexts: false, // Whether or not you would like to save all of the canvas image binary data\n  savedRenderingContexts: [] // Array of canvas image data\n};\n\nexport default class GIFBuilder {\n  static get properties() {\n    return {\n      id: 'gif',\n      name: 'GIF',\n      extensions: ['gif'],\n      mimeTypes: ['image/gif'],\n      builder: GIFBuilder,\n      options: GIF_BUILDER_OPTIONS\n    };\n  }\n\n  constructor(options) {\n    this.options = {...options};\n    this.source = options.source;\n    delete options.source;\n\n    // Allow files to be added\n    this.files = [];\n\n    // Expose the gifshot module so that the full gifshot API is available to apps (Experimental)\n    this.gifshot = gifshot;\n  }\n\n  async initialize(options): Promise<void> {\n    // Expose the gifshot module so that the full gifshot API is available to apps (Experimental)\n    // this.gifshot = await loadGifshotModule(options);\n  }\n\n  async add(file): void {\n    await this.initialize();\n    this.files.push(file);\n  }\n\n  async build(): Promise<string> {\n    await this.initialize();\n    this._cleanOptions(this.options);\n\n    switch (this.source) {\n      case 'images':\n        this.options.images = this.files;\n        break;\n      case 'video':\n        this.options.video = this.files;\n        break;\n      case 'webcam':\n        assert(this.files.length === 0);\n        break;\n      default:\n        throw new Error('GIFBuilder: invalid source');\n    }\n\n    return await this._createGIF();\n  }\n\n  // PRIVATE\n\n  async _createGIF(): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.gifshot.createGIF(this.options, (result) => {\n        // callback object properties\n        // --------------------------\n        // image - Base 64 image\n        // cameraStream - The webRTC MediaStream object\n        // error - Boolean that determines if an error occurred\n        // errorCode - Helpful error label\n        // errorMsg - Helpful error message\n        // savedRenderingContexts - An array of canvas image data (will only be set if the saveRenderingContexts option was used)\n\n        if (result.error) {\n          reject(result.errorMsg);\n          return;\n        }\n\n        // image - Base 64 image\n        resolve(result.image);\n\n        // var image = obj.image,\n        // animatedImage = document.createElement('img');\n        // animatedImage.src = image;\n        // document.body.appendChild(animatedImage);\n      });\n    });\n  }\n\n  // Remove some gifshot options\n  _cleanOptions(options): void {\n    if (options.video || options.images || options.gifWidth || options.gifHeight) {\n      console.warn('GIFBuilder: ignoring options'); // eslint-disable-line\n    }\n\n    // We control these through options.source instead\n    delete options.video;\n    delete options.images;\n\n    // Use width/height props (to standardize across builders)\n    options.gifWidth = options.width;\n    options.gifHeight = options.height;\n    delete options.width;\n    delete options.height;\n  }\n}\n"],"mappings":"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"}