{"version":3,"file":"buffer-file-provider.js","names":["DataViewFileProvider","constructor","file","_defineProperty","getUint8","offset","Promise","resolve","getUint16","getUint32","slice","startOffset","endOffset","buffer","length","byteLength"],"sources":["../../../../../src/lib/parsers/parse-zip/buffer-file-provider.ts"],"sourcesContent":["import {FileProvider} from './file-provider';\n\n/**\n * Provides file data using DataView\n */\nexport class DataViewFileProvider implements FileProvider {\n  /**\n   * The DataView from which data is provided\n   */\n  private file: DataView;\n\n  constructor(file: DataView) {\n    this.file = file;\n  }\n\n  /**\n   * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  getUint8(offset: number): Promise<number> {\n    return Promise.resolve(this.file.getUint8(offset));\n  }\n\n  /**\n   * Gets an unsigned 16-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  getUint16(offset: number): Promise<number> {\n    return Promise.resolve(this.file.getUint16(offset, true));\n  }\n\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  getUint32(offset: number): Promise<number> {\n    return Promise.resolve(this.file.getUint32(offset, true));\n  }\n\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in bytes, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  slice(startOffset: number, endOffset: number): Promise<ArrayBuffer> {\n    return Promise.resolve(this.file.buffer.slice(startOffset, endOffset));\n  }\n\n  /**\n   * the length (in bytes) of the data.\n   */\n  get length() {\n    return this.file.byteLength;\n  }\n}\n"],"mappings":";AAKA,OAAO,MAAMA,oBAAoB,CAAyB;EAMxDC,WAAWA,CAACC,IAAc,EAAE;IAAAC,eAAA;IAC1B,IAAI,CAACD,IAAI,GAAGA,IAAI;EAClB;EAMAE,QAAQA,CAACC,MAAc,EAAmB;IACxC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACL,IAAI,CAACE,QAAQ,CAACC,MAAM,CAAC,CAAC;EACpD;EAMAG,SAASA,CAACH,MAAc,EAAmB;IACzC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACL,IAAI,CAACM,SAAS,CAACH,MAAM,EAAE,IAAI,CAAC,CAAC;EAC3D;EAMAI,SAASA,CAACJ,MAAc,EAAmB;IACzC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACL,IAAI,CAACO,SAAS,CAACJ,MAAM,EAAE,IAAI,CAAC,CAAC;EAC3D;EAOAK,KAAKA,CAACC,WAAmB,EAAEC,SAAiB,EAAwB;IAClE,OAAON,OAAO,CAACC,OAAO,CAAC,IAAI,CAACL,IAAI,CAACW,MAAM,CAACH,KAAK,CAACC,WAAW,EAAEC,SAAS,CAAC,CAAC;EACxE;EAKA,IAAIE,MAAMA,CAAA,EAAG;IACX,OAAO,IAAI,CAACZ,IAAI,CAACa,UAAU;EAC7B;AACF"}