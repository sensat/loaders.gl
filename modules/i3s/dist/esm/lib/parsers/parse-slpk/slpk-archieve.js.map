{"version":3,"file":"slpk-archieve.js","names":["processOnWorker","md5","CompressionWorker","parseZipLocalFileHeader","PATH_DESCRIPTIONS","test","extensions","SLPKArchive","constructor","slpkArchiveBuffer","hashFile","_defineProperty","slpkArchive","DataView","hashArray","parseHashFile","hashFileBuffer","Buffer","from","i","buffer","byteLength","offsetBuffer","slice","byteOffset","offset","getUint32","push","hash","subarray","getFile","path","mode","arguments","length","undefined","_PATH_DESCRIPTIONS$fi","find","val","data","ext","getDataByPath","concat","decompressedFile","fileWithoutCompression","getFileBytes","Error","decompressedData","compression","operation","_workerType","gzip","nameHash","fileInfo","compare","localFileHeader","compressedFile","fileDataOffset","compressedSize"],"sources":["../../../../../src/lib/parsers/parse-slpk/slpk-archieve.ts"],"sourcesContent":["import {processOnWorker} from '@loaders.gl/worker-utils';\nimport md5 from 'md5';\nimport {CompressionWorker} from '@loaders.gl/compression';\nimport {parseZipLocalFileHeader} from '../parse-zip/local-file-header';\n\n/** Element of hash array */\ntype HashElement = {\n  /**\n   * File name hash\n   */\n  hash: Buffer;\n  /**\n   * File offset in the archive\n   */\n  offset: number;\n};\n\nconst PATH_DESCRIPTIONS: {test: RegExp; extensions: string[]}[] = [\n  {\n    test: /^$/,\n    extensions: ['3dSceneLayer.json.gz']\n  },\n  {\n    test: /^nodepages\\/\\d+$/,\n    extensions: ['.json.gz']\n  },\n  {\n    test: /^nodes\\/\\d+$/,\n    extensions: ['/3dNodeIndexDocument.json.gz']\n  },\n  {\n    test: /^nodes\\/\\d+\\/textures\\/.+$/,\n    extensions: ['.jpg', '.png', '.bin.dds.gz', '.ktx']\n  },\n  {\n    test: /^nodes\\/\\d+\\/geometries\\/\\d+$/,\n    extensions: ['.bin.gz', '.draco.gz']\n  },\n  {\n    test: /^nodes\\/\\d+\\/attributes\\/f_\\d+\\/\\d+$/,\n    extensions: ['.bin.gz']\n  },\n  {\n    test: /^statistics\\/f_\\d+\\/\\d+$/,\n    extensions: ['.json.gz']\n  },\n  {\n    test: /^nodes\\/\\d+\\/shared$/,\n    extensions: ['/sharedResource.json.gz']\n  }\n];\n\n/**\n * Class for handling information about slpk file\n */\nexport class SLPKArchive {\n  slpkArchive: DataView;\n  hashArray: {hash: Buffer; offset: number}[];\n  constructor(slpkArchiveBuffer: ArrayBuffer, hashFile: ArrayBuffer) {\n    this.slpkArchive = new DataView(slpkArchiveBuffer);\n    this.hashArray = this.parseHashFile(hashFile);\n  }\n\n  /**\n   * Reads hash file from buffer and returns it in ready-to-use form\n   * @param hashFile - bufer containing hash file\n   * @returns Array containing file info\n   */\n  private parseHashFile(hashFile: ArrayBuffer): HashElement[] {\n    const hashFileBuffer = Buffer.from(hashFile);\n    const hashArray: HashElement[] = [];\n    for (let i = 0; i < hashFileBuffer.buffer.byteLength; i = i + 24) {\n      const offsetBuffer = new DataView(\n        hashFileBuffer.buffer.slice(\n          hashFileBuffer.byteOffset + i + 16,\n          hashFileBuffer.byteOffset + i + 24\n        )\n      );\n      const offset = offsetBuffer.getUint32(offsetBuffer.byteOffset, true);\n      hashArray.push({\n        hash: Buffer.from(\n          hashFileBuffer.subarray(hashFileBuffer.byteOffset + i, hashFileBuffer.byteOffset + i + 16)\n        ),\n        offset\n      });\n    }\n    return hashArray;\n  }\n\n  /**\n   * Returns file with the given path from slpk archive\n   * @param path - path inside the slpk\n   * @param mode - currently only raw mode supported\n   * @returns buffer with ready to use file\n   */\n  async getFile(path: string, mode: 'http' | 'raw' = 'raw'): Promise<Buffer> {\n    if (mode === 'http') {\n      const extensions = PATH_DESCRIPTIONS.find((val) => val.test.test(path))?.extensions;\n      if (extensions) {\n        let data: ArrayBuffer | undefined;\n        for (const ext of extensions) {\n          data = await this.getDataByPath(`${path}${ext}`);\n          if (data) {\n            break;\n          }\n        }\n        if (data) {\n          return Buffer.from(data);\n        }\n      }\n    }\n    if (mode === 'raw') {\n      const decompressedFile = await this.getDataByPath(`${path}.gz`);\n      if (decompressedFile) {\n        return Buffer.from(decompressedFile);\n      }\n      const fileWithoutCompression = this.getFileBytes(path);\n      if (fileWithoutCompression) {\n        return Buffer.from(fileWithoutCompression);\n      }\n    }\n\n    throw new Error('No such file in the archieve');\n  }\n\n  /**\n   * returning uncompressed data for paths that ends with .gz and raw data for all other paths\n   * @param path - path inside the archive\n   * @returns buffer with the file data\n   */\n  private async getDataByPath(path: string): Promise<ArrayBuffer | undefined> {\n    const data = this.getFileBytes(path);\n    if (!data) {\n      return undefined;\n    }\n    if (/\\.gz$/.test(path)) {\n      const decompressedData = await processOnWorker(CompressionWorker, data, {\n        compression: 'gzip',\n        operation: 'decompress',\n        _workerType: 'test',\n        gzip: {}\n      });\n      return decompressedData;\n    }\n    return Buffer.from(data);\n  }\n\n  /**\n   * Trying to get raw file data by adress\n   * @param path - path inside the archive\n   * @returns buffer with the raw file data\n   */\n  private getFileBytes(path: string): ArrayBuffer | undefined {\n    const nameHash = Buffer.from(md5(path), 'hex');\n    const fileInfo = this.hashArray.find((val) => Buffer.compare(val.hash, nameHash) === 0);\n    if (!fileInfo) {\n      return undefined;\n    }\n\n    const localFileHeader = parseZipLocalFileHeader(\n      this.slpkArchive.byteOffset + fileInfo?.offset,\n      this.slpkArchive\n    );\n\n    const compressedFile = this.slpkArchive.buffer.slice(\n      localFileHeader.fileDataOffset,\n      localFileHeader.fileDataOffset + localFileHeader.compressedSize\n    );\n\n    return compressedFile;\n  }\n}\n"],"mappings":"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"}