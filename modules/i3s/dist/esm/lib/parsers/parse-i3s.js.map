{"version":3,"file":"parse-i3s.js","names":["OrientedBoundingBox","Ellipsoid","load","TILE_TYPE","TILE_REFINEMENT","TILESET_TYPE","I3SNodePagesTiles","generateTileAttributeUrls","getUrlWithToken","normalizeTileData","tile","context","url","contentUrl","geometryData","concat","href","textureUrl","textureData","attributeUrls","attributeData","normalizeTileNonUrlData","isDracoGeometry","_tile$lodSelection","_tile$lodSelection2","boundingVolume","mbs","sphere","WGS84","cartographicToCartesian","slice","obb","box","center","halfSize","quaternion","fromCenterHalfSizeQuaternion","boundingSphere","getBoundingSphere","radius","lodMetricType","lodSelection","metricType","lodMetricValue","maxError","transformMatrix","transform","type","MESH","refine","REPLACE","normalizeTilesetData","tileset","options","nodePages","nodePagesTile","root","formTileFromNodePages","_options$i3s","rootNodeUrl","i3s","token","loader","loadContent","isTileHeader","isTileset","basePath","I3S"],"sources":["../../../../src/lib/parsers/parse-i3s.ts"],"sourcesContent":["import {OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {load} from '@loaders.gl/core';\nimport {TILE_TYPE, TILE_REFINEMENT, TILESET_TYPE} from '@loaders.gl/tiles';\nimport I3SNodePagesTiles from '../helpers/i3s-nodepages-tiles';\nimport {generateTileAttributeUrls, getUrlWithToken} from '../utils/url-utils';\nimport {\n  I3STilesetHeader,\n  I3STileHeader,\n  Mbs,\n  I3SMinimalNodeData,\n  Node3DIndexDocument\n} from '../../types';\nimport type {LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\n\nexport function normalizeTileData(tile : Node3DIndexDocument, context: LoaderContext): I3STileHeader {\n  const url: string = context.url || '';\n  let contentUrl: string | undefined;\n  if (tile.geometryData) {\n    contentUrl = `${url}/${tile.geometryData[0].href}`;\n  }\n\n  let textureUrl: string | undefined;\n  if (tile.textureData) {\n    textureUrl = `${url}/${tile.textureData[0].href}`;\n  }\n\n  let attributeUrls: string[] | undefined;\n  if (tile.attributeData) {\n    attributeUrls = generateTileAttributeUrls(url, tile);\n  }\n\n  return normalizeTileNonUrlData({\n    ...tile,\n    url,\n    contentUrl,\n    textureUrl,\n    attributeUrls,\n    isDracoGeometry: false\n  });\n}\n\nexport function normalizeTileNonUrlData(tile : I3SMinimalNodeData): I3STileHeader {\n  const boundingVolume: {box?: number[]; sphere?: number[]} = {};\n  let mbs: Mbs = [0, 0, 0, 1];\n  if (tile.mbs) {\n    mbs = tile.mbs;\n    boundingVolume.sphere = [\n      ...Ellipsoid.WGS84.cartographicToCartesian(tile.mbs.slice(0, 3)), // cartesian center of sphere\n      tile.mbs[3] // radius of sphere\n    ] as Mbs;\n  } else if (tile.obb) {\n    boundingVolume.box = [\n      ...Ellipsoid.WGS84.cartographicToCartesian(tile.obb.center), // cartesian center of box\n      ...tile.obb.halfSize, // halfSize\n      ...tile.obb.quaternion // quaternion\n    ];\n    const obb = new OrientedBoundingBox().fromCenterHalfSizeQuaternion(\n      boundingVolume.box.slice(0, 3),\n      tile.obb.halfSize,\n      tile.obb.quaternion\n    );\n    const boundingSphere = obb.getBoundingSphere();\n    boundingVolume.sphere = [...boundingSphere.center , boundingSphere.radius] as Mbs;\n    mbs = [...tile.obb.center, boundingSphere.radius] as Mbs;\n  }\n\n  const lodMetricType = tile.lodSelection?.[0].metricType;\n  const lodMetricValue = tile.lodSelection?.[0].maxError;\n  const transformMatrix = tile.transform;\n  const type = TILE_TYPE.MESH;\n  /**\n   * I3S specification supports only REPLACE\n   */\n  const refine = TILE_REFINEMENT.REPLACE;\n\n  return {...tile, mbs, boundingVolume, lodMetricType, lodMetricValue, transformMatrix, type, refine};\n}\n\nexport async function normalizeTilesetData(tileset : I3STilesetHeader, options : LoaderOptions, context: LoaderContext) {\n  tileset.url = context.url;\n\n  if (tileset.nodePages) {\n    tileset.nodePagesTile = new I3SNodePagesTiles(tileset, options);\n    tileset.root = tileset.nodePagesTile.formTileFromNodePages(0);\n  } else {\n    // @ts-expect-error options is not properly typed\n    const rootNodeUrl = getUrlWithToken(`${tileset.url}/nodes/root`, options.i3s?.token);\n    // eslint-disable-next-line no-use-before-define\n    tileset.root = await load(rootNodeUrl, tileset.loader, {\n      ...options,\n      i3s: {\n        // @ts-expect-error options is not properly typed\n        ...options.i3s,\n        loadContent: false, isTileHeader: true, isTileset: false}\n    });\n  }\n\n  // base path that non-absolute paths in tileset are relative to.\n  tileset.basePath = tileset.url;\n  tileset.type = TILESET_TYPE.I3S;\n\n  // populate from root node\n  tileset.lodMetricType = tileset.root.lodMetricType;\n  tileset.lodMetricValue = tileset.root.lodMetricValue;\n}\n"],"mappings":"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"}