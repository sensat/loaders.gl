{"version":3,"file":"parse-i3s-attribute.js","names":["STRING_ATTRIBUTE_TYPE","OBJECT_ID_ATTRIBUTE_TYPE","FLOAT_64_TYPE","INT_16_ATTRIBUTE_TYPE","parseI3STileAttribute","arrayBuffer","options","attributeName","attributeType","parseAttribute","parseStringsAttribute","parseShortNumberAttribute","parseFloatAttribute","parseInt16ShortNumberAttribute","countOffset","Uint32Array","Int16Array","Float64Array","stringsCountOffset","dataOffset","bytesPerStringSize","stringsArray","stringsCount","DataView","getUint32","stringSizes","stringOffset","stringByteSize","textDecoder","TextDecoder","stringAttribute","Uint8Array","push","decode","error","console","message"],"sources":["../../../../src/lib/parsers/parse-i3s-attribute.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport {TypedArray} from '@loaders.gl/schema';\n\nimport {\n  STRING_ATTRIBUTE_TYPE,\n  OBJECT_ID_ATTRIBUTE_TYPE,\n  FLOAT_64_TYPE,\n  INT_16_ATTRIBUTE_TYPE\n} from './constants';\n\ntype Attribute = string[] | TypedArray | null;\nexport type I3STileAttributes = Record<string, Attribute>;\n\n/**\n * Get particular tile and creates attribute object inside.\n * @param  arrayBuffer\n * @param {Object} options\n * @returns {Promise<object>}\n */\nexport function parseI3STileAttribute(arrayBuffer: ArrayBuffer, options): I3STileAttributes {\n  const {attributeName, attributeType} = options;\n\n  if (!attributeName) {\n    return {};\n  }\n  return {\n    [attributeName]: attributeType ? parseAttribute(attributeType, arrayBuffer) : null\n  };\n}\n\n/**\n * Parse attributes based on attribute type.\n * @param {String} attributeType\n * @param  arrayBuffer\n * @returns\n */\nfunction parseAttribute(attributeType, arrayBuffer: ArrayBuffer): Attribute {\n  switch (attributeType) {\n    case STRING_ATTRIBUTE_TYPE:\n      return parseStringsAttribute(arrayBuffer);\n    case OBJECT_ID_ATTRIBUTE_TYPE:\n      return parseShortNumberAttribute(arrayBuffer);\n    case FLOAT_64_TYPE:\n      return parseFloatAttribute(arrayBuffer);\n    case INT_16_ATTRIBUTE_TYPE:\n      return parseInt16ShortNumberAttribute(arrayBuffer);\n    default:\n      return parseShortNumberAttribute(arrayBuffer);\n  }\n}\n\n/**\n * Parse short number attribute.\n * Short Integer spec - https://github.com/Esri/i3s-spec/blob/master/docs/1.7/attributeStorageInfo.cmn.md\n * @param  arrayBuffer\n * @returns\n */\nfunction parseShortNumberAttribute(arrayBuffer: ArrayBuffer): Uint32Array {\n  const countOffset = 4;\n  return new Uint32Array(arrayBuffer, countOffset);\n}\n\n/**\n * Parse Int16 short number attribute.\n * Parsing of such data is not documented. Added to handle Building Scene Layer Tileset attributes data.\n * @param  arrayBuffer\n * @returns\n */\nfunction parseInt16ShortNumberAttribute(arrayBuffer: ArrayBuffer): Int16Array {\n  const countOffset = 4;\n  return new Int16Array(arrayBuffer, countOffset);\n}\n\n/**\n * Parse float attribute.\n * Double Spec - https://github.com/Esri/i3s-spec/blob/master/docs/1.7/attributeStorageInfo.cmn.md\n * @param  arrayBuffer\n * @returns\n */\nfunction parseFloatAttribute(arrayBuffer: ArrayBuffer): Float64Array {\n  const countOffset = 8;\n  return new Float64Array(arrayBuffer, countOffset);\n}\n\n/**\n * Parse string attribute.\n * String spec - https://github.com/Esri/i3s-spec/blob/master/docs/1.7/attributeStorageInfo.cmn.md\n * @param arrayBuffer\n * @returns list of strings\n */\nfunction parseStringsAttribute(arrayBuffer: ArrayBuffer): string[] {\n  const stringsCountOffset = 0;\n  const dataOffset = 8;\n  const bytesPerStringSize = 4;\n  const stringsArray: string[] = [];\n\n  try {\n    // Use DataView to avoid multiple of 4 error on Uint32Array constructor\n    const stringsCount = new DataView(\n      arrayBuffer,\n      stringsCountOffset,\n      bytesPerStringSize\n    ).getUint32(stringsCountOffset, true);\n    const stringSizes = new Uint32Array(arrayBuffer, dataOffset, stringsCount);\n    let stringOffset = dataOffset + stringsCount * bytesPerStringSize;\n\n    for (const stringByteSize of stringSizes) {\n      const textDecoder = new TextDecoder('utf-8');\n      const stringAttribute = new Uint8Array(arrayBuffer, stringOffset, stringByteSize);\n      stringsArray.push(textDecoder.decode(stringAttribute));\n      stringOffset += stringByteSize;\n    }\n  } catch (error) {\n    console.error('Parse string attribute error: ', (error as Error).message); // eslint-disable-line\n  }\n\n  return stringsArray;\n}\n"],"mappings":"AAIA,SACEA,qBAAqB,EACrBC,wBAAwB,EACxBC,aAAa,EACbC,qBAAqB,QAChB,aAAa;AAWpB,OAAO,SAASC,qBAAqBA,CAACC,WAAwB,EAAEC,OAAO,EAAqB;EAC1F,MAAM;IAACC,aAAa;IAAEC;EAAa,CAAC,GAAGF,OAAO;EAE9C,IAAI,CAACC,aAAa,EAAE;IAClB,OAAO,CAAC,CAAC;EACX;EACA,OAAO;IACL,CAACA,aAAa,GAAGC,aAAa,GAAGC,cAAc,CAACD,aAAa,EAAEH,WAAW,CAAC,GAAG;EAChF,CAAC;AACH;AAQA,SAASI,cAAcA,CAACD,aAAa,EAAEH,WAAwB,EAAa;EAC1E,QAAQG,aAAa;IACnB,KAAKR,qBAAqB;MACxB,OAAOU,qBAAqB,CAACL,WAAW,CAAC;IAC3C,KAAKJ,wBAAwB;MAC3B,OAAOU,yBAAyB,CAACN,WAAW,CAAC;IAC/C,KAAKH,aAAa;MAChB,OAAOU,mBAAmB,CAACP,WAAW,CAAC;IACzC,KAAKF,qBAAqB;MACxB,OAAOU,8BAA8B,CAACR,WAAW,CAAC;IACpD;MACE,OAAOM,yBAAyB,CAACN,WAAW,CAAC;EACjD;AACF;AAQA,SAASM,yBAAyBA,CAACN,WAAwB,EAAe;EACxE,MAAMS,WAAW,GAAG,CAAC;EACrB,OAAO,IAAIC,WAAW,CAACV,WAAW,EAAES,WAAW,CAAC;AAClD;AAQA,SAASD,8BAA8BA,CAACR,WAAwB,EAAc;EAC5E,MAAMS,WAAW,GAAG,CAAC;EACrB,OAAO,IAAIE,UAAU,CAACX,WAAW,EAAES,WAAW,CAAC;AACjD;AAQA,SAASF,mBAAmBA,CAACP,WAAwB,EAAgB;EACnE,MAAMS,WAAW,GAAG,CAAC;EACrB,OAAO,IAAIG,YAAY,CAACZ,WAAW,EAAES,WAAW,CAAC;AACnD;AAQA,SAASJ,qBAAqBA,CAACL,WAAwB,EAAY;EACjE,MAAMa,kBAAkB,GAAG,CAAC;EAC5B,MAAMC,UAAU,GAAG,CAAC;EACpB,MAAMC,kBAAkB,GAAG,CAAC;EAC5B,MAAMC,YAAsB,GAAG,EAAE;EAEjC,IAAI;IAEF,MAAMC,YAAY,GAAG,IAAIC,QAAQ,CAC/BlB,WAAW,EACXa,kBAAkB,EAClBE,kBACF,CAAC,CAACI,SAAS,CAACN,kBAAkB,EAAE,IAAI,CAAC;IACrC,MAAMO,WAAW,GAAG,IAAIV,WAAW,CAACV,WAAW,EAAEc,UAAU,EAAEG,YAAY,CAAC;IAC1E,IAAII,YAAY,GAAGP,UAAU,GAAGG,YAAY,GAAGF,kBAAkB;IAEjE,KAAK,MAAMO,cAAc,IAAIF,WAAW,EAAE;MACxC,MAAMG,WAAW,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;MAC5C,MAAMC,eAAe,GAAG,IAAIC,UAAU,CAAC1B,WAAW,EAAEqB,YAAY,EAAEC,cAAc,CAAC;MACjFN,YAAY,CAACW,IAAI,CAACJ,WAAW,CAACK,MAAM,CAACH,eAAe,CAAC,CAAC;MACtDJ,YAAY,IAAIC,cAAc;IAChC;EACF,CAAC,CAAC,OAAOO,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAGA,KAAK,CAAWE,OAAO,CAAC;EAC3E;EAEA,OAAOf,YAAY;AACrB"}