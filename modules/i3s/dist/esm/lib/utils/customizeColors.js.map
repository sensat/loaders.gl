{"version":3,"file":"customizeColors.js","names":["load","getAttributeValueType","I3SAttributeLoader","getUrlWithToken","customizeColors","colors","featureIds","tileOptions","tilesetOptions","options","_options$i3s","i3s","colorsByAttribute","colorizeAttributeField","fields","find","_ref","_options$i3s2","_options$i3s2$colorsB","name","attributeName","includes","type","colorizeAttributeData","loadFeatureAttributeData","objectIdField","_ref2","objectIdAttributeData","attributeValuesMap","i","length","calculateColorForAttribute","value","color","set","attributeValue","_options$i3s3","minValue","maxValue","minColor","maxColor","rate","Math","round","_ref3","_ref4","_options$i3s4","attributeUrls","attributeStorageInfo","attributeIndex","findIndex","_ref5","objectIdAttributeUrl","token","attributeType"],"sources":["../../../../src/lib/utils/customizeColors.ts"],"sourcesContent":["import type {MeshAttribute} from '@loaders.gl/schema';\nimport type {COLOR, I3STileOptions, I3STilesetOptions} from '../../types';\n\nimport {load} from '@loaders.gl/core';\nimport {getAttributeValueType, I3SAttributeLoader} from '../../i3s-attribute-loader';\nimport {I3SLoaderOptions} from '../../i3s-loader';\nimport {getUrlWithToken} from '../utils/url-utils';\n\n/**\n * Modify vertex colors array to visualize 3D objects in a attribute driven way\n * @param colors - vertex colors attribute\n * @param featureIds - feature Ids attribute\n * @param tileOptions - tile - related options\n * @param tilesetOptions - tileset-related options\n * @param options - loader options\n * @returns midified colors attribute\n */\nexport async function customizeColors(\n  colors: MeshAttribute,\n  featureIds: MeshAttribute,\n  tileOptions: I3STileOptions,\n  tilesetOptions: I3STilesetOptions,\n  options?: I3SLoaderOptions\n): Promise<MeshAttribute> {\n  if (!options?.i3s?.colorsByAttribute) {\n    return colors;\n  }\n\n  const colorizeAttributeField = tilesetOptions.fields.find(\n    ({name}) => name === options?.i3s?.colorsByAttribute?.attributeName\n  );\n  if (\n    !colorizeAttributeField ||\n    !['esriFieldTypeDouble', 'esriFieldTypeInteger', 'esriFieldTypeSmallInteger'].includes(\n      colorizeAttributeField.type\n    )\n  ) {\n    return colors;\n  }\n\n  const colorizeAttributeData = await loadFeatureAttributeData(\n    colorizeAttributeField.name,\n    tileOptions,\n    tilesetOptions,\n    options\n  );\n  if (!colorizeAttributeData) {\n    return colors;\n  }\n\n  const objectIdField = tilesetOptions.fields.find(({type}) => type === 'esriFieldTypeOID');\n  if (!objectIdField) {\n    return colors;\n  }\n\n  const objectIdAttributeData = await loadFeatureAttributeData(\n    objectIdField.name,\n    tileOptions,\n    tilesetOptions,\n    options\n  );\n  if (!objectIdAttributeData) {\n    return colors;\n  }\n\n  const attributeValuesMap: {[key: number]: COLOR} = {};\n  // @ts-expect-error\n  for (let i = 0; i < objectIdAttributeData[objectIdField.name].length; i++) {\n    // @ts-expect-error\n    attributeValuesMap[objectIdAttributeData[objectIdField.name][i]] = calculateColorForAttribute(\n      // @ts-expect-error\n      colorizeAttributeData[colorizeAttributeField.name][i] as number,\n      options\n    );\n  }\n\n  for (let i = 0; i < featureIds.value.length; i++) {\n    const color = attributeValuesMap[featureIds.value[i]];\n    if (!color) {\n      continue; // eslint-disable-line no-continue\n    }\n    colors.value.set(color, i * 4);\n  }\n\n  return colors;\n}\n\n/**\n * Calculate rgba color from the attribute value\n * @param attributeValue - value of the attribute\n * @param options - loader options\n * @returns - color array for a specific attribute value\n */\nfunction calculateColorForAttribute(attributeValue: number, options?: I3SLoaderOptions): COLOR {\n  if (!options?.i3s?.colorsByAttribute) {\n    return [255, 255, 255, 255];\n  }\n  const {minValue, maxValue, minColor, maxColor} = options.i3s.colorsByAttribute;\n  const rate = (attributeValue - minValue) / (maxValue - minValue);\n  const color: COLOR = [255, 255, 255, 255];\n  for (let i = 0; i < minColor.length; i++) {\n    color[i] = Math.round((maxColor[i] - minColor[i]) * rate + minColor[i]);\n  }\n  return color;\n}\n\n/**\n * Load feature attribute data from the ArcGIS rest service\n * @param attributeName - attribute name\n * @param tileOptions - tile-related options\n * @param tilesetOptions - tileset-related options\n * @param options - loader options\n * @returns - Array-like list of the attribute values\n */\nasync function loadFeatureAttributeData(\n  attributeName: string,\n  {attributeUrls}: I3STileOptions,\n  {attributeStorageInfo}: I3STilesetOptions,\n  options?: I3SLoaderOptions\n): Promise<{[key: string]: string[] | Uint32Array | Uint16Array | Float64Array | null} | null> {\n  const attributeIndex = attributeStorageInfo.findIndex(({name}) => attributeName === name);\n  if (attributeIndex === -1) {\n    return null;\n  }\n  const objectIdAttributeUrl = getUrlWithToken(attributeUrls[attributeIndex], options?.i3s?.token);\n  const attributeType = getAttributeValueType(attributeStorageInfo[attributeIndex]);\n  const objectIdAttributeData = await load(objectIdAttributeUrl, I3SAttributeLoader, {\n    attributeName,\n    attributeType\n  });\n\n  // @ts-expect-error TODO action engine\n  return objectIdAttributeData;\n}\n"],"mappings":"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"}