{"version":3,"file":"customize-сolors.js","names":["_core","require","_i3sAttributeLoader","_urlUtils","customizeColors","_x","_x2","_x3","_x4","_x5","_customizeColors","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","colors","featureIds","tileOptions","tilesetOptions","options","_options$i3s2","colorizeAttributeField","colorizeAttributeData","objectIdField","objectIdAttributeData","attributeValuesMap","i","_loop","_i","_ret","wrap","_callee$","_context2","prev","next","i3s","colorsByAttribute","abrupt","fields","find","_ref3","_options$i3s3","_options$i3s3$colorsB","name","attributeName","includes","type","loadFeatureAttributeData","sent","_ref4","length","calculateColorForAttribute","color","_loop$","_context","value","mode","forEach","colorItem","index","set","stop","delegateYield","t0","attributeValue","_options$i3s","_options$i3s$colorsBy","minValue","maxValue","minColor","maxColor","rate","Math","round","_x6","_x7","_x8","_x9","_loadFeatureAttributeData","_callee2","_ref","_ref2","_options$i3s4","attributeUrls","attributeStorageInfo","attributeIndex","objectIdAttributeUrl","attributeType","_callee2$","_context3","findIndex","_ref5","getUrlWithToken","token","getAttributeValueType","load","I3SAttributeLoader"],"sources":["../../../../src/lib/utils/customize-сolors.ts"],"sourcesContent":["import type {MeshAttribute} from '@loaders.gl/schema';\nimport type {COLOR, I3STileOptions, I3STilesetOptions} from '../../types';\n\nimport {load} from '@loaders.gl/core';\nimport {getAttributeValueType, I3SAttributeLoader} from '../../i3s-attribute-loader';\nimport {I3SLoaderOptions} from '../../i3s-loader';\nimport {getUrlWithToken} from './url-utils';\n\n/**\n * Modify vertex colors array to visualize 3D objects in a attribute driven way\n * @param colors - vertex colors attribute\n * @param featureIds - feature Ids attribute\n * @param tileOptions - tile - related options\n * @param tilesetOptions - tileset-related options\n * @param options - loader options\n * @returns midified colors attribute\n */\nexport async function customizeColors(\n  colors: MeshAttribute,\n  featureIds: MeshAttribute,\n  tileOptions: I3STileOptions,\n  tilesetOptions: I3STilesetOptions,\n  options?: I3SLoaderOptions\n): Promise<MeshAttribute> {\n  if (!options?.i3s?.colorsByAttribute) {\n    return colors;\n  }\n\n  const colorizeAttributeField = tilesetOptions.fields.find(\n    ({name}) => name === options?.i3s?.colorsByAttribute?.attributeName\n  );\n  if (\n    !colorizeAttributeField ||\n    !['esriFieldTypeDouble', 'esriFieldTypeInteger', 'esriFieldTypeSmallInteger'].includes(\n      colorizeAttributeField.type\n    )\n  ) {\n    return colors;\n  }\n\n  const colorizeAttributeData = await loadFeatureAttributeData(\n    colorizeAttributeField.name,\n    tileOptions,\n    tilesetOptions,\n    options\n  );\n  if (!colorizeAttributeData) {\n    return colors;\n  }\n\n  const objectIdField = tilesetOptions.fields.find(({type}) => type === 'esriFieldTypeOID');\n  if (!objectIdField) {\n    return colors;\n  }\n\n  const objectIdAttributeData = await loadFeatureAttributeData(\n    objectIdField.name,\n    tileOptions,\n    tilesetOptions,\n    options\n  );\n  if (!objectIdAttributeData) {\n    return colors;\n  }\n\n  const attributeValuesMap: {[key: number]: COLOR} = {};\n  // @ts-expect-error\n  for (let i = 0; i < objectIdAttributeData[objectIdField.name].length; i++) {\n    // @ts-expect-error\n    attributeValuesMap[objectIdAttributeData[objectIdField.name][i]] = calculateColorForAttribute(\n      // @ts-expect-error\n      colorizeAttributeData[colorizeAttributeField.name][i] as number,\n      options\n    );\n  }\n\n  for (let i = 0; i < featureIds.value.length; i++) {\n    const color = attributeValuesMap[featureIds.value[i]];\n    if (!color) {\n      continue; // eslint-disable-line no-continue\n    }\n\n    /* eslint max-statements: [\"error\", 30] */\n    /* eslint complexity: [\"error\", 12] */\n    if (options.i3s.colorsByAttribute.mode === 'multiply') {\n      // multiplying original mesh and calculated for attribute rgba colors in range 0-255\n      color.forEach((colorItem, index) => {\n        colors.value[i * 4 + index] = (colors.value[i * 4 + index] * colorItem) / 255;\n      });\n    } else {\n      colors.value.set(color, i * 4);\n    }\n  }\n\n  return colors;\n}\n\n/**\n * Calculate rgba color from the attribute value\n * @param attributeValue - value of the attribute\n * @param options - loader options\n * @returns - color array for a specific attribute value\n */\nfunction calculateColorForAttribute(attributeValue: number, options?: I3SLoaderOptions): COLOR {\n  if (!options?.i3s?.colorsByAttribute) {\n    return [255, 255, 255, 255];\n  }\n  const {minValue, maxValue, minColor, maxColor} = options.i3s.colorsByAttribute;\n  const rate = (attributeValue - minValue) / (maxValue - minValue);\n  const color: COLOR = [255, 255, 255, 255];\n  for (let i = 0; i < minColor.length; i++) {\n    color[i] = Math.round((maxColor[i] - minColor[i]) * rate + minColor[i]);\n  }\n  return color;\n}\n\n/**\n * Load feature attribute data from the ArcGIS rest service\n * @param attributeName - attribute name\n * @param tileOptions - tile-related options\n * @param tilesetOptions - tileset-related options\n * @param options - loader options\n * @returns - Array-like list of the attribute values\n */\nasync function loadFeatureAttributeData(\n  attributeName: string,\n  {attributeUrls}: I3STileOptions,\n  {attributeStorageInfo}: I3STilesetOptions,\n  options?: I3SLoaderOptions\n): Promise<{[key: string]: string[] | Uint32Array | Uint16Array | Float64Array | null} | null> {\n  const attributeIndex = attributeStorageInfo.findIndex(({name}) => attributeName === name);\n  if (attributeIndex === -1) {\n    return null;\n  }\n  const objectIdAttributeUrl = getUrlWithToken(attributeUrls[attributeIndex], options?.i3s?.token);\n  const attributeType = getAttributeValueType(attributeStorageInfo[attributeIndex]);\n  const objectIdAttributeData = await load(objectIdAttributeUrl, I3SAttributeLoader, {\n    attributeName,\n    attributeType\n  });\n\n  // @ts-expect-error TODO action engine\n  return objectIdAttributeData;\n}\n"],"mappings":"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"}