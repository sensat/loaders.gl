{"version":3,"file":"customizeColors.js","names":["_core","require","_i3sAttributeLoader","_urlUtils","customizeColors","_x","_x2","_x3","_x4","_x5","_customizeColors","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","colors","featureIds","tileOptions","tilesetOptions","options","_options$i3s2","colorizeAttributeField","colorizeAttributeData","objectIdField","objectIdAttributeData","attributeValuesMap","i","_i","color","wrap","_callee$","_context","prev","next","i3s","colorsByAttribute","abrupt","fields","find","_ref3","_options$i3s3","_options$i3s3$colorsB","name","attributeName","includes","type","loadFeatureAttributeData","sent","_ref4","length","calculateColorForAttribute","value","set","stop","attributeValue","_options$i3s","_options$i3s$colorsBy","minValue","maxValue","minColor","maxColor","rate","Math","round","_x6","_x7","_x8","_x9","_loadFeatureAttributeData","_callee2","_ref","_ref2","_options$i3s4","attributeUrls","attributeStorageInfo","attributeIndex","objectIdAttributeUrl","attributeType","_callee2$","_context2","findIndex","_ref5","getUrlWithToken","token","getAttributeValueType","load","I3SAttributeLoader"],"sources":["../../../../src/lib/utils/customizeColors.ts"],"sourcesContent":["import type {MeshAttribute} from '@loaders.gl/schema';\nimport type {COLOR, I3STileOptions, I3STilesetOptions} from '../../types';\n\nimport {load} from '@loaders.gl/core';\nimport {getAttributeValueType, I3SAttributeLoader} from '../../i3s-attribute-loader';\nimport {I3SLoaderOptions} from '../../i3s-loader';\nimport {getUrlWithToken} from '../utils/url-utils';\n\n/**\n * Modify vertex colors array to visualize 3D objects in a attribute driven way\n * @param colors - vertex colors attribute\n * @param featureIds - feature Ids attribute\n * @param tileOptions - tile - related options\n * @param tilesetOptions - tileset-related options\n * @param options - loader options\n * @returns midified colors attribute\n */\nexport async function customizeColors(\n  colors: MeshAttribute,\n  featureIds: MeshAttribute,\n  tileOptions: I3STileOptions,\n  tilesetOptions: I3STilesetOptions,\n  options?: I3SLoaderOptions\n): Promise<MeshAttribute> {\n  if (!options?.i3s?.colorsByAttribute) {\n    return colors;\n  }\n\n  const colorizeAttributeField = tilesetOptions.fields.find(\n    ({name}) => name === options?.i3s?.colorsByAttribute?.attributeName\n  );\n  if (\n    !colorizeAttributeField ||\n    !['esriFieldTypeDouble', 'esriFieldTypeInteger', 'esriFieldTypeSmallInteger'].includes(\n      colorizeAttributeField.type\n    )\n  ) {\n    return colors;\n  }\n\n  const colorizeAttributeData = await loadFeatureAttributeData(\n    colorizeAttributeField.name,\n    tileOptions,\n    tilesetOptions,\n    options\n  );\n  if (!colorizeAttributeData) {\n    return colors;\n  }\n\n  const objectIdField = tilesetOptions.fields.find(({type}) => type === 'esriFieldTypeOID');\n  if (!objectIdField) {\n    return colors;\n  }\n\n  const objectIdAttributeData = await loadFeatureAttributeData(\n    objectIdField.name,\n    tileOptions,\n    tilesetOptions,\n    options\n  );\n  if (!objectIdAttributeData) {\n    return colors;\n  }\n\n  const attributeValuesMap: {[key: number]: COLOR} = {};\n  // @ts-expect-error\n  for (let i = 0; i < objectIdAttributeData[objectIdField.name].length; i++) {\n    // @ts-expect-error\n    attributeValuesMap[objectIdAttributeData[objectIdField.name][i]] = calculateColorForAttribute(\n      // @ts-expect-error\n      colorizeAttributeData[colorizeAttributeField.name][i] as number,\n      options\n    );\n  }\n\n  for (let i = 0; i < featureIds.value.length; i++) {\n    const color = attributeValuesMap[featureIds.value[i]];\n    if (!color) {\n      continue; // eslint-disable-line no-continue\n    }\n    colors.value.set(color, i * 4);\n  }\n\n  return colors;\n}\n\n/**\n * Calculate rgba color from the attribute value\n * @param attributeValue - value of the attribute\n * @param options - loader options\n * @returns - color array for a specific attribute value\n */\nfunction calculateColorForAttribute(attributeValue: number, options?: I3SLoaderOptions): COLOR {\n  if (!options?.i3s?.colorsByAttribute) {\n    return [255, 255, 255, 255];\n  }\n  const {minValue, maxValue, minColor, maxColor} = options.i3s.colorsByAttribute;\n  const rate = (attributeValue - minValue) / (maxValue - minValue);\n  const color: COLOR = [255, 255, 255, 255];\n  for (let i = 0; i < minColor.length; i++) {\n    color[i] = Math.round((maxColor[i] - minColor[i]) * rate + minColor[i]);\n  }\n  return color;\n}\n\n/**\n * Load feature attribute data from the ArcGIS rest service\n * @param attributeName - attribute name\n * @param tileOptions - tile-related options\n * @param tilesetOptions - tileset-related options\n * @param options - loader options\n * @returns - Array-like list of the attribute values\n */\nasync function loadFeatureAttributeData(\n  attributeName: string,\n  {attributeUrls}: I3STileOptions,\n  {attributeStorageInfo}: I3STilesetOptions,\n  options?: I3SLoaderOptions\n): Promise<{[key: string]: string[] | Uint32Array | Uint16Array | Float64Array | null} | null> {\n  const attributeIndex = attributeStorageInfo.findIndex(({name}) => attributeName === name);\n  if (attributeIndex === -1) {\n    return null;\n  }\n  const objectIdAttributeUrl = getUrlWithToken(attributeUrls[attributeIndex], options?.i3s?.token);\n  const attributeType = getAttributeValueType(attributeStorageInfo[attributeIndex]);\n  const objectIdAttributeData = await load(objectIdAttributeUrl, I3SAttributeLoader, {\n    attributeName,\n    attributeType\n  });\n\n  // @ts-expect-error TODO action engine\n  return objectIdAttributeData;\n}\n"],"mappings":"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"}