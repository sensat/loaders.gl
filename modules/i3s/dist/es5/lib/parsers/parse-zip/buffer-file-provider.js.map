{"version":3,"file":"buffer-file-provider.js","names":["DataViewFileProvider","file","_classCallCheck2","default","_defineProperty2","_createClass2","key","value","getUint8","offset","Promise","resolve","getUint16","getUint32","slice","startOffset","endOffset","buffer","get","byteLength","exports"],"sources":["../../../../../src/lib/parsers/parse-zip/buffer-file-provider.ts"],"sourcesContent":["import {FileProvider} from './file-provider';\n\n/**\n * Provides file data using DataView\n */\nexport class DataViewFileProvider implements FileProvider {\n  /**\n   * The DataView from which data is provided\n   */\n  private file: DataView;\n\n  constructor(file: DataView) {\n    this.file = file;\n  }\n\n  /**\n   * Gets an unsigned 8-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  getUint8(offset: number): Promise<number> {\n    return Promise.resolve(this.file.getUint8(offset));\n  }\n\n  /**\n   * Gets an unsigned 16-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  getUint16(offset: number): Promise<number> {\n    return Promise.resolve(this.file.getUint16(offset, true));\n  }\n\n  /**\n   * Gets an unsigned 32-bit integer at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  getUint32(offset: number): Promise<number> {\n    return Promise.resolve(this.file.getUint32(offset, true));\n  }\n\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in bytes, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  slice(startOffset: number, endOffset: number): Promise<ArrayBuffer> {\n    return Promise.resolve(this.file.buffer.slice(startOffset, endOffset));\n  }\n\n  /**\n   * the length (in bytes) of the data.\n   */\n  get length() {\n    return this.file.byteLength;\n  }\n}\n"],"mappings":";;;;;;;;;;IAKaA,oBAAoB;EAM/B,SAAAA,qBAAYC,IAAc,EAAE;IAAA,IAAAC,gBAAA,CAAAC,OAAA,QAAAH,oBAAA;IAAA,IAAAI,gBAAA,CAAAD,OAAA;IAC1B,IAAI,CAACF,IAAI,GAAGA,IAAI;EAClB;EAAC,IAAAI,aAAA,CAAAF,OAAA,EAAAH,oBAAA;IAAAM,GAAA;IAAAC,KAAA,EAMD,SAAAC,SAASC,MAAc,EAAmB;MACxC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACV,IAAI,CAACO,QAAQ,CAACC,MAAM,CAAC,CAAC;IACpD;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAMD,SAAAK,UAAUH,MAAc,EAAmB;MACzC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACV,IAAI,CAACW,SAAS,CAACH,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3D;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAMD,SAAAM,UAAUJ,MAAc,EAAmB;MACzC,OAAOC,OAAO,CAACC,OAAO,CAAC,IAAI,CAACV,IAAI,CAACY,SAAS,CAACJ,MAAM,EAAE,IAAI,CAAC,CAAC;IAC3D;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAOD,SAAAO,MAAMC,WAAmB,EAAEC,SAAiB,EAAwB;MAClE,OAAON,OAAO,CAACC,OAAO,CAAC,IAAI,CAACV,IAAI,CAACgB,MAAM,CAACH,KAAK,CAACC,WAAW,EAAEC,SAAS,CAAC,CAAC;IACxE;EAAC;IAAAV,GAAA;IAAAY,GAAA,EAKD,SAAAA,IAAA,EAAa;MACX,OAAO,IAAI,CAACjB,IAAI,CAACkB,UAAU;IAC7B;EAAC;EAAA,OAAAnB,oBAAA;AAAA;AAAAoB,OAAA,CAAApB,oBAAA,GAAAA,oBAAA"}