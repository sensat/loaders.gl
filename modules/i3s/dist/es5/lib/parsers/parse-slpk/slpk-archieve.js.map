{"version":3,"file":"slpk-archieve.js","names":["_workerUtils","require","_md","_interopRequireDefault","_compression","_localFileHeader","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","PATH_DESCRIPTIONS","extensions","SLPKArchive","slpkArchiveBuffer","hashFile","_classCallCheck2","default","_defineProperty2","slpkArchive","DataView","hashArray","parseHashFile","_createClass2","key","hashFileBuffer","Buffer","buffer","byteLength","offsetBuffer","byteOffset","offset","getUint32","push","hash","subarray","_getFile","_asyncToGenerator2","_regenerator","mark","_callee","path","mode","_PATH_DESCRIPTIONS$fi","data","_iterator","_step","ext","decompressedFile","fileWithoutCompression","_args","arguments","wrap","_callee$","_context","prev","undefined","find","val","getDataByPath","concat","sent","abrupt","t0","finish","getFileBytes","Error","stop","getFile","_x","apply","_getDataByPath","_callee2","decompressedData","_callee2$","_context2","processOnWorker","CompressionWorker","compression","operation","_workerType","gzip","_x2","nameHash","md5","fileInfo","compare","localFileHeader","parseZipLocalFileHeader","compressedFile","fileDataOffset","compressedSize","exports"],"sources":["../../../../../src/lib/parsers/parse-slpk/slpk-archieve.ts"],"sourcesContent":["import {processOnWorker} from '@loaders.gl/worker-utils';\nimport md5 from 'md5';\nimport {CompressionWorker} from '@loaders.gl/compression';\nimport {parseZipLocalFileHeader} from '../parse-zip/local-file-header';\n\n/** Element of hash array */\ntype HashElement = {\n  /**\n   * File name hash\n   */\n  hash: Buffer;\n  /**\n   * File offset in the archive\n   */\n  offset: number;\n};\n\nconst PATH_DESCRIPTIONS: {test: RegExp; extensions: string[]}[] = [\n  {\n    test: /^$/,\n    extensions: ['3dSceneLayer.json.gz']\n  },\n  {\n    test: /^nodepages\\/\\d+$/,\n    extensions: ['.json.gz']\n  },\n  {\n    test: /^nodes\\/\\d+$/,\n    extensions: ['/3dNodeIndexDocument.json.gz']\n  },\n  {\n    test: /^nodes\\/\\d+\\/textures\\/.+$/,\n    extensions: ['.jpg', '.png', '.bin.dds.gz', '.ktx']\n  },\n  {\n    test: /^nodes\\/\\d+\\/geometries\\/\\d+$/,\n    extensions: ['.bin.gz', '.draco.gz']\n  },\n  {\n    test: /^nodes\\/\\d+\\/attributes\\/f_\\d+\\/\\d+$/,\n    extensions: ['.bin.gz']\n  },\n  {\n    test: /^statistics\\/f_\\d+\\/\\d+$/,\n    extensions: ['.json.gz']\n  },\n  {\n    test: /^nodes\\/\\d+\\/shared$/,\n    extensions: ['/sharedResource.json.gz']\n  }\n];\n\n/**\n * Class for handling information about slpk file\n */\nexport class SLPKArchive {\n  slpkArchive: DataView;\n  hashArray: {hash: Buffer; offset: number}[];\n  constructor(slpkArchiveBuffer: ArrayBuffer, hashFile: ArrayBuffer) {\n    this.slpkArchive = new DataView(slpkArchiveBuffer);\n    this.hashArray = this.parseHashFile(hashFile);\n  }\n\n  /**\n   * Reads hash file from buffer and returns it in ready-to-use form\n   * @param hashFile - bufer containing hash file\n   * @returns Array containing file info\n   */\n  private parseHashFile(hashFile: ArrayBuffer): HashElement[] {\n    const hashFileBuffer = Buffer.from(hashFile);\n    const hashArray: HashElement[] = [];\n    for (let i = 0; i < hashFileBuffer.buffer.byteLength; i = i + 24) {\n      const offsetBuffer = new DataView(\n        hashFileBuffer.buffer.slice(\n          hashFileBuffer.byteOffset + i + 16,\n          hashFileBuffer.byteOffset + i + 24\n        )\n      );\n      const offset = offsetBuffer.getUint32(offsetBuffer.byteOffset, true);\n      hashArray.push({\n        hash: Buffer.from(\n          hashFileBuffer.subarray(hashFileBuffer.byteOffset + i, hashFileBuffer.byteOffset + i + 16)\n        ),\n        offset\n      });\n    }\n    return hashArray;\n  }\n\n  /**\n   * Returns file with the given path from slpk archive\n   * @param path - path inside the slpk\n   * @param mode - currently only raw mode supported\n   * @returns buffer with ready to use file\n   */\n  async getFile(path: string, mode: 'http' | 'raw' = 'raw'): Promise<Buffer> {\n    if (mode === 'http') {\n      const extensions = PATH_DESCRIPTIONS.find((val) => val.test.test(path))?.extensions;\n      if (extensions) {\n        let data: ArrayBuffer | undefined;\n        for (const ext of extensions) {\n          data = await this.getDataByPath(`${path}${ext}`);\n          if (data) {\n            break;\n          }\n        }\n        if (data) {\n          return Buffer.from(data);\n        }\n      }\n    }\n    if (mode === 'raw') {\n      const decompressedFile = await this.getDataByPath(`${path}.gz`);\n      if (decompressedFile) {\n        return Buffer.from(decompressedFile);\n      }\n      const fileWithoutCompression = this.getFileBytes(path);\n      if (fileWithoutCompression) {\n        return Buffer.from(fileWithoutCompression);\n      }\n    }\n\n    throw new Error('No such file in the archieve');\n  }\n\n  /**\n   * returning uncompressed data for paths that ends with .gz and raw data for all other paths\n   * @param path - path inside the archive\n   * @returns buffer with the file data\n   */\n  private async getDataByPath(path: string): Promise<ArrayBuffer | undefined> {\n    const data = this.getFileBytes(path);\n    if (!data) {\n      return undefined;\n    }\n    if (/\\.gz$/.test(path)) {\n      const decompressedData = await processOnWorker(CompressionWorker, data, {\n        compression: 'gzip',\n        operation: 'decompress',\n        _workerType: 'test',\n        gzip: {}\n      });\n      return decompressedData;\n    }\n    return Buffer.from(data);\n  }\n\n  /**\n   * Trying to get raw file data by adress\n   * @param path - path inside the archive\n   * @returns buffer with the raw file data\n   */\n  private getFileBytes(path: string): ArrayBuffer | undefined {\n    const nameHash = Buffer.from(md5(path), 'hex');\n    const fileInfo = this.hashArray.find((val) => Buffer.compare(val.hash, nameHash) === 0);\n    if (!fileInfo) {\n      return undefined;\n    }\n\n    const localFileHeader = parseZipLocalFileHeader(\n      this.slpkArchive.byteOffset + fileInfo?.offset,\n      this.slpkArchive\n    );\n\n    const compressedFile = this.slpkArchive.buffer.slice(\n      localFileHeader.fileDataOffset,\n      localFileHeader.fileDataOffset + localFileHeader.compressedSize\n    );\n\n    return compressedFile;\n  }\n}\n"],"mappings":"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"}