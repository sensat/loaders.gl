{"version":3,"file":"parse-i3s.js","names":["_culling","require","_geospatial","_core","_tiles","_i3sNodepagesTiles","_interopRequireDefault","_urlUtils","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","normalizeTileData","tile","context","url","contentUrl","geometryData","concat","href","textureUrl","textureData","attributeUrls","attributeData","generateTileAttributeUrls","normalizeTileNonUrlData","isDracoGeometry","_tile$lodSelection","_tile$lodSelection2","boundingVolume","mbs","sphere","_toConsumableArray2","Ellipsoid","WGS84","cartographicToCartesian","slice","obb","box","center","halfSize","quaternion","OrientedBoundingBox","fromCenterHalfSizeQuaternion","boundingSphere","getBoundingSphere","radius","lodMetricType","lodSelection","metricType","lodMetricValue","maxError","transformMatrix","transform","type","TILE_TYPE","MESH","refine","TILE_REFINEMENT","REPLACE","normalizeTilesetData","_x","_x2","_x3","_normalizeTilesetData","_asyncToGenerator2","_regenerator","mark","_callee","tileset","options","_options$i3s","rootNodeUrl","wrap","_callee$","_context","prev","next","nodePages","nodePagesTile","I3SNodePagesTiles","root","formTileFromNodePages","getUrlWithToken","i3s","token","load","loader","loadContent","isTileHeader","isTileset","sent","basePath","TILESET_TYPE","I3S","stop"],"sources":["../../../../src/lib/parsers/parse-i3s.ts"],"sourcesContent":["import {OrientedBoundingBox} from '@math.gl/culling';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {load} from '@loaders.gl/core';\nimport {TILE_TYPE, TILE_REFINEMENT, TILESET_TYPE} from '@loaders.gl/tiles';\nimport I3SNodePagesTiles from '../helpers/i3s-nodepages-tiles';\nimport {generateTileAttributeUrls, getUrlWithToken} from '../utils/url-utils';\nimport {\n  I3STilesetHeader,\n  I3STileHeader,\n  Mbs,\n  I3SMinimalNodeData,\n  Node3DIndexDocument\n} from '../../types';\nimport type {LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\n\nexport function normalizeTileData(tile : Node3DIndexDocument, context: LoaderContext): I3STileHeader {\n  const url: string = context.url || '';\n  let contentUrl: string | undefined;\n  if (tile.geometryData) {\n    contentUrl = `${url}/${tile.geometryData[0].href}`;\n  }\n\n  let textureUrl: string | undefined;\n  if (tile.textureData) {\n    textureUrl = `${url}/${tile.textureData[0].href}`;\n  }\n\n  let attributeUrls: string[] | undefined;\n  if (tile.attributeData) {\n    attributeUrls = generateTileAttributeUrls(url, tile);\n  }\n\n  return normalizeTileNonUrlData({\n    ...tile,\n    url,\n    contentUrl,\n    textureUrl,\n    attributeUrls,\n    isDracoGeometry: false\n  });\n}\n\nexport function normalizeTileNonUrlData(tile : I3SMinimalNodeData): I3STileHeader {\n  const boundingVolume: {box?: number[]; sphere?: number[]} = {};\n  let mbs: Mbs = [0, 0, 0, 1];\n  if (tile.mbs) {\n    mbs = tile.mbs;\n    boundingVolume.sphere = [\n      ...Ellipsoid.WGS84.cartographicToCartesian(tile.mbs.slice(0, 3)), // cartesian center of sphere\n      tile.mbs[3] // radius of sphere\n    ] as Mbs;\n  } else if (tile.obb) {\n    boundingVolume.box = [\n      ...Ellipsoid.WGS84.cartographicToCartesian(tile.obb.center), // cartesian center of box\n      ...tile.obb.halfSize, // halfSize\n      ...tile.obb.quaternion // quaternion\n    ];\n    const obb = new OrientedBoundingBox().fromCenterHalfSizeQuaternion(\n      boundingVolume.box.slice(0, 3),\n      tile.obb.halfSize,\n      tile.obb.quaternion\n    );\n    const boundingSphere = obb.getBoundingSphere();\n    boundingVolume.sphere = [...boundingSphere.center , boundingSphere.radius] as Mbs;\n    mbs = [...tile.obb.center, boundingSphere.radius] as Mbs;\n  }\n\n  const lodMetricType = tile.lodSelection?.[0].metricType;\n  const lodMetricValue = tile.lodSelection?.[0].maxError;\n  const transformMatrix = tile.transform;\n  const type = TILE_TYPE.MESH;\n  /**\n   * I3S specification supports only REPLACE\n   */\n  const refine = TILE_REFINEMENT.REPLACE;\n\n  return {...tile, mbs, boundingVolume, lodMetricType, lodMetricValue, transformMatrix, type, refine};\n}\n\nexport async function normalizeTilesetData(tileset : I3STilesetHeader, options : LoaderOptions, context: LoaderContext) {\n  tileset.url = context.url;\n\n  if (tileset.nodePages) {\n    tileset.nodePagesTile = new I3SNodePagesTiles(tileset, options);\n    tileset.root = tileset.nodePagesTile.formTileFromNodePages(0);\n  } else {\n    // @ts-expect-error options is not properly typed\n    const rootNodeUrl = getUrlWithToken(`${tileset.url}/nodes/root`, options.i3s?.token);\n    // eslint-disable-next-line no-use-before-define\n    tileset.root = await load(rootNodeUrl, tileset.loader, {\n      ...options,\n      i3s: {\n        // @ts-expect-error options is not properly typed\n        ...options.i3s,\n        loadContent: false, isTileHeader: true, isTileset: false}\n    });\n  }\n\n  // base path that non-absolute paths in tileset are relative to.\n  tileset.basePath = tileset.url;\n  tileset.type = TILESET_TYPE.I3S;\n\n  // populate from root node\n  tileset.lodMetricType = tileset.root.lodMetricType;\n  tileset.lodMetricValue = tileset.root.lodMetricValue;\n}\n"],"mappings":"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"}