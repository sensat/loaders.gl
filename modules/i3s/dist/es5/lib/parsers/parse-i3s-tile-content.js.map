{"version":3,"file":"parse-i3s-tile-content.js","names":["_core","require","_core2","_geospatial","_images","_draco","_textures","_types","_urlUtils","_constants","_customizeColors","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","scratchVector","Vector3","getLoaderForTextureFormat","textureFormat","CompressedTextureLoader","BasisLoader","ImageLoader","I3S_ATTRIBUTE_TYPE","parseI3STileContent","_x","_x2","_x3","_x4","_x5","_parseI3STileContent","_asyncToGenerator2","_regenerator","mark","_callee","arrayBuffer","tileOptions","tilesetOptions","options","context","content","_options$i3s","url","loader","response","_arrayBuffer","_options","texture","wrap","_callee$","_context","prev","attributes","indices","featureIds","vertexCount","modelMatrix","Matrix4","coordinateSystem","byteLength","textureUrl","getUrlWithToken","i3s","token","fetch","sent","decodeTextures","textureLoaderOptions","image","type","parse","t0","load","compressed","mipmaps","width","height","data","material","makePbrMaterial","materialDefinition","parseI3SNodeGeometry","abrupt","stop","_x6","_x7","_x8","_x9","_x10","_parseI3SNodeGeometry","_callee2","_options$i3s2","contentByteLength","byteOffset","featureCount","_decompressedGeometry","decompressedGeometry","_decompressedGeometry2","POSITION","NORMAL","COLOR_0","TEXCOORD_0","featureIndex","uvRegion","_tilesetOptions$store","vertexAttributes","attributesOrder","featureAttributes","featureAttributeOrder","headers","_normalizeAttributes","normalizedVertexAttributes","offset","_normalizeAttributes2","normalizedFeatureAttributes","enuMatrix","attributeIndex","_callee2$","_context2","isDracoGeometry","DracoLoader","draco","attributeNameEntry","header","position","normal","color","uv0","id","updateAttributesMetadata","getFeatureIdsFromFeatureIndexMetadata","flattenFeatureIdsByFeatureIndices","store","defaultGeometrySchema","ordering","parseHeaders","normalizeAttributes","flattenFeatureIdsByFaceRanges","concatAttributes","COORDINATE_SYSTEM","METER_OFFSETS","parsePositions","invert","getModelMatrix","LNGLAT_OFFSETS","customizeColors","positions","normals","colors","normalizeAttribute","texCoords","uvRegions","region","loaderData","dracoAttribute","metadata","attribute","normalized","_iterator","_step","_step$value","property","TypedArrayTypeHeader","getConstructorForDataFormat","HeaderAttributeProperty","sizeOf","attributeCount","_iterator2","_step2","_vertexAttributes$att","valueType","valuesPerElement","buffer","parseUint64Values","TypedArrayType","GL_TYPE_MAP","size","elementsCount","attributeSize","values","dataView","DataView","index","left","getUint32","right","Math","pow","Uint32Array","mbs","cartographicOrigin","cartesianOrigin","Ellipsoid","WGS84","cartographicToCartesian","eastNorthUpToFixedFrame","offsetsToCartesians","vertices","undefined","Float64Array","scaleX","double","scaleY","x","y","z","subarray","_metadata$i3sScale_x","_metadata$i3sScale_y","pbrMaterial","pbrMetallicRoughness","baseColorFactor","baseColorTexture","texCoord","alphaCutoff","alphaMode","toUpperCase","emissiveFactor","convertColorFormat","setMaterialTexture","colorFactor","normalizedColor","_toConsumableArray2","emissiveTexture","metallicRoughnessTexture","normalTexture","occlusionTexture","faceRange","range","featureIdsLength","orderedFeatureIndices","startIndex","fillId","Number","endValue","prevValue","trianglesCount","endIndex","fill","featureIndices","result","Float32Array","_featureIndex$metadat","_featureIndex$metadat2","intArray"],"sources":["../../../../src/lib/parsers/parse-i3s-tile-content.ts"],"sourcesContent":["import type {TypedArray} from '@loaders.gl/schema';\nimport {load, parse} from '@loaders.gl/core';\nimport {Vector3, Matrix4} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport type {LoaderOptions, LoaderContext} from '@loaders.gl/loader-utils';\nimport {ImageLoader} from '@loaders.gl/images';\nimport {DracoLoader, DracoMesh} from '@loaders.gl/draco';\nimport {BasisLoader, CompressedTextureLoader} from '@loaders.gl/textures';\n\nimport {\n  FeatureAttribute,\n  VertexAttribute,\n  I3SMeshAttributes,\n  I3SMeshAttribute,\n  TileContentTexture,\n  HeaderAttributeProperty,\n  I3SMaterialDefinition,\n  I3STileContent,\n  I3STileOptions,\n  I3STilesetOptions\n} from '../../types';\nimport {getUrlWithToken} from '../utils/url-utils';\n\nimport {GL_TYPE_MAP, getConstructorForDataFormat, sizeOf, COORDINATE_SYSTEM} from './constants';\nimport {I3SLoaderOptions} from '../../i3s-loader';\nimport {customizeColors} from '../utils/customizeColors';\n\nconst scratchVector = new Vector3([0, 0, 0]);\n\nfunction getLoaderForTextureFormat(textureFormat?: 'jpg' | 'png' | 'ktx-etc2' | 'dds' | 'ktx2') {\n  switch (textureFormat) {\n    case 'ktx-etc2':\n    case 'dds':\n      return CompressedTextureLoader;\n    case 'ktx2':\n      return BasisLoader;\n    case 'jpg':\n    case 'png':\n    default:\n      return ImageLoader;\n  }\n}\n\nconst I3S_ATTRIBUTE_TYPE = 'i3s-attribute-type';\n\nexport async function parseI3STileContent(\n  arrayBuffer: ArrayBuffer,\n  tileOptions: I3STileOptions,\n  tilesetOptions: I3STilesetOptions,\n  options?: LoaderOptions,\n  context?: LoaderContext\n): Promise<I3STileContent> {\n  const content: I3STileContent = {\n    attributes: {},\n    indices: null,\n    featureIds: [],\n    vertexCount: 0,\n    modelMatrix: new Matrix4(),\n    coordinateSystem: 0,\n    byteLength: 0,\n    texture: null\n  };\n\n  if (tileOptions.textureUrl) {\n    // @ts-expect-error options is not properly typed\n    const url = getUrlWithToken(tileOptions.textureUrl, options?.i3s?.token);\n    const loader = getLoaderForTextureFormat(tileOptions.textureFormat);\n    const response = await fetch(url, options?.fetch as RequestInit);\n    const arrayBuffer = await response.arrayBuffer();\n\n    // @ts-expect-error options is not properly typed\n    if (options?.i3s.decodeTextures) {\n      if (loader === ImageLoader) {\n        const options = {...tileOptions.textureLoaderOptions, image: {type: 'data'}};\n        try {\n          // @ts-ignore context must be defined\n          // Image constructor is not supported in worker thread.\n          // Do parsing image data on the main thread by using context to avoid worker issues.\n          content.texture = await context.parse(arrayBuffer, options);\n        } catch (e) {\n          // context object is different between worker and node.js conversion script.\n          // To prevent error we parse data in ordinary way if it is not parsed by using context.\n          // @ts-expect-error\n          content.texture = await parse(arrayBuffer, loader, options);\n        }\n      } else if (loader === CompressedTextureLoader || loader === BasisLoader) {\n        let texture = await load(arrayBuffer, loader, tileOptions.textureLoaderOptions);\n        if (loader === BasisLoader) {\n          // @ts-expect-error\n          texture = texture[0];\n        }\n        content.texture = {\n          compressed: true,\n          mipmaps: false,\n          // @ts-expect-error\n          width: texture[0].width,\n          // @ts-expect-error\n          height: texture[0].height,\n          // @ts-expect-error\n          data: texture\n        };\n      }\n    } else {\n      content.texture = arrayBuffer;\n    }\n  }\n\n  content.material = makePbrMaterial(tileOptions.materialDefinition, content.texture);\n  if (content.material) {\n    content.texture = null;\n  }\n\n  return await parseI3SNodeGeometry(arrayBuffer, content, tileOptions, tilesetOptions, options);\n}\n\n/* eslint-disable max-statements */\nasync function parseI3SNodeGeometry(\n  arrayBuffer: ArrayBuffer,\n  content: I3STileContent,\n  tileOptions: I3STileOptions,\n  tilesetOptions: I3STilesetOptions,\n  options?: I3SLoaderOptions\n): Promise<I3STileContent> {\n  const contentByteLength = arrayBuffer.byteLength;\n  let attributes: I3SMeshAttributes;\n  let vertexCount: number;\n  let byteOffset: number = 0;\n  let featureCount: number = 0;\n  let indices: TypedArray | undefined;\n\n  if (tileOptions.isDracoGeometry) {\n    const decompressedGeometry: DracoMesh = await parse(arrayBuffer, DracoLoader, {\n      draco: {\n        attributeNameEntry: I3S_ATTRIBUTE_TYPE\n      }\n    });\n    // @ts-expect-error\n    vertexCount = decompressedGeometry.header.vertexCount;\n    indices = decompressedGeometry.indices?.value;\n    const {\n      POSITION,\n      NORMAL,\n      COLOR_0,\n      TEXCOORD_0,\n      ['feature-index']: featureIndex,\n      ['uv-region']: uvRegion\n    } = decompressedGeometry.attributes;\n\n    attributes = {\n      position: POSITION,\n      normal: NORMAL,\n      color: COLOR_0,\n      uv0: TEXCOORD_0,\n      uvRegion,\n      id: featureIndex\n    };\n\n    updateAttributesMetadata(attributes, decompressedGeometry);\n\n    const featureIds = getFeatureIdsFromFeatureIndexMetadata(featureIndex);\n\n    if (featureIds) {\n      flattenFeatureIdsByFeatureIndices(attributes, featureIds);\n    }\n  } else {\n    const {\n      vertexAttributes,\n      ordering: attributesOrder,\n      featureAttributes,\n      featureAttributeOrder\n    } = tilesetOptions.store.defaultGeometrySchema;\n    // First 8 bytes reserved for header (vertexCount and featureCount)\n    const headers = parseHeaders(arrayBuffer, tilesetOptions);\n    byteOffset = headers.byteOffset;\n    vertexCount = headers.vertexCount;\n    featureCount = headers.featureCount;\n    // Getting vertex attributes such as positions, normals, colors, etc...\n    const {attributes: normalizedVertexAttributes, byteOffset: offset} = normalizeAttributes(\n      arrayBuffer,\n      byteOffset,\n      vertexAttributes,\n      vertexCount,\n      attributesOrder\n    );\n\n    // Getting feature attributes such as featureIds and faceRange\n    const {attributes: normalizedFeatureAttributes} = normalizeAttributes(\n      arrayBuffer,\n      offset,\n      featureAttributes,\n      featureCount,\n      featureAttributeOrder\n    );\n\n    flattenFeatureIdsByFaceRanges(normalizedFeatureAttributes);\n    attributes = concatAttributes(normalizedVertexAttributes, normalizedFeatureAttributes);\n  }\n\n  if (\n    !options?.i3s?.coordinateSystem ||\n    options.i3s.coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS\n  ) {\n    const enuMatrix = parsePositions(attributes.position, tileOptions);\n    content.modelMatrix = enuMatrix.invert();\n    content.coordinateSystem = COORDINATE_SYSTEM.METER_OFFSETS;\n  } else {\n    content.modelMatrix = getModelMatrix(attributes.position);\n    content.coordinateSystem = COORDINATE_SYSTEM.LNGLAT_OFFSETS;\n  }\n\n  attributes.color = await customizeColors(\n    attributes.color,\n    attributes.id,\n    tileOptions,\n    tilesetOptions,\n    options\n  );\n\n  content.attributes = {\n    positions: attributes.position,\n    normals: attributes.normal,\n    colors: normalizeAttribute(attributes.color), // Normalize from UInt8\n    texCoords: attributes.uv0,\n    uvRegions: normalizeAttribute(attributes.uvRegion || attributes.region) // Normalize from UInt16\n  };\n  content.indices = indices || null;\n\n  if (attributes.id && attributes.id.value) {\n    content.featureIds = attributes.id.value;\n  }\n\n  // Remove undefined attributes\n  for (const attributeIndex in content.attributes) {\n    if (!content.attributes[attributeIndex]) {\n      delete content.attributes[attributeIndex];\n    }\n  }\n\n  content.vertexCount = vertexCount;\n  content.byteLength = contentByteLength;\n\n  return content;\n}\n\n/**\n * Update attributes with metadata from decompressed geometry.\n * @param decompressedGeometry\n * @param attributes\n */\nfunction updateAttributesMetadata(\n  attributes: I3SMeshAttributes,\n  decompressedGeometry: DracoMesh\n): void {\n  for (const key in decompressedGeometry.loaderData.attributes) {\n    const dracoAttribute = decompressedGeometry.loaderData.attributes[key];\n\n    switch (dracoAttribute.name) {\n      case 'POSITION':\n        attributes.position.metadata = dracoAttribute.metadata;\n        break;\n      case 'feature-index':\n        attributes.id.metadata = dracoAttribute.metadata;\n        break;\n      default:\n        break;\n    }\n  }\n}\n\n/**\n * Do concatenation of attribute objects.\n * Done as separate fucntion to avoid ts errors.\n * @param normalizedVertexAttributes\n * @param normalizedFeatureAttributes\n * @returns - result of attributes concatenation.\n */\nfunction concatAttributes(\n  normalizedVertexAttributes: I3SMeshAttributes,\n  normalizedFeatureAttributes: I3SMeshAttributes\n): I3SMeshAttributes {\n  return {...normalizedVertexAttributes, ...normalizedFeatureAttributes};\n}\n\n/**\n * Normalize attribute to range [0..1] . Eg. convert colors buffer from [255,255,255,255] to [1,1,1,1]\n * @param attribute - geometry attribute\n * @returns - geometry attribute in right format\n */\nfunction normalizeAttribute(attribute: I3SMeshAttribute): I3SMeshAttribute {\n  if (!attribute) {\n    return attribute;\n  }\n  attribute.normalized = true;\n  return attribute;\n}\n\nfunction parseHeaders(arrayBuffer: ArrayBuffer, options: I3STilesetOptions) {\n  let byteOffset = 0;\n  // First 8 bytes reserved for header (vertexCount and featurecount)\n  let vertexCount = 0;\n  let featureCount = 0;\n  for (const {property, type} of options.store.defaultGeometrySchema.header) {\n    const TypedArrayTypeHeader = getConstructorForDataFormat(type);\n    switch (property) {\n      case HeaderAttributeProperty.vertexCount:\n        vertexCount = new TypedArrayTypeHeader(arrayBuffer, 0, 4)[0];\n        byteOffset += sizeOf(type);\n        break;\n      case HeaderAttributeProperty.featureCount:\n        featureCount = new TypedArrayTypeHeader(arrayBuffer, 4, 4)[0];\n        byteOffset += sizeOf(type);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return {\n    vertexCount,\n    featureCount,\n    byteOffset\n  };\n}\n\n/* eslint-enable max-statements */\n\nfunction normalizeAttributes(\n  arrayBuffer: ArrayBuffer,\n  byteOffset: number,\n  vertexAttributes: VertexAttribute | FeatureAttribute,\n  attributeCount: number,\n  attributesOrder: string[]\n) {\n  const attributes: I3SMeshAttributes = {};\n\n  // the order of attributes depend on the order being added to the vertexAttributes object\n  for (const attribute of attributesOrder) {\n    if (vertexAttributes[attribute]) {\n      const {valueType, valuesPerElement}: {valueType: string; valuesPerElement: number} =\n        vertexAttributes[attribute];\n      // protect from arrayBuffer read overunns by NOT assuming node has regions always even though its declared in defaultGeometrySchema.\n      // In i3s 1.6: client is required to decide that based on ./shared resource of the node (materialDefinitions.[Mat_id].params.vertexRegions == true)\n      // In i3s 1.7 the property has been rolled into the 3d scene layer json/node pages.\n      // Code below does not account when the bytelength is actually bigger than\n      // the calculated value (b\\c the tile potentially could have mesh segmentation information).\n      // In those cases tiles without regions could fail or have garbage values.\n      if (\n        byteOffset + attributeCount * valuesPerElement * sizeOf(valueType) <=\n        arrayBuffer.byteLength\n      ) {\n        const buffer = arrayBuffer.slice(byteOffset);\n        let value: TypedArray;\n\n        if (valueType === 'UInt64') {\n          value = parseUint64Values(buffer, attributeCount * valuesPerElement, sizeOf(valueType));\n        } else {\n          const TypedArrayType = getConstructorForDataFormat(valueType);\n          value = new TypedArrayType(buffer, 0, attributeCount * valuesPerElement);\n        }\n\n        attributes[attribute] = {\n          value,\n          type: GL_TYPE_MAP[valueType],\n          size: valuesPerElement\n        };\n\n        switch (attribute) {\n          case 'color':\n            attributes.color.normalized = true;\n            break;\n          case 'position':\n          case 'region':\n          case 'normal':\n          default:\n        }\n\n        byteOffset = byteOffset + attributeCount * valuesPerElement * sizeOf(valueType);\n      } else if (attribute !== 'uv0') {\n        break;\n      }\n    }\n  }\n\n  return {attributes, byteOffset};\n}\n\n/**\n * Parse buffer to return array of uint64 values\n *\n * @param buffer\n * @param elementsCount\n * @returns 64-bit array of values until precision is lost after Number.MAX_SAFE_INTEGER\n */\nfunction parseUint64Values(\n  buffer: ArrayBuffer,\n  elementsCount: number,\n  attributeSize: number\n): Uint32Array {\n  const values: number[] = [];\n  const dataView = new DataView(buffer);\n  let offset = 0;\n\n  for (let index = 0; index < elementsCount; index++) {\n    // split 64-bit number into two 32-bit parts\n    const left = dataView.getUint32(offset, true);\n    const right = dataView.getUint32(offset + 4, true);\n    // combine the two 32-bit values\n    const value = left + 2 ** 32 * right;\n\n    values.push(value);\n    offset += attributeSize;\n  }\n\n  return new Uint32Array(values);\n}\n\nfunction parsePositions(attribute: I3SMeshAttribute, options: I3STileOptions): Matrix4 {\n  const mbs = options.mbs;\n  const value = attribute.value;\n  const metadata = attribute.metadata;\n  const enuMatrix = new Matrix4();\n  const cartographicOrigin = new Vector3(mbs[0], mbs[1], mbs[2]);\n  const cartesianOrigin = new Vector3();\n  Ellipsoid.WGS84.cartographicToCartesian(cartographicOrigin, cartesianOrigin);\n  Ellipsoid.WGS84.eastNorthUpToFixedFrame(cartesianOrigin, enuMatrix);\n  attribute.value = offsetsToCartesians(value, metadata, cartographicOrigin);\n\n  return enuMatrix;\n}\n\n/**\n * Converts position coordinates to absolute cartesian coordinates\n * @param vertices - \"position\" attribute data\n * @param metadata - When the geometry is DRACO compressed, contain position attribute's metadata\n *  https://github.com/Esri/i3s-spec/blob/master/docs/1.7/compressedAttributes.cmn.md\n * @param cartographicOrigin - Cartographic origin coordinates\n * @returns - converted \"position\" data\n */\nfunction offsetsToCartesians(\n  vertices: number[] | TypedArray,\n  metadata: any = {},\n  cartographicOrigin: Vector3\n): Float64Array {\n  const positions = new Float64Array(vertices.length);\n  const scaleX = (metadata['i3s-scale_x'] && metadata['i3s-scale_x'].double) || 1;\n  const scaleY = (metadata['i3s-scale_y'] && metadata['i3s-scale_y'].double) || 1;\n  for (let i = 0; i < positions.length; i += 3) {\n    positions[i] = vertices[i] * scaleX + cartographicOrigin.x;\n    positions[i + 1] = vertices[i + 1] * scaleY + cartographicOrigin.y;\n    positions[i + 2] = vertices[i + 2] + cartographicOrigin.z;\n  }\n\n  for (let i = 0; i < positions.length; i += 3) {\n    // @ts-ignore\n    Ellipsoid.WGS84.cartographicToCartesian(positions.subarray(i, i + 3), scratchVector);\n    positions[i] = scratchVector.x;\n    positions[i + 1] = scratchVector.y;\n    positions[i + 2] = scratchVector.z;\n  }\n\n  return positions;\n}\n\n/**\n * Get model matrix for loaded vertices\n * @param positions positions attribute\n * @returns Matrix4 - model matrix for geometry transformation\n */\nfunction getModelMatrix(positions: I3SMeshAttribute): Matrix4 {\n  const metadata = positions.metadata;\n  const scaleX: number = metadata?.['i3s-scale_x']?.double || 1;\n  const scaleY: number = metadata?.['i3s-scale_y']?.double || 1;\n  const modelMatrix = new Matrix4();\n  modelMatrix[0] = scaleX;\n  modelMatrix[5] = scaleY;\n  return modelMatrix;\n}\n\n/**\n * Makes a glTF-compatible PBR material from an I3S material definition\n * @param materialDefinition - i3s material definition\n *  https://github.com/Esri/i3s-spec/blob/master/docs/1.7/materialDefinitions.cmn.md\n * @param texture - texture image\n * @returns {object}\n */\nfunction makePbrMaterial(materialDefinition?: I3SMaterialDefinition, texture?: TileContentTexture) {\n  let pbrMaterial;\n  if (materialDefinition) {\n    pbrMaterial = {\n      ...materialDefinition,\n      pbrMetallicRoughness: materialDefinition.pbrMetallicRoughness\n        ? {...materialDefinition.pbrMetallicRoughness}\n        : {baseColorFactor: [255, 255, 255, 255]}\n    };\n  } else {\n    pbrMaterial = {\n      pbrMetallicRoughness: {}\n    };\n    if (texture) {\n      pbrMaterial.pbrMetallicRoughness.baseColorTexture = {texCoord: 0};\n    } else {\n      pbrMaterial.pbrMetallicRoughness.baseColorFactor = [255, 255, 255, 255];\n    }\n  }\n\n  // Set default 0.25 per spec https://github.com/Esri/i3s-spec/blob/master/docs/1.7/materialDefinitions.cmn.md\n  pbrMaterial.alphaCutoff = pbrMaterial.alphaCutoff || 0.25;\n\n  if (pbrMaterial.alphaMode) {\n    // I3S contain alphaMode in lowerCase\n    pbrMaterial.alphaMode = pbrMaterial.alphaMode.toUpperCase();\n  }\n\n  // Convert colors from [255,255,255,255] to [1,1,1,1]\n  if (pbrMaterial.emissiveFactor) {\n    pbrMaterial.emissiveFactor = convertColorFormat(pbrMaterial.emissiveFactor);\n  }\n  if (pbrMaterial.pbrMetallicRoughness && pbrMaterial.pbrMetallicRoughness.baseColorFactor) {\n    pbrMaterial.pbrMetallicRoughness.baseColorFactor = convertColorFormat(\n      pbrMaterial.pbrMetallicRoughness.baseColorFactor\n    );\n  }\n\n  if (texture) {\n    setMaterialTexture(pbrMaterial, texture);\n  }\n\n  return pbrMaterial;\n}\n\n/**\n * Convert color from [255,255,255,255] to [1,1,1,1]\n * @param colorFactor - color array\n * @returns - new color array\n */\nfunction convertColorFormat(colorFactor: number[]): number[] {\n  const normalizedColor = [...colorFactor];\n  for (let index = 0; index < colorFactor.length; index++) {\n    normalizedColor[index] = colorFactor[index] / 255;\n  }\n  return normalizedColor;\n}\n\n/**\n * Set texture in PBR material\n * @param {object} material - i3s material definition\n * @param image - texture image\n * @returns\n */\nfunction setMaterialTexture(material, image: TileContentTexture): void {\n  const texture = {source: {image}};\n  // I3SLoader now support loading only one texture. This elseif sequence will assign this texture to one of\n  // properties defined in materialDefinition\n  if (material.pbrMetallicRoughness && material.pbrMetallicRoughness.baseColorTexture) {\n    material.pbrMetallicRoughness.baseColorTexture = {\n      ...material.pbrMetallicRoughness.baseColorTexture,\n      texture\n    };\n  } else if (material.emissiveTexture) {\n    material.emissiveTexture = {...material.emissiveTexture, texture};\n  } else if (\n    material.pbrMetallicRoughness &&\n    material.pbrMetallicRoughness.metallicRoughnessTexture\n  ) {\n    material.pbrMetallicRoughness.metallicRoughnessTexture = {\n      ...material.pbrMetallicRoughness.metallicRoughnessTexture,\n      texture\n    };\n  } else if (material.normalTexture) {\n    material.normalTexture = {...material.normalTexture, texture};\n  } else if (material.occlusionTexture) {\n    material.occlusionTexture = {...material.occlusionTexture, texture};\n  }\n}\n\n/**\n * Flatten feature ids using face ranges\n * @param normalizedFeatureAttributes\n * @returns\n */\nfunction flattenFeatureIdsByFaceRanges(normalizedFeatureAttributes: I3SMeshAttributes): void {\n  const {id, faceRange} = normalizedFeatureAttributes;\n\n  if (!id || !faceRange) {\n    return;\n  }\n\n  const featureIds = id.value;\n  const range = faceRange.value;\n  const featureIdsLength = range[range.length - 1] + 1;\n  const orderedFeatureIndices = new Uint32Array(featureIdsLength * 3);\n\n  let featureIndex = 0;\n  let startIndex = 0;\n\n  for (let index = 1; index < range.length; index += 2) {\n    const fillId = Number(featureIds[featureIndex]);\n    const endValue = range[index];\n    const prevValue = range[index - 1];\n    const trianglesCount = endValue - prevValue + 1;\n    const endIndex = startIndex + trianglesCount * 3;\n\n    orderedFeatureIndices.fill(fillId, startIndex, endIndex);\n\n    featureIndex++;\n    startIndex = endIndex;\n  }\n\n  normalizedFeatureAttributes.id.value = orderedFeatureIndices;\n}\n\n/**\n * Flatten feature ids using featureIndices\n * @param attributes\n * @param featureIds\n * @returns\n */\nfunction flattenFeatureIdsByFeatureIndices(\n  attributes: I3SMeshAttributes,\n  featureIds: Int32Array\n): void {\n  const featureIndices = attributes.id.value;\n  const result = new Float32Array(featureIndices.length);\n\n  for (let index = 0; index < featureIndices.length; index++) {\n    result[index] = featureIds[featureIndices[index]];\n  }\n\n  attributes.id.value = result;\n}\n\n/**\n * Flatten feature ids using featureIndices\n * @param featureIndex\n * @returns\n */\nfunction getFeatureIdsFromFeatureIndexMetadata(\n  featureIndex: I3SMeshAttribute\n): Int32Array | undefined {\n  return featureIndex?.metadata?.['i3s-feature-ids']?.intArray;\n}\n"],"mappings":"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"}