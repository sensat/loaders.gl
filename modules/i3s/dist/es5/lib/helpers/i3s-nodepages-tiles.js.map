{"version":3,"file":"i3s-nodepages-tiles.js","names":["_core","require","_textures","_i3sNodePageLoader","_parseI3s","_urlUtils","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","I3SNodePagesTiles","tileset","options","_tileset$nodePages","_tileset$nodePages2","_classCallCheck2","nodesPerPage","nodePages","lodSelectionMetricType","nodesInNodePages","initSelectedFormatsForTextureDefinitions","_createClass2","_getNodeById","_asyncToGenerator2","_regenerator","mark","_callee","id","pageIndex","_this$options$i3s","nodePageUrl","nodeIndex","wrap","_callee$","_context","prev","Math","floor","pendingNodePages","getUrlWithToken","concat","url","i3s","token","status","promise","load","I3SNodePageLoader","sent","nodes","abrupt","stop","getNodeById","_x","_formTileFromNodePages","_callee2","node","children","childNodesPromises","_iterator","_step","child","childNodes","_iterator2","_step2","childNode","contentUrl","textureUrl","materialDefinition","textureFormat","attributeUrls","isDracoGeometry","_ref","isDracoGeometryResult","_this$getInformationF","textureData","nodeMaterialDefinition","lodSelection","_callee2$","_context2","Promise","all","index","obb","mesh","geometry","getContentUrl","getInformationFromMaterial","material","format","resource","attributeStorageInfo","generateTilesetAttributeUrls","attribute","getLodSelection","normalizeTileNonUrlData","textureLoaderOptions","formTileFromNodePages","_x2","meshGeometryData","result","geometryDefinition","geometryDefinitions","definition","geometryIndex","useDracoGeometry","geometryBuffers","findIndex","buffer","compressedAttributes","encoding","Boolean","metricType","maxError","sqrt","lodThreshold","PI","informationFromMaterial","_this$tileset$materia","materialDefinitions","_materialDefinition$p","_materialDefinition$p2","textureSetDefinitionIndex","pbrMetallicRoughness","baseColorTexture","textureSetDefinitionId","textureDefinitionsSelectedFormats","possibleI3sFormats","getSupportedTextureFormats","textureSetDefinitions","_iterator3","_step3","textureSetDefinition","formats","selectedFormat","_iterator4","_step4","_loop","i3sFormat","find","_ret","basis","selectSupportedBasisFormat","containerFormat","module","useCompressedTextures","supportedCompressedFormats","getSupportedGPUTextureFormats","has","exports"],"sources":["../../../../src/lib/helpers/i3s-nodepages-tiles.ts"],"sourcesContent":["import {load} from '@loaders.gl/core';\nimport {getSupportedGPUTextureFormats, selectSupportedBasisFormat} from '@loaders.gl/textures';\nimport {I3SNodePageLoader} from '../../i3s-node-page-loader';\nimport {normalizeTileNonUrlData} from '../parsers/parse-i3s';\nimport {getUrlWithToken, generateTilesetAttributeUrls} from '../utils/url-utils';\nimport type {LoaderOptions} from '@loaders.gl/loader-utils';\nimport {\n  I3STilesetHeader,\n  LodSelection,\n  NodePage,\n  NodeInPage,\n  Obb,\n  MeshMaterial,\n  I3SMaterialDefinition,\n  I3STextureFormat,\n  MeshGeometry,\n  I3STileHeader\n} from '../../types';\n\n/**\n * class I3SNodePagesTiles - loads nodePages and form i3s tiles from them\n */\nexport default class I3SNodePagesTiles {\n  tileset: I3STilesetHeader;\n  nodePages: NodePage[] = [];\n  pendingNodePages: {promise: Promise<NodePage>; status: 'Pending' | 'Done'}[] = [];\n  nodesPerPage: number;\n  options: LoaderOptions;\n  lodSelectionMetricType?: string;\n  textureDefinitionsSelectedFormats: ({format: I3STextureFormat; name: string} | null)[] = [];\n  nodesInNodePages: number;\n  private textureLoaderOptions: {[key: string]: any} = {};\n\n  /**\n   * @constructs\n   * Create a I3SNodePagesTiles instance.\n   * @param tileset - i3s tileset header ('layers/0')\n   * @param options - i3s loader options\n   */\n  constructor(tileset: I3STilesetHeader, options: LoaderOptions) {\n    this.tileset = {...tileset}; // spread the tileset to avoid circular reference\n    this.nodesPerPage = tileset.nodePages?.nodesPerPage || 64;\n    this.lodSelectionMetricType = tileset.nodePages?.lodSelectionMetricType;\n    this.options = options;\n    this.nodesInNodePages = 0;\n\n    this.initSelectedFormatsForTextureDefinitions(tileset);\n  }\n\n  /**\n   * Loads some nodePage and return a particular node from it\n   * @param id - id of node through all node pages\n   */\n  async getNodeById(id: number): Promise<NodeInPage> {\n    const pageIndex = Math.floor(id / this.nodesPerPage);\n    if (!this.nodePages[pageIndex] && !this.pendingNodePages[pageIndex]) {\n      const nodePageUrl = getUrlWithToken(\n        `${this.tileset.url}/nodepages/${pageIndex}`,\n        // @ts-expect-error this.options is not properly typed\n        this.options.i3s?.token\n      );\n      this.pendingNodePages[pageIndex] = {\n        status: 'Pending',\n        promise: load(nodePageUrl, I3SNodePageLoader, this.options)\n      };\n      this.nodePages[pageIndex] = await this.pendingNodePages[pageIndex].promise;\n      this.nodesInNodePages += this.nodePages[pageIndex].nodes.length;\n      this.pendingNodePages[pageIndex].status = 'Done';\n    }\n    if (this.pendingNodePages[pageIndex].status === 'Pending') {\n      this.nodePages[pageIndex] = await this.pendingNodePages[pageIndex].promise;\n    }\n    const nodeIndex = id % this.nodesPerPage;\n    return this.nodePages[pageIndex].nodes[nodeIndex];\n  }\n\n  /**\n   * Forms tile header using node and tileset data\n   * @param id - id of node through all node pages\n   */\n  // eslint-disable-next-line complexity, max-statements\n  async formTileFromNodePages(id: number): Promise<I3STileHeader> {\n    const node: NodeInPage = await this.getNodeById(id);\n    const children: {id: string; obb: Obb}[] = [];\n    const childNodesPromises: Promise<NodeInPage>[] = [];\n    for (const child of node.children || []) {\n      childNodesPromises.push(this.getNodeById(child));\n    }\n\n    const childNodes = await Promise.all(childNodesPromises);\n    for (const childNode of childNodes) {\n      children.push({\n        id: childNode.index.toString(),\n        obb: childNode.obb\n      });\n    }\n\n    let contentUrl: string | undefined;\n    let textureUrl: string | undefined;\n    let materialDefinition: I3SMaterialDefinition | undefined;\n    let textureFormat: I3STextureFormat = 'jpg';\n    let attributeUrls: string[] = [];\n    let isDracoGeometry: boolean = false;\n\n    if (node && node.mesh) {\n      // Get geometry resource URL and type (compressed / non-compressed)\n      const {url, isDracoGeometry: isDracoGeometryResult} = (node.mesh.geometry &&\n        this.getContentUrl(node.mesh.geometry)) || {isDracoGeometry: false};\n      contentUrl = url;\n      isDracoGeometry = isDracoGeometryResult;\n\n      const {textureData, materialDefinition: nodeMaterialDefinition} =\n        this.getInformationFromMaterial(node.mesh.material);\n      materialDefinition = nodeMaterialDefinition;\n      textureFormat = textureData.format || textureFormat;\n      if (textureData.name) {\n        textureUrl = `${this.tileset.url}/nodes/${node.mesh.material.resource}/textures/${textureData.name}`;\n      }\n\n      if (this.tileset.attributeStorageInfo) {\n        attributeUrls = generateTilesetAttributeUrls(this.tileset, node.mesh.attribute.resource);\n      }\n    }\n\n    const lodSelection = this.getLodSelection(node);\n\n    return normalizeTileNonUrlData({\n      id: id.toString(),\n      lodSelection,\n      obb: node.obb,\n      contentUrl,\n      textureUrl,\n      attributeUrls,\n      materialDefinition,\n      textureFormat,\n      textureLoaderOptions: this.textureLoaderOptions,\n      children,\n      isDracoGeometry\n    });\n  }\n\n  /**\n   * Forms url and type of geometry resource by nodepage's data and `geometryDefinitions` in the tileset\n   * @param - data about the node's mesh from the nodepage\n   * @returns -\n   *   {string} url - url to the geometry resource\n   *   {boolean} isDracoGeometry - whether the geometry resource contain DRACO compressed geometry\n   */\n  private getContentUrl(meshGeometryData: MeshGeometry) {\n    let result: {url: string; isDracoGeometry: boolean} | null = null;\n    // @ts-ignore\n    const geometryDefinition = this.tileset.geometryDefinitions[meshGeometryData.definition];\n    let geometryIndex = -1;\n    // Try to find DRACO geometryDefinition of `useDracoGeometry` option is set\n    // @ts-expect-error this.options is not properly typed\n    if (this.options.i3s && this.options.i3s.useDracoGeometry) {\n      geometryIndex = geometryDefinition.geometryBuffers.findIndex(\n        (buffer) => buffer.compressedAttributes && buffer.compressedAttributes.encoding === 'draco'\n      );\n    }\n    // If DRACO geometry is not applicable try to select non-compressed geometry\n    if (geometryIndex === -1) {\n      geometryIndex = geometryDefinition.geometryBuffers.findIndex(\n        (buffer) => !buffer.compressedAttributes\n      );\n    }\n    if (geometryIndex !== -1) {\n      const isDracoGeometry = Boolean(\n        geometryDefinition.geometryBuffers[geometryIndex].compressedAttributes\n      );\n      result = {\n        url: `${this.tileset.url}/nodes/${meshGeometryData.resource}/geometries/${geometryIndex}`,\n        isDracoGeometry\n      };\n    }\n    return result;\n  }\n\n  /**\n   * Forms 1.6 compatible LOD selection object from a nodepage's node data\n   * @param node - a node from nodepage\n   * @returns- Array of LodSelection\n   */\n  private getLodSelection(node: NodeInPage): LodSelection[] {\n    const lodSelection: LodSelection[] = [];\n    if (this.lodSelectionMetricType === 'maxScreenThresholdSQ') {\n      lodSelection.push({\n        metricType: 'maxScreenThreshold',\n        // @ts-ignore\n        maxError: Math.sqrt(node.lodThreshold / (Math.PI * 0.25))\n      });\n    }\n    lodSelection.push({\n      metricType: this.lodSelectionMetricType,\n      // @ts-ignore\n      maxError: node.lodThreshold\n    });\n    return lodSelection;\n  }\n\n  /**\n   * Returns information about texture and material from `materialDefinitions`\n   * @param material - material data from nodepage\n   * @returns - Couple {textureData, materialDefinition}\n   * {string} textureData.name - path name of the texture\n   * {string} textureData.format - format of the texture\n   * materialDefinition - PBR-like material definition from `materialDefinitions`\n   */\n  private getInformationFromMaterial(material: MeshMaterial) {\n    const informationFromMaterial: {\n      textureData: {name: string | null; format?: I3STextureFormat};\n      materialDefinition?: I3SMaterialDefinition;\n    } = {textureData: {name: null}};\n\n    if (material) {\n      const materialDefinition = this.tileset.materialDefinitions?.[material.definition];\n      if (materialDefinition) {\n        informationFromMaterial.materialDefinition = materialDefinition;\n        const textureSetDefinitionIndex =\n          materialDefinition?.pbrMetallicRoughness?.baseColorTexture?.textureSetDefinitionId;\n\n        if (typeof textureSetDefinitionIndex === 'number') {\n          informationFromMaterial.textureData =\n            this.textureDefinitionsSelectedFormats[textureSetDefinitionIndex] ||\n            informationFromMaterial.textureData;\n        }\n      }\n    }\n    return informationFromMaterial;\n  }\n\n  /**\n   * Sets preferable and supported format for each textureDefinition of the tileset\n   * @param tileset - I3S layer data\n   * @returns\n   */\n  private initSelectedFormatsForTextureDefinitions(tileset: I3STilesetHeader): void {\n    this.textureDefinitionsSelectedFormats = [];\n    const possibleI3sFormats = this.getSupportedTextureFormats();\n    const textureSetDefinitions = tileset.textureSetDefinitions || [];\n    for (const textureSetDefinition of textureSetDefinitions) {\n      const formats = (textureSetDefinition && textureSetDefinition.formats) || [];\n      let selectedFormat: {name: string; format: I3STextureFormat} | null = null;\n      for (const i3sFormat of possibleI3sFormats) {\n        const format = formats.find((value) => value.format === i3sFormat);\n        if (format) {\n          selectedFormat = format;\n          break;\n        }\n      }\n      // For I3S 1.8 need to define basis target format to decode\n      if (selectedFormat && selectedFormat.format === 'ktx2') {\n        this.textureLoaderOptions.basis = {\n          format: selectSupportedBasisFormat(),\n          containerFormat: 'ktx2',\n          module: 'encoder'\n        };\n      }\n\n      this.textureDefinitionsSelectedFormats.push(selectedFormat);\n    }\n  }\n\n  /**\n   * Returns the array of supported texture format\n   * @returns list of format strings\n   */\n  private getSupportedTextureFormats(): I3STextureFormat[] {\n    const formats: I3STextureFormat[] = [];\n    // @ts-expect-error this.options is not properly typed\n    if (!this.options.i3s || this.options.i3s.useCompressedTextures) {\n      // I3S 1.7 selection\n      const supportedCompressedFormats = getSupportedGPUTextureFormats();\n      // List of possible in i3s formats:\n      // https://github.com/Esri/i3s-spec/blob/master/docs/1.7/textureSetDefinitionFormat.cmn.md\n      if (supportedCompressedFormats.has('etc2')) {\n        formats.push('ktx-etc2');\n      }\n      if (supportedCompressedFormats.has('dxt')) {\n        formats.push('dds');\n      }\n\n      // I3S 1.8 selection\n      // ktx2 wraps basis texture which at the edge case can be decoded as uncompressed image\n      formats.push('ktx2');\n    }\n\n    formats.push('jpg');\n    formats.push('png');\n    return formats;\n  }\n}\n"],"mappings":"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"}