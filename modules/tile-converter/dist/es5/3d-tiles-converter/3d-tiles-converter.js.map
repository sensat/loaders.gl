{"version":3,"file":"3d-tiles-converter.js","names":["_path","require","_process","_interopRequireDefault","_jsonMapTransform","_core","_i3s","_tiles","_pgmLoader","_i3sObbTo3dTilesObb","_lodConversionUtils","_fileUtils","_statisticUtills","_tileset","_coordinateConverter","_dTilesAttributesWorker","_workerUtils","_constants","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","I3S","Tiles3DConverter","_classCallCheck2","options","tilesetPath","vertexCounter","conversionStartTime","geoidHeightModel","sourceTileset","attributeStorageInfo","workerSource","_createClass2","_convert","_asyncToGenerator2","_regenerator","mark","_callee","inputUrl","outputPath","tilesetName","maxDepth","egmFilePath","sourceTilesetJson","rootNode","rootTile","tileset","workerFarm","wrap","_callee$","_context","prev","isBrowser","console","log","BROWSER_ERROR_MESSAGE","abrupt","process","hrtime","load","PGMLoader","sent","loadWorkers","I3SLoader","Tileset3D","loadOptions","_nodeWorkers","reuseWorkers","i3s","coordinateSystem","COORDINATE_SYSTEM","LNGLAT_OFFSETS","decodeTextures","tilesetInitializationPromise","root","header","obb","createObbFromMbs","mbs","join","concat","removeDir","t0","boundingVolume","box","i3sObbTo3dTilesObb","geometricError","convertScreenThresholdToGeometricError","children","_addChildren","transform","tilesetTemplate","writeFile","JSON","stringify","_finishConversion","slpk","WorkerFarm","getWorkerFarm","destroy","stop","convert","_x","_convertChildNode","_callee2","parentSourceNode","parentNode","level","childNodeInfo","sourceChild","_sourceChild$header","featureAttributes","child","i3sAttributesData","b3dm","_callee2$","_context2","_loadChildNode","contentUrl","_loadTile","content","vertexCount","_loadChildAttributes","tileContent","textureFormat","transform3DTilesAttributesOnWorker","tile3dWorkerSource","uri","id","Uint8Array","unloadContent","convertChildNode","_x2","_x3","_x4","_x5","_addChildren2","_callee3","promises","_iterator","_step","_callee3$","_context3","Promise","all","_x6","_x7","_x8","_loadChildNode2","_callee4","_ref","loader","nodeUrl","_callee4$","_context4","nodePages","nodePagesTile","formTileFromNodePages","_relativeUrlToFullUrl","url","href","isTileHeader","loadContent","Tile3D","_x9","_x10","baseUrl","relativeUrl","resultArray","split","relativeUrlArray","_iterator2","_step2","folder","_loadChildAttributes2","_callee5","attributeUrls","index","attribute","attributesList","_callee5$","_context5","attributeName","attributeType","_getAttributeType","I3SAttributeLoader","_replaceNestedArrays","assign","_toConsumableArray2","_x11","_x12","attributeValues","valueType","objectIds","attributeObject","_finishConversion2","_callee6","params","filesSize","diff","conversionTime","_callee6$","_context6","calculateFilesSize","timeConverter","_x13","_loadWorkers","_callee7","tile3dAttributesWorkerUrl","sourceResponse","_callee7$","_context7","getWorkerURL","Tile3dAttributesWorker","getLoaderOptions","fetchFile","text","exports"],"sources":["../../../src/3d-tiles-converter/3d-tiles-converter.ts"],"sourcesContent":["import type {AttributeStorageInfo, FeatureAttribute, NodeReference} from '@loaders.gl/i3s';\nimport type {Tiles3DTileJSON} from '@loaders.gl/3d-tiles';\n\nimport {join} from 'path';\nimport process from 'process';\nimport transform from 'json-map-transform';\nimport {fetchFile, getLoaderOptions, load, isBrowser} from '@loaders.gl/core';\nimport {I3SLoader, I3SAttributeLoader, COORDINATE_SYSTEM} from '@loaders.gl/i3s';\nimport {Tileset3D, Tile3D} from '@loaders.gl/tiles';\nimport {Geoid} from '@math.gl/geoid';\n\nimport {PGMLoader} from '../pgm-loader';\nimport {i3sObbTo3dTilesObb} from './helpers/i3s-obb-to-3d-tiles-obb';\nimport {convertScreenThresholdToGeometricError} from '../lib/utils/lod-conversion-utils';\nimport {writeFile, removeDir} from '../lib/utils/file-utils';\nimport {calculateFilesSize, timeConverter} from '../lib/utils/statistic-utills';\nimport {TILESET as tilesetTemplate} from './json-templates/tileset';\nimport {createObbFromMbs} from '../i3s-converter/helpers/coordinate-converter';\nimport {\n  I3SAttributesData,\n  Tile3dAttributesWorker,\n  transform3DTilesAttributesOnWorker\n} from '../3d-tiles-attributes-worker';\nimport {getWorkerURL, WorkerFarm} from '@loaders.gl/worker-utils';\nimport {BROWSER_ERROR_MESSAGE} from '../constants';\n\nconst I3S = 'I3S';\n\n/**\n * Converter from i3s to 3d-tiles\n */\nexport default class Tiles3DConverter {\n  options: any;\n  tilesetPath: string;\n  vertexCounter: number;\n  conversionStartTime: [number, number];\n  geoidHeightModel: Geoid | null;\n  sourceTileset: Tileset3D | null;\n  attributeStorageInfo: AttributeStorageInfo | null;\n  workerSource: {[key: string]: string} = {};\n\n  constructor() {\n    this.options = {};\n    this.tilesetPath = '';\n    this.vertexCounter = 0;\n    this.conversionStartTime = [0, 0];\n    this.geoidHeightModel = null;\n    this.sourceTileset = null;\n    this.attributeStorageInfo = null;\n    this.workerSource = {};\n  }\n\n  /**\n   * Convert i3s format data to 3dTiles\n   * @param options\n   * @param options.inputUrl the url to read the tileset from\n   * @param options.outputPath the output filename\n   * @param options.tilesetName the output name of the tileset\n   * @param options.egmFilePath location of *.pgm file to convert heights from ellipsoidal to gravity-related format\n   * @param options.maxDepth The max tree depth of conversion\n   */\n  public async convert(options: {\n    inputUrl: string;\n    outputPath: string;\n    tilesetName: string;\n    maxDepth?: number;\n    egmFilePath: string;\n  }): Promise<any> {\n    if (isBrowser) {\n      console.log(BROWSER_ERROR_MESSAGE);\n      return BROWSER_ERROR_MESSAGE;\n    }\n    const {inputUrl, outputPath, tilesetName, maxDepth, egmFilePath} = options;\n    this.conversionStartTime = process.hrtime();\n    this.options = {maxDepth};\n\n    console.log('Loading egm file...'); // eslint-disable-line\n    this.geoidHeightModel = await load(egmFilePath, PGMLoader);\n    console.log('Loading egm file completed!'); // eslint-disable-line\n\n    await this.loadWorkers();\n\n    const sourceTilesetJson = await load(inputUrl, I3SLoader, {});\n\n    this.sourceTileset = new Tileset3D(sourceTilesetJson, {\n      loadOptions: {\n        _nodeWorkers: true,\n        reuseWorkers: true,\n        i3s: {coordinateSystem: COORDINATE_SYSTEM.LNGLAT_OFFSETS, decodeTextures: false}\n        // TODO should no longer be needed with new workers\n        // 'i3s-content-nodejs': {\n        //   workerUrl: './modules/i3s/dist/i3s-content-nodejs-worker.js'\n        // }\n      }\n    });\n\n    await this.sourceTileset.tilesetInitializationPromise;\n    const rootNode = this.sourceTileset.root!;\n    if (!rootNode.header.obb) {\n      rootNode.header.obb = createObbFromMbs(rootNode.header.mbs);\n    }\n\n    this.tilesetPath = join(`${outputPath}`, `${tilesetName}`);\n    this.attributeStorageInfo = sourceTilesetJson.attributeStorageInfo;\n    // Removing the tilesetPath needed to exclude erroneous files after conversion\n    try {\n      await removeDir(this.tilesetPath);\n    } catch (e) {\n      // do nothing\n    }\n\n    const rootTile: Tiles3DTileJSON = {\n      boundingVolume: {\n        box: i3sObbTo3dTilesObb(rootNode.header.obb, this.geoidHeightModel)\n      },\n      geometricError: convertScreenThresholdToGeometricError(rootNode),\n      children: []\n    };\n\n    await this._addChildren(rootNode, rootTile, 1);\n\n    const tileset = transform({root: rootTile}, tilesetTemplate());\n    await writeFile(this.tilesetPath, JSON.stringify(tileset), 'tileset.json');\n\n    this._finishConversion({slpk: false, outputPath, tilesetName});\n\n    // Clean up worker pools\n    const workerFarm = WorkerFarm.getWorkerFarm({});\n    workerFarm.destroy();\n  }\n\n  /**\n   * Convert particular I3S Node\n   * @param parentSourceNode the parent node tile object (@loaders.gl/tiles/Tile3D)\n   * @param parentNode object in resulting tileset\n   * @param level a current level of a tree depth\n   * @param childNodeInfo child node to convert\n   */\n  private async convertChildNode(\n    parentSourceNode: Tile3D,\n    parentNode: Tiles3DTileJSON,\n    level: number,\n    childNodeInfo: NodeReference\n  ): Promise<void> {\n    const sourceChild = await this._loadChildNode(parentSourceNode, childNodeInfo);\n    parentSourceNode.children.push(sourceChild);\n    if (sourceChild.contentUrl) {\n      await this.sourceTileset!._loadTile(sourceChild);\n      this.vertexCounter += sourceChild.content.vertexCount;\n\n      let featureAttributes: FeatureAttribute | null = null;\n      if (this.attributeStorageInfo) {\n        featureAttributes = await this._loadChildAttributes(sourceChild, this.attributeStorageInfo);\n      }\n\n      if (!sourceChild.header.obb) {\n        sourceChild.header.obb = createObbFromMbs(sourceChild.header.mbs);\n      }\n\n      const boundingVolume = {\n        box: i3sObbTo3dTilesObb(sourceChild.header.obb, this.geoidHeightModel)\n      };\n      const child: Tiles3DTileJSON = {\n        boundingVolume,\n        geometricError: convertScreenThresholdToGeometricError(sourceChild),\n        children: []\n      };\n\n      const i3sAttributesData: I3SAttributesData = {\n        tileContent: sourceChild.content,\n        textureFormat: sourceChild?.header?.textureFormat\n      };\n\n      const b3dm = await transform3DTilesAttributesOnWorker(i3sAttributesData, {\n        source: this.workerSource.tile3dWorkerSource,\n        featureAttributes\n      });\n\n      child.content = {\n        uri: `${sourceChild.id}.b3dm`,\n        boundingVolume\n      };\n      await writeFile(this.tilesetPath, new Uint8Array(b3dm), `${sourceChild.id}.b3dm`);\n      parentNode.children.push(child);\n\n      sourceChild.unloadContent();\n      await this._addChildren(sourceChild, child, level + 1);\n    } else {\n      await this._addChildren(sourceChild, parentNode, level + 1);\n    }\n  }\n\n  /**\n   * The recursive function of traversal of a nodes tree\n   * @param parentSourceNode the parent node tile object (@loaders.gl/tiles/Tile3D)\n   * @param parentNode object in resulting tileset\n   * @param level a current level of a tree depth\n   */\n  private async _addChildren(\n    parentSourceNode: Tile3D,\n    parentNode: Tiles3DTileJSON,\n    level: number\n  ): Promise<void> {\n    if (this.options.maxDepth && level > this.options.maxDepth) {\n      return;\n    }\n    const promises: Promise<void>[] = [];\n    for (const childNodeInfo of parentSourceNode.header.children || []) {\n      promises.push(this.convertChildNode(parentSourceNode, parentNode, level, childNodeInfo));\n    }\n    await Promise.all(promises);\n  }\n\n  /**\n   * Load a child node having information from the node header\n   * @param parentNode a parent node tile object (@loaders.gl/tiles/Tile3D)\n   * @param childNodeInfo child information from 3DNodeIndexDocument\n   *   (https://github.com/Esri/i3s-spec/blob/master/docs/1.7/nodeReference.cmn.md)\n   */\n  private async _loadChildNode(parentNode: Tile3D, childNodeInfo: NodeReference): Promise<Tile3D> {\n    let header;\n    if (this.sourceTileset!.tileset.nodePages) {\n      console.log(`Node conversion: ${childNodeInfo.id}`); // eslint-disable-line no-console,no-undef\n      header = await this.sourceTileset!.tileset.nodePagesTile.formTileFromNodePages(\n        childNodeInfo.id\n      );\n    } else {\n      const {loader} = this.sourceTileset!;\n      const nodeUrl = this._relativeUrlToFullUrl(parentNode.url, childNodeInfo.href!);\n      // load metadata\n      const options = {\n        i3s: {\n          ...this.sourceTileset!.loadOptions,\n          isTileHeader: true,\n          loadContent: false\n        }\n      };\n\n      console.log(`Node conversion: ${nodeUrl}`); // eslint-disable-line no-console,no-undef\n      header = await load(nodeUrl, loader, options);\n    }\n    return new Tile3D(this.sourceTileset!, header, parentNode);\n  }\n\n  /**\n   * Make an url of a resource from its relative url having the base url\n   * @param baseUrl the base url. A resulting url will be related from this url\n   * @param relativeUrl a realtive url of a resource\n   */\n  private _relativeUrlToFullUrl(baseUrl: string, relativeUrl: string): string {\n    let resultArray = baseUrl.split('/');\n    const relativeUrlArray = relativeUrl.split('/');\n    for (const folder of relativeUrlArray) {\n      switch (folder) {\n        case '.':\n          continue; // eslint-disable-line no-continue\n        case '..':\n          resultArray = resultArray.slice(0, -1);\n          break;\n        default:\n          resultArray.push(folder);\n      }\n    }\n    return resultArray.join('/');\n  }\n\n  /**\n   * Do loading all attributes related to particular node.\n   * @param sourceChild\n   * @param attributeStorageInfo\n   * @returns Promise of attributes object.\n   */\n  private async _loadChildAttributes(\n    sourceChild: Tile3D,\n    attributeStorageInfo: AttributeStorageInfo\n  ): Promise<FeatureAttribute> {\n    const promises: any[] = [];\n    const {attributeUrls} = sourceChild.header;\n\n    for (let index = 0; index < attributeUrls.length; index++) {\n      const inputUrl = attributeUrls[index];\n      const attribute = attributeStorageInfo[index];\n      const options = {\n        attributeName: attribute.name,\n        attributeType: this._getAttributeType(attribute)\n      };\n\n      promises.push(load(inputUrl, I3SAttributeLoader, options));\n    }\n    const attributesList = await Promise.all(promises);\n    this._replaceNestedArrays(attributesList);\n    return Object.assign({}, ...attributesList);\n  }\n\n  /**\n   * Returns attribute type for loading attributes\n   * @param attribute\n   * Workaround for I3S v1.6. There is no attribute.attributeValues.valueType field in attribute.\n   * There is an 'Oid32' type if attribute has objectIds property.\n   * Doc: https://github.com/Esri/i3s-spec/blob/master/docs/1.6/attributeStorageInfo.cmn.md\n   */\n  private _getAttributeType(attribute: AttributeStorageInfo): string {\n    if (attribute.attributeValues) {\n      return attribute.attributeValues.valueType;\n    } else if (attribute.objectIds) {\n      return 'Oid32';\n    }\n    return '';\n  }\n\n  /**\n   * Make simple arrays from attribute typed arrays.\n   * @param attributesList\n   */\n  private _replaceNestedArrays(attributesList: FeatureAttribute[]): void {\n    for (let index = 0; index < attributesList.length; index++) {\n      const attributeObject = attributesList[index];\n\n      for (const key in attributeObject) {\n        attributeObject[key] = Array.from(attributeObject[key]);\n      }\n    }\n  }\n\n  /**\n   * Print statistics in the end of conversion\n   * @param params - output files data\n   */\n  private async _finishConversion(params: {\n    slpk: boolean;\n    outputPath: string;\n    tilesetName: string;\n  }): Promise<void> {\n    const filesSize = await calculateFilesSize(params);\n    const diff = process.hrtime(this.conversionStartTime);\n    const conversionTime = timeConverter(diff);\n\n    console.log(`------------------------------------------------`); // eslint-disable-line\n    console.log(`Finish conversion of ${I3S}`); // eslint-disable-line\n    console.log(`Total conversion time: ${conversionTime}`); // eslint-disable-line\n    console.log(`Vertex count: `, this.vertexCounter); // eslint-disable-line\n    console.log(`File(s) size: `, filesSize, ' bytes'); // eslint-disable-line\n    console.log(`------------------------------------------------`); // eslint-disable-line\n  }\n\n  private async loadWorkers(): Promise<void> {\n    console.log(`Loading workers source...`); // eslint-disable-line no-undef, no-console\n    const tile3dAttributesWorkerUrl = getWorkerURL(Tile3dAttributesWorker, {...getLoaderOptions()});\n    const sourceResponse = await fetchFile(tile3dAttributesWorkerUrl);\n    const source = await sourceResponse.text();\n\n    this.workerSource.tile3dWorkerSource = source;\n    console.log(`Loading workers source completed!`); // eslint-disable-line no-undef, no-console\n  }\n}\n"],"mappings":"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"}