{"version":3,"file":"b3dm-converter.js","names":["_core","require","_gltf","_dTiles","_core2","_geospatial","_textureAtlas","_geometryUtils","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","Z_UP_TO_Y_UP_MATRIX","Matrix4","scratchVector","Vector3","B3dmConverter","_classCallCheck2","_createClass2","value","_convert","_asyncToGenerator2","_regenerator","mark","_callee","i3sAttributesData","featureAttributes","gltf","b3dm","_args","wrap","_callee$","_context","prev","next","undefined","buildGltf","sent","encodeSync","gltfEncoded","Uint8Array","type","featuresLength","_getFeaturesLength","batchTable","Tile3DWriter","abrupt","stop","convert","_x","_buildGltf","_callee2","tileContent","textureFormat","material","attributes","originalIndices","cartesianOrigin","cartographicOrigin","modelMatrix","gltfBuilder","textureIndex","pbrMaterialInfo","materialIndex","positions","positionsValue","indices","meshIndex","transformMatrix","nodeIndex","sceneIndex","gltfBuffer","_callee2$","_context2","GLTFScenegraph","_addI3sTextureToGltf","_convertI3sMaterialToGltfMaterial","addMaterial","uvRegions","texCoords","convertTextureAtlas","_normalizePositions","_createBatchIds","normals","_checkNormals","generateSyntheticIndices","size","addMesh","mode","_generateTransformMatrix","addNode","matrix","addScene","nodeIndices","setDefaultScene","createBinaryChunk","GLTFWriter","_x2","_x3","_addI3sTextureToGltf2","_callee3","texture","selectedTexture","mimeType","imageIndex","_callee3$","_context3","pbrMetallicRoughness","baseColorTexture","image","_deduceMimeTypeFromFormat","addImage","addTexture","colors","_x4","_x5","_x6","newPositionsValue","Float32Array","index","vertex","subarray","cartesianOriginVector","vertexVector","Array","from","transform","add","Ellipsoid","WGS84","cartographicToCartesian","subtract","set","translateOriginMatrix","translate","result","multiplyLeft","i3sContent","featureIds","_ref","objectIds","OBJECTID","featureId","batchId","indexOf","_BATCHID","byteOffset","format","console","warn","concat","isTextureIndexExists","alphaMode","doubleSided","metallicFactor","roughnessFactor","texCoord","baseColorFactor","_setGltfTexture","materialDefinition","emissiveTexture","metallicRoughnessTexture","normalTexture","occlusionTexture","firstKey","find","exports"],"sources":["../../../../src/3d-tiles-converter/helpers/b3dm-converter.ts"],"sourcesContent":["import type {I3SAttributesData} from '../../3d-tiles-attributes-worker';\n\nimport {encodeSync} from '@loaders.gl/core';\nimport {GLTFScenegraph, GLTFWriter} from '@loaders.gl/gltf';\nimport {Tile3DWriter} from '@loaders.gl/3d-tiles';\nimport {Matrix4, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {convertTextureAtlas} from './texture-atlas';\nimport {generateSyntheticIndices} from '../../lib/utils/geometry-utils';\n\nconst Z_UP_TO_Y_UP_MATRIX = new Matrix4([1, 0, 0, 0, 0, 0, -1, 0, 0, 1, 0, 0, 0, 0, 0, 1]);\nconst scratchVector = new Vector3();\n\n/**\n * Converts content of an I3S node to *.b3dm's file content\n */\nexport default class B3dmConverter {\n  // @ts-expect-error\n  rtcCenter: Float32Array;\n  i3sTile: any;\n\n  /**\n   * The starter of content conversion\n   * @param i3sTile - Tile3D instance for I3S node\n   * @returns - encoded content\n   */\n  async convert(\n    i3sAttributesData: I3SAttributesData,\n    featureAttributes: any = null\n  ): Promise<ArrayBuffer> {\n    const gltf = await this.buildGltf(i3sAttributesData, featureAttributes);\n    const b3dm = encodeSync(\n      {\n        gltfEncoded: new Uint8Array(gltf),\n        type: 'b3dm',\n        featuresLength: this._getFeaturesLength(featureAttributes),\n        batchTable: featureAttributes\n      },\n      Tile3DWriter\n    );\n    return b3dm;\n  }\n\n  /**\n   * Build and encode gltf\n   * @param i3sTile - Tile3D instance for I3S node\n   * @returns - encoded glb content\n   */\n  async buildGltf(\n    i3sAttributesData: I3SAttributesData,\n    featureAttributes: any\n  ): Promise<ArrayBuffer> {\n    const {tileContent, textureFormat} = i3sAttributesData;\n    const {\n      material,\n      attributes,\n      indices: originalIndices,\n      cartesianOrigin,\n      cartographicOrigin,\n      modelMatrix\n    } = tileContent;\n    const gltfBuilder = new GLTFScenegraph();\n\n    const textureIndex = await this._addI3sTextureToGltf(tileContent, textureFormat, gltfBuilder);\n    const pbrMaterialInfo = this._convertI3sMaterialToGltfMaterial(material, textureIndex);\n    const materialIndex = gltfBuilder.addMaterial(pbrMaterialInfo);\n\n    const positions = attributes.positions;\n    const positionsValue = positions.value;\n\n    if (attributes.uvRegions && attributes.texCoords) {\n      attributes.texCoords.value = convertTextureAtlas(\n        attributes.texCoords.value,\n        attributes.uvRegions.value\n      );\n    }\n\n    attributes.positions.value = this._normalizePositions(\n      positionsValue,\n      cartesianOrigin,\n      cartographicOrigin,\n      modelMatrix\n    );\n    this._createBatchIds(tileContent, featureAttributes);\n    if (attributes.normals && !this._checkNormals(attributes.normals.value)) {\n      delete attributes.normals;\n    }\n    const indices =\n      originalIndices || generateSyntheticIndices(positionsValue.length / positions.size);\n    const meshIndex = gltfBuilder.addMesh({\n      attributes,\n      indices,\n      material: materialIndex,\n      mode: 4\n    });\n    const transformMatrix = this._generateTransformMatrix(cartesianOrigin);\n    const nodeIndex = gltfBuilder.addNode({meshIndex, matrix: transformMatrix});\n    const sceneIndex = gltfBuilder.addScene({nodeIndices: [nodeIndex]});\n    gltfBuilder.setDefaultScene(sceneIndex);\n\n    gltfBuilder.createBinaryChunk();\n\n    const gltfBuffer = encodeSync(gltfBuilder.gltf, GLTFWriter);\n\n    return gltfBuffer;\n  }\n\n  /**\n   * Update gltfBuilder with texture from I3S tile\n   * @param {object} i3sTile - Tile3D object\n   * @param {GLTFScenegraph} gltfBuilder - gltfScenegraph instance to construct GLTF\n   * @returns {Promise<number | null>} - GLTF texture index\n   */\n  async _addI3sTextureToGltf(tileContent, textureFormat, gltfBuilder) {\n    const {texture, material, attributes} = tileContent;\n    let textureIndex = null;\n    let selectedTexture = texture;\n    if (!texture && material) {\n      selectedTexture =\n        material.pbrMetallicRoughness &&\n        material.pbrMetallicRoughness.baseColorTexture &&\n        material.pbrMetallicRoughness.baseColorTexture.texture.source.image;\n    }\n    if (selectedTexture) {\n      const mimeType = this._deduceMimeTypeFromFormat(textureFormat);\n      const imageIndex = gltfBuilder.addImage(selectedTexture, mimeType);\n      textureIndex = gltfBuilder.addTexture({imageIndex});\n      delete attributes.colors;\n    }\n    return textureIndex;\n  }\n\n  /**\n   * Generate a positions array which is correct for 3DTiles/GLTF format\n   * @param {Float64Array} positionsValue - the input geometry positions array\n   * @param {number[]} cartesianOrigin - the tile center in the cartesian coordinate system\n   * @param {number[]} cartographicOrigin - the tile center in the cartographic coordinate system\n   * @param {number[]} modelMatrix - the model matrix of geometry\n   * @returns {Float32Array} - the output geometry positions array\n   */\n  _normalizePositions(positionsValue, cartesianOrigin, cartographicOrigin, modelMatrix) {\n    const newPositionsValue = new Float32Array(positionsValue.length);\n    for (let index = 0; index < positionsValue.length; index += 3) {\n      const vertex = positionsValue.subarray(index, index + 3);\n      const cartesianOriginVector = new Vector3(cartesianOrigin);\n      let vertexVector = new Vector3(Array.from(vertex))\n        .transform(modelMatrix)\n        .add(cartographicOrigin);\n      Ellipsoid.WGS84.cartographicToCartesian(vertexVector, scratchVector);\n      vertexVector = scratchVector.subtract(cartesianOriginVector);\n      newPositionsValue.set(vertexVector, index);\n    }\n    return newPositionsValue;\n  }\n\n  /**\n   * Generate the transformation matrix for GLTF node:\n   * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#reference-node\n   * 1. Create the translate transformation from cartesianOrigin (the positions array stores offsets from this cartesianOrigin)\n   * 2. Create the rotation transformation to rotate model from z-up coordinates (I3S specific) to y-up coordinates (GLTF specific)\n   * @param {number[]} cartesianOrigin - the tile center in the cartesian coordinate system\n   * @returns {Matrix4} - an array of 16 numbers (4x4 matrix)\n   */\n  _generateTransformMatrix(cartesianOrigin) {\n    const translateOriginMatrix = new Matrix4().translate(cartesianOrigin);\n    const result = translateOriginMatrix.multiplyLeft(Z_UP_TO_Y_UP_MATRIX);\n    return result;\n  }\n\n  /**\n   * Create _BATCHID attribute\n   * @param {Object} i3sContent - the source object\n   * @returns {void}\n   */\n  _createBatchIds(i3sContent, featureAttributes) {\n    const {featureIds} = i3sContent;\n    const {OBJECTID: objectIds} = featureAttributes || {};\n    if (!featureIds || !objectIds) {\n      return;\n    }\n\n    for (let i = 0; i < featureIds.length; i++) {\n      const featureId = featureIds[i];\n      const batchId = objectIds.indexOf(featureId);\n      featureIds[i] = batchId;\n    }\n\n    i3sContent.attributes._BATCHID = {\n      size: 1,\n      byteOffset: 0,\n      value: featureIds\n    };\n  }\n\n  /**\n   * Deduce mime type by format from `textureSetDefinition.formats[0].format`\n   * https://github.com/Esri/i3s-spec/blob/master/docs/1.7/textureSetDefinitionFormat.cmn.md\n   * @param {string} format - format name\n   * @returns {string} mime type.\n   */\n  _deduceMimeTypeFromFormat(format) {\n    switch (format) {\n      case 'jpg':\n        return 'image/jpeg';\n      case 'png':\n        return 'image/png';\n      case 'ktx2':\n        return 'image/ktx2';\n      default:\n        console.warn(`Unexpected texture format in I3S: ${format}`); // eslint-disable-line no-console, no-undef\n        return 'image/jpeg';\n    }\n  }\n\n  /**\n   * Convert i3s material to GLTF compatible material\n   * @param {object} material - i3s material definition\n   * @param {number | null} textureIndex - texture index in GLTF\n   * @returns {object} GLTF material\n   */\n  _convertI3sMaterialToGltfMaterial(material, textureIndex) {\n    const isTextureIndexExists = textureIndex !== null;\n\n    if (!material) {\n      material = {\n        alphaMode: 'OPAQUE',\n        doubleSided: false,\n        pbrMetallicRoughness: {\n          metallicFactor: 0,\n          roughnessFactor: 1\n        }\n      };\n\n      if (isTextureIndexExists) {\n        material.pbrMetallicRoughness.baseColorTexture = {\n          index: textureIndex,\n          texCoord: 0\n        };\n      } else {\n        material.pbrMetallicRoughness.baseColorFactor = [1, 1, 1, 1];\n      }\n\n      return material;\n    }\n\n    if (textureIndex !== null) {\n      material = this._setGltfTexture(material, textureIndex);\n    }\n\n    return material;\n  }\n\n  /**\n   * Set texture properties in material with GLTF textureIndex\n   * @param {object} materialDefinition - i3s material definition\n   * @param {number} textureIndex - texture index in GLTF\n   * @returns {void}\n   */\n  _setGltfTexture(materialDefinition, textureIndex) {\n    const material = {\n      ...materialDefinition,\n      pbrMetallicRoughness: {...materialDefinition.pbrMetallicRoughness}\n    };\n    // I3SLoader now support loading only one texture. This elseif sequence will assign this texture to one of\n    // properties defined in materialDefinition\n    if (\n      materialDefinition.pbrMetallicRoughness &&\n      materialDefinition.pbrMetallicRoughness.baseColorTexture\n    ) {\n      material.pbrMetallicRoughness.baseColorTexture = {\n        index: textureIndex,\n        texCoord: 0\n      };\n    } else if (materialDefinition.emissiveTexture) {\n      material.emissiveTexture = {\n        index: textureIndex,\n        texCoord: 0\n      };\n    } else if (\n      materialDefinition.pbrMetallicRoughness &&\n      materialDefinition.pbrMetallicRoughness.metallicRoughnessTexture\n    ) {\n      material.pbrMetallicRoughness.metallicRoughnessTexture = {\n        index: textureIndex,\n        texCoord: 0\n      };\n    } else if (materialDefinition.normalTexture) {\n      material.normalTexture = {\n        index: textureIndex,\n        texCoord: 0\n      };\n    } else if (materialDefinition.occlusionTexture) {\n      material.occlusionTexture = {\n        index: textureIndex,\n        texCoord: 0\n      };\n    }\n    return material;\n  }\n\n  /*\n   * Returns Features length based on attribute array in attribute object.\n   * @param {Object} attributes\n   * @returns {Number} Features length .\n   */\n  _getFeaturesLength(attributes) {\n    if (!attributes) {\n      return 0;\n    }\n    const firstKey = Object.keys(attributes)[0];\n    return firstKey ? attributes[firstKey].length : 0;\n  }\n\n  /* Checks that normals buffer is correct\n   * @param {TypedArray} normals\n   * @returns {boolean} true - normals are correct; false - normals are incorrect\n   */\n  _checkNormals(normals) {\n    // If all normals === 0, the resulting tileset is all in black colors on Cesium\n    return normals.find((value) => value);\n  }\n}\n"],"mappings":";;;;;;;;;;;;AAEA,IAAAA,KAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,WAAA,GAAAJ,OAAA;AACA,IAAAK,aAAA,GAAAL,OAAA;AACA,IAAAM,cAAA,GAAAN,OAAA;AAAwE,SAAAO,QAAAC,MAAA,EAAAC,cAAA,QAAAC,IAAA,GAAAC,MAAA,CAAAD,IAAA,CAAAF,MAAA,OAAAG,MAAA,CAAAC,qBAAA,QAAAC,OAAA,GAAAF,MAAA,CAAAC,qBAAA,CAAAJ,MAAA,GAAAC,cAAA,KAAAI,OAAA,GAAAA,OAAA,CAAAC,MAAA,WAAAC,GAAA,WAAAJ,MAAA,CAAAK,wBAAA,CAAAR,MAAA,EAAAO,GAAA,EAAAE,UAAA,OAAAP,IAAA,CAAAQ,IAAA,CAAAC,KAAA,CAAAT,IAAA,EAAAG,OAAA,YAAAH,IAAA;AAAA,SAAAU,cAAAC,MAAA,aAAAC,CAAA,MAAAA,CAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,CAAA,UAAAG,MAAA,WAAAF,SAAA,CAAAD,CAAA,IAAAC,SAAA,CAAAD,CAAA,QAAAA,CAAA,OAAAf,OAAA,CAAAI,MAAA,CAAAc,MAAA,OAAAC,OAAA,WAAAC,GAAA,QAAAC,gBAAA,CAAAC,OAAA,EAAAR,MAAA,EAAAM,GAAA,EAAAF,MAAA,CAAAE,GAAA,SAAAhB,MAAA,CAAAmB,yBAAA,GAAAnB,MAAA,CAAAoB,gBAAA,CAAAV,MAAA,EAAAV,MAAA,CAAAmB,yBAAA,CAAAL,MAAA,KAAAlB,OAAA,CAAAI,MAAA,CAAAc,MAAA,GAAAC,OAAA,WAAAC,GAAA,IAAAhB,MAAA,CAAAqB,cAAA,CAAAX,MAAA,EAAAM,GAAA,EAAAhB,MAAA,CAAAK,wBAAA,CAAAS,MAAA,EAAAE,GAAA,iBAAAN,MAAA;AAExE,IAAMY,mBAAmB,GAAG,IAAIC,cAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC1F,IAAMC,aAAa,GAAG,IAAIC,cAAO,CAAC,CAAC;AAAC,IAKfC,aAAa;EAAA,SAAAA,cAAA;IAAA,IAAAC,gBAAA,CAAAT,OAAA,QAAAQ,aAAA;IAAA,IAAAT,gBAAA,CAAAC,OAAA;IAAA,IAAAD,gBAAA,CAAAC,OAAA;EAAA;EAAA,IAAAU,aAAA,CAAAV,OAAA,EAAAQ,aAAA;IAAAV,GAAA;IAAAa,KAAA;MAAA,IAAAC,QAAA,OAAAC,kBAAA,CAAAb,OAAA,EAAAc,YAAA,CAAAd,OAAA,CAAAe,IAAA,CAUhC,SAAAC,QACEC,iBAAoC;QAAA,IAAAC,iBAAA;UAAAC,IAAA;UAAAC,IAAA;UAAAC,KAAA,GAAA3B,SAAA;QAAA,OAAAoB,YAAA,CAAAd,OAAA,CAAAsB,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACpCR,iBAAsB,GAAAG,KAAA,CAAA1B,MAAA,QAAA0B,KAAA,QAAAM,SAAA,GAAAN,KAAA,MAAG,IAAI;cAAAG,QAAA,CAAAE,IAAA;cAAA,OAEV,IAAI,CAACE,SAAS,CAACX,iBAAiB,EAAEC,iBAAiB,CAAC;YAAA;cAAjEC,IAAI,GAAAK,QAAA,CAAAK,IAAA;cACJT,IAAI,GAAG,IAAAU,gBAAU,EACrB;gBACEC,WAAW,EAAE,IAAIC,UAAU,CAACb,IAAI,CAAC;gBACjCc,IAAI,EAAE,MAAM;gBACZC,cAAc,EAAE,IAAI,CAACC,kBAAkB,CAACjB,iBAAiB,CAAC;gBAC1DkB,UAAU,EAAElB;cACd,CAAC,EACDmB,oBACF,CAAC;cAAA,OAAAb,QAAA,CAAAc,MAAA,WACMlB,IAAI;YAAA;YAAA;cAAA,OAAAI,QAAA,CAAAe,IAAA;UAAA;QAAA,GAAAvB,OAAA;MAAA,CACZ;MAAA,SAAAwB,QAAAC,EAAA;QAAA,OAAA7B,QAAA,CAAAtB,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAA8C,OAAA;IAAA;EAAA;IAAA1C,GAAA;IAAAa,KAAA;MAAA,IAAA+B,UAAA,OAAA7B,kBAAA,CAAAb,OAAA,EAAAc,YAAA,CAAAd,OAAA,CAAAe,IAAA,CAOD,SAAA4B,SACE1B,iBAAoC,EACpCC,iBAAsB;QAAA,IAAA0B,WAAA,EAAAC,aAAA,EAAAC,QAAA,EAAAC,UAAA,EAAAC,eAAA,EAAAC,eAAA,EAAAC,kBAAA,EAAAC,WAAA,EAAAC,WAAA,EAAAC,YAAA,EAAAC,eAAA,EAAAC,aAAA,EAAAC,SAAA,EAAAC,cAAA,EAAAC,OAAA,EAAAC,SAAA,EAAAC,eAAA,EAAAC,SAAA,EAAAC,UAAA,EAAAC,UAAA;QAAA,OAAAjD,YAAA,CAAAd,OAAA,CAAAsB,IAAA,UAAA0C,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAxC,IAAA,GAAAwC,SAAA,CAAAvC,IAAA;YAAA;cAEfkB,WAAW,GAAmB3B,iBAAiB,CAA/C2B,WAAW,EAAEC,aAAa,GAAI5B,iBAAiB,CAAlC4B,aAAa;cAE/BC,QAAQ,GAMNF,WAAW,CANbE,QAAQ,EACRC,UAAU,GAKRH,WAAW,CALbG,UAAU,EACDC,eAAe,GAItBJ,WAAW,CAJbc,OAAO,EACPT,eAAe,GAGbL,WAAW,CAHbK,eAAe,EACfC,kBAAkB,GAEhBN,WAAW,CAFbM,kBAAkB,EAClBC,WAAW,GACTP,WAAW,CADbO,WAAW;cAEPC,WAAW,GAAG,IAAIc,oBAAc,CAAC,CAAC;cAAAD,SAAA,CAAAvC,IAAA;cAAA,OAEb,IAAI,CAACyC,oBAAoB,CAACvB,WAAW,EAAEC,aAAa,EAAEO,WAAW,CAAC;YAAA;cAAvFC,YAAY,GAAAY,SAAA,CAAApC,IAAA;cACZyB,eAAe,GAAG,IAAI,CAACc,iCAAiC,CAACtB,QAAQ,EAAEO,YAAY,CAAC;cAChFE,aAAa,GAAGH,WAAW,CAACiB,WAAW,CAACf,eAAe,CAAC;cAExDE,SAAS,GAAGT,UAAU,CAACS,SAAS;cAChCC,cAAc,GAAGD,SAAS,CAAC7C,KAAK;cAEtC,IAAIoC,UAAU,CAACuB,SAAS,IAAIvB,UAAU,CAACwB,SAAS,EAAE;gBAChDxB,UAAU,CAACwB,SAAS,CAAC5D,KAAK,GAAG,IAAA6D,iCAAmB,EAC9CzB,UAAU,CAACwB,SAAS,CAAC5D,KAAK,EAC1BoC,UAAU,CAACuB,SAAS,CAAC3D,KACvB,CAAC;cACH;cAEAoC,UAAU,CAACS,SAAS,CAAC7C,KAAK,GAAG,IAAI,CAAC8D,mBAAmB,CACnDhB,cAAc,EACdR,eAAe,EACfC,kBAAkB,EAClBC,WACF,CAAC;cACD,IAAI,CAACuB,eAAe,CAAC9B,WAAW,EAAE1B,iBAAiB,CAAC;cACpD,IAAI6B,UAAU,CAAC4B,OAAO,IAAI,CAAC,IAAI,CAACC,aAAa,CAAC7B,UAAU,CAAC4B,OAAO,CAAChE,KAAK,CAAC,EAAE;gBACvE,OAAOoC,UAAU,CAAC4B,OAAO;cAC3B;cACMjB,OAAO,GACXV,eAAe,IAAI,IAAA6B,uCAAwB,EAACpB,cAAc,CAAC9D,MAAM,GAAG6D,SAAS,CAACsB,IAAI,CAAC;cAC/EnB,SAAS,GAAGP,WAAW,CAAC2B,OAAO,CAAC;gBACpChC,UAAU,EAAVA,UAAU;gBACVW,OAAO,EAAPA,OAAO;gBACPZ,QAAQ,EAAES,aAAa;gBACvByB,IAAI,EAAE;cACR,CAAC,CAAC;cACIpB,eAAe,GAAG,IAAI,CAACqB,wBAAwB,CAAChC,eAAe,CAAC;cAChEY,SAAS,GAAGT,WAAW,CAAC8B,OAAO,CAAC;gBAACvB,SAAS,EAATA,SAAS;gBAAEwB,MAAM,EAAEvB;cAAe,CAAC,CAAC;cACrEE,UAAU,GAAGV,WAAW,CAACgC,QAAQ,CAAC;gBAACC,WAAW,EAAE,CAACxB,SAAS;cAAC,CAAC,CAAC;cACnET,WAAW,CAACkC,eAAe,CAACxB,UAAU,CAAC;cAEvCV,WAAW,CAACmC,iBAAiB,CAAC,CAAC;cAEzBxB,UAAU,GAAG,IAAAjC,gBAAU,EAACsB,WAAW,CAACjC,IAAI,EAAEqE,gBAAU,CAAC;cAAA,OAAAvB,SAAA,CAAA3B,MAAA,WAEpDyB,UAAU;YAAA;YAAA;cAAA,OAAAE,SAAA,CAAA1B,IAAA;UAAA;QAAA,GAAAI,QAAA;MAAA,CAClB;MAAA,SAAAf,UAAA6D,GAAA,EAAAC,GAAA;QAAA,OAAAhD,UAAA,CAAApD,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAAkC,SAAA;IAAA;EAAA;IAAA9B,GAAA;IAAAa,KAAA;MAAA,IAAAgF,qBAAA,OAAA9E,kBAAA,CAAAb,OAAA,EAAAc,YAAA,CAAAd,OAAA,CAAAe,IAAA,CAQD,SAAA6E,SAA2BhD,WAAW,EAAEC,aAAa,EAAEO,WAAW;QAAA,IAAAyC,OAAA,EAAA/C,QAAA,EAAAC,UAAA,EAAAM,YAAA,EAAAyC,eAAA,EAAAC,QAAA,EAAAC,UAAA;QAAA,OAAAlF,YAAA,CAAAd,OAAA,CAAAsB,IAAA,UAAA2E,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzE,IAAA,GAAAyE,SAAA,CAAAxE,IAAA;YAAA;cACzDmE,OAAO,GAA0BjD,WAAW,CAA5CiD,OAAO,EAAE/C,QAAQ,GAAgBF,WAAW,CAAnCE,QAAQ,EAAEC,UAAU,GAAIH,WAAW,CAAzBG,UAAU;cAChCM,YAAY,GAAG,IAAI;cACnByC,eAAe,GAAGD,OAAO;cAC7B,IAAI,CAACA,OAAO,IAAI/C,QAAQ,EAAE;gBACxBgD,eAAe,GACbhD,QAAQ,CAACqD,oBAAoB,IAC7BrD,QAAQ,CAACqD,oBAAoB,CAACC,gBAAgB,IAC9CtD,QAAQ,CAACqD,oBAAoB,CAACC,gBAAgB,CAACP,OAAO,CAACjG,MAAM,CAACyG,KAAK;cACvE;cACA,IAAIP,eAAe,EAAE;gBACbC,QAAQ,GAAG,IAAI,CAACO,yBAAyB,CAACzD,aAAa,CAAC;gBACxDmD,UAAU,GAAG5C,WAAW,CAACmD,QAAQ,CAACT,eAAe,EAAEC,QAAQ,CAAC;gBAClE1C,YAAY,GAAGD,WAAW,CAACoD,UAAU,CAAC;kBAACR,UAAU,EAAVA;gBAAU,CAAC,CAAC;gBACnD,OAAOjD,UAAU,CAAC0D,MAAM;cAC1B;cAAC,OAAAP,SAAA,CAAA5D,MAAA,WACMe,YAAY;YAAA;YAAA;cAAA,OAAA6C,SAAA,CAAA3D,IAAA;UAAA;QAAA,GAAAqD,QAAA;MAAA,CACpB;MAAA,SAAAzB,qBAAAuC,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAjB,qBAAA,CAAArG,KAAA,OAAAI,SAAA;MAAA;MAAA,OAAAyE,oBAAA;IAAA;EAAA;IAAArE,GAAA;IAAAa,KAAA,EAUD,SAAA8D,oBAAoBhB,cAAc,EAAER,eAAe,EAAEC,kBAAkB,EAAEC,WAAW,EAAE;MACpF,IAAM0D,iBAAiB,GAAG,IAAIC,YAAY,CAACrD,cAAc,CAAC9D,MAAM,CAAC;MACjE,KAAK,IAAIoH,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGtD,cAAc,CAAC9D,MAAM,EAAEoH,KAAK,IAAI,CAAC,EAAE;QAC7D,IAAMC,MAAM,GAAGvD,cAAc,CAACwD,QAAQ,CAACF,KAAK,EAAEA,KAAK,GAAG,CAAC,CAAC;QACxD,IAAMG,qBAAqB,GAAG,IAAI3G,cAAO,CAAC0C,eAAe,CAAC;QAC1D,IAAIkE,YAAY,GAAG,IAAI5G,cAAO,CAAC6G,KAAK,CAACC,IAAI,CAACL,MAAM,CAAC,CAAC,CAC/CM,SAAS,CAACnE,WAAW,CAAC,CACtBoE,GAAG,CAACrE,kBAAkB,CAAC;QAC1BsE,qBAAS,CAACC,KAAK,CAACC,uBAAuB,CAACP,YAAY,EAAE7G,aAAa,CAAC;QACpE6G,YAAY,GAAG7G,aAAa,CAACqH,QAAQ,CAACT,qBAAqB,CAAC;QAC5DL,iBAAiB,CAACe,GAAG,CAACT,YAAY,EAAEJ,KAAK,CAAC;MAC5C;MACA,OAAOF,iBAAiB;IAC1B;EAAC;IAAA/G,GAAA;IAAAa,KAAA,EAUD,SAAAsE,yBAAyBhC,eAAe,EAAE;MACxC,IAAM4E,qBAAqB,GAAG,IAAIxH,cAAO,CAAC,CAAC,CAACyH,SAAS,CAAC7E,eAAe,CAAC;MACtE,IAAM8E,MAAM,GAAGF,qBAAqB,CAACG,YAAY,CAAC5H,mBAAmB,CAAC;MACtE,OAAO2H,MAAM;IACf;EAAC;IAAAjI,GAAA;IAAAa,KAAA,EAOD,SAAA+D,gBAAgBuD,UAAU,EAAE/G,iBAAiB,EAAE;MAC7C,IAAOgH,UAAU,GAAID,UAAU,CAAxBC,UAAU;MACjB,IAAAC,IAAA,GAA8BjH,iBAAiB,IAAI,CAAC,CAAC;QAApCkH,SAAS,GAAAD,IAAA,CAAnBE,QAAQ;MACf,IAAI,CAACH,UAAU,IAAI,CAACE,SAAS,EAAE;QAC7B;MACF;MAEA,KAAK,IAAI3I,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyI,UAAU,CAACvI,MAAM,EAAEF,CAAC,EAAE,EAAE;QAC1C,IAAM6I,SAAS,GAAGJ,UAAU,CAACzI,CAAC,CAAC;QAC/B,IAAM8I,OAAO,GAAGH,SAAS,CAACI,OAAO,CAACF,SAAS,CAAC;QAC5CJ,UAAU,CAACzI,CAAC,CAAC,GAAG8I,OAAO;MACzB;MAEAN,UAAU,CAAClF,UAAU,CAAC0F,QAAQ,GAAG;QAC/B3D,IAAI,EAAE,CAAC;QACP4D,UAAU,EAAE,CAAC;QACb/H,KAAK,EAAEuH;MACT,CAAC;IACH;EAAC;IAAApI,GAAA;IAAAa,KAAA,EAQD,SAAA2F,0BAA0BqC,MAAM,EAAE;MAChC,QAAQA,MAAM;QACZ,KAAK,KAAK;UACR,OAAO,YAAY;QACrB,KAAK,KAAK;UACR,OAAO,WAAW;QACpB,KAAK,MAAM;UACT,OAAO,YAAY;QACrB;UACEC,OAAO,CAACC,IAAI,sCAAAC,MAAA,CAAsCH,MAAM,CAAE,CAAC;UAC3D,OAAO,YAAY;MACvB;IACF;EAAC;IAAA7I,GAAA;IAAAa,KAAA,EAQD,SAAAyD,kCAAkCtB,QAAQ,EAAEO,YAAY,EAAE;MACxD,IAAM0F,oBAAoB,GAAG1F,YAAY,KAAK,IAAI;MAElD,IAAI,CAACP,QAAQ,EAAE;QACbA,QAAQ,GAAG;UACTkG,SAAS,EAAE,QAAQ;UACnBC,WAAW,EAAE,KAAK;UAClB9C,oBAAoB,EAAE;YACpB+C,cAAc,EAAE,CAAC;YACjBC,eAAe,EAAE;UACnB;QACF,CAAC;QAED,IAAIJ,oBAAoB,EAAE;UACxBjG,QAAQ,CAACqD,oBAAoB,CAACC,gBAAgB,GAAG;YAC/CW,KAAK,EAAE1D,YAAY;YACnB+F,QAAQ,EAAE;UACZ,CAAC;QACH,CAAC,MAAM;UACLtG,QAAQ,CAACqD,oBAAoB,CAACkD,eAAe,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC9D;QAEA,OAAOvG,QAAQ;MACjB;MAEA,IAAIO,YAAY,KAAK,IAAI,EAAE;QACzBP,QAAQ,GAAG,IAAI,CAACwG,eAAe,CAACxG,QAAQ,EAAEO,YAAY,CAAC;MACzD;MAEA,OAAOP,QAAQ;IACjB;EAAC;IAAAhD,GAAA;IAAAa,KAAA,EAQD,SAAA2I,gBAAgBC,kBAAkB,EAAElG,YAAY,EAAE;MAChD,IAAMP,QAAQ,GAAAvD,aAAA,CAAAA,aAAA,KACTgK,kBAAkB;QACrBpD,oBAAoB,EAAA5G,aAAA,KAAMgK,kBAAkB,CAACpD,oBAAoB;MAAC,EACnE;MAGD,IACEoD,kBAAkB,CAACpD,oBAAoB,IACvCoD,kBAAkB,CAACpD,oBAAoB,CAACC,gBAAgB,EACxD;QACAtD,QAAQ,CAACqD,oBAAoB,CAACC,gBAAgB,GAAG;UAC/CW,KAAK,EAAE1D,YAAY;UACnB+F,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,MAAM,IAAIG,kBAAkB,CAACC,eAAe,EAAE;QAC7C1G,QAAQ,CAAC0G,eAAe,GAAG;UACzBzC,KAAK,EAAE1D,YAAY;UACnB+F,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,MAAM,IACLG,kBAAkB,CAACpD,oBAAoB,IACvCoD,kBAAkB,CAACpD,oBAAoB,CAACsD,wBAAwB,EAChE;QACA3G,QAAQ,CAACqD,oBAAoB,CAACsD,wBAAwB,GAAG;UACvD1C,KAAK,EAAE1D,YAAY;UACnB+F,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,MAAM,IAAIG,kBAAkB,CAACG,aAAa,EAAE;QAC3C5G,QAAQ,CAAC4G,aAAa,GAAG;UACvB3C,KAAK,EAAE1D,YAAY;UACnB+F,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,MAAM,IAAIG,kBAAkB,CAACI,gBAAgB,EAAE;QAC9C7G,QAAQ,CAAC6G,gBAAgB,GAAG;UAC1B5C,KAAK,EAAE1D,YAAY;UACnB+F,QAAQ,EAAE;QACZ,CAAC;MACH;MACA,OAAOtG,QAAQ;IACjB;EAAC;IAAAhD,GAAA;IAAAa,KAAA,EAOD,SAAAwB,mBAAmBY,UAAU,EAAE;MAC7B,IAAI,CAACA,UAAU,EAAE;QACf,OAAO,CAAC;MACV;MACA,IAAM6G,QAAQ,GAAG9K,MAAM,CAACD,IAAI,CAACkE,UAAU,CAAC,CAAC,CAAC,CAAC;MAC3C,OAAO6G,QAAQ,GAAG7G,UAAU,CAAC6G,QAAQ,CAAC,CAACjK,MAAM,GAAG,CAAC;IACnD;EAAC;IAAAG,GAAA;IAAAa,KAAA,EAMD,SAAAiE,cAAcD,OAAO,EAAE;MAErB,OAAOA,OAAO,CAACkF,IAAI,CAAC,UAAClJ,KAAK;QAAA,OAAKA,KAAK;MAAA,EAAC;IACvC;EAAC;EAAA,OAAAH,aAAA;AAAA;AAAAsJ,OAAA,CAAA9J,OAAA,GAAAQ,aAAA"}