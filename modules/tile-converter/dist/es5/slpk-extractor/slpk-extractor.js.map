{"version":3,"file":"slpk-extractor.js","names":["_core","require","_constants","_fileHandleProvider","_i3s","_loaderUtils","_compression","_fileUtils","indexNames","SLPKExtractor","_classCallCheck2","default","_createClass2","key","value","_extract","_asyncToGenerator2","_regenerator","mark","_callee","options","inputUrl","provider","localHeader","_localHeader","_localHeader2","wrap","_callee$","_context","prev","next","isBrowser","console","log","BROWSER_ERROR_MESSAGE","abrupt","FileHandleProvider","from","sent","parseZipLocalFileHeader","t0","t1","t2","correctIndexNames","fileName","slice","fileDataOffset","compressedSize","t3","t4","name","data","unGzip","call","t5","t6","outputPath","writeFile","stop","extract","_x","apply","arguments","includes","path","filename","join","dirname","parts","exec","concat","at","_unGzip","_callee2","file","_file$name","_file$name2","compression","decompressedData","_callee2$","_context2","test","GZipCompression","decompress","Promise","resolve","_x2","_writeFile2","_callee3","finalPath","dirName","_callee3$","_context3","_x3","_x4","exports"],"sources":["../../../src/slpk-extractor/slpk-extractor.ts"],"sourcesContent":["import {isBrowser} from '@loaders.gl/core';\n\nimport {BROWSER_ERROR_MESSAGE} from '../constants';\nimport {FileHandleProvider} from './helpers/file-handle-provider';\nimport {parseZipLocalFileHeader} from '@loaders.gl/i3s';\nimport {path} from '@loaders.gl/loader-utils';\nimport {GZipCompression} from '@loaders.gl/compression';\nimport {writeFile} from '../lib/utils/file-utils';\n\n/**\n * names of files that should be changed to index\n */\nconst indexNames = [\n  '3dSceneLayer.json.gz',\n  '3dNodeIndexDocument.json.gz',\n  'sharedResource.json.gz'\n];\n\n/**\n * Description of the file in the SLPK\n */\ntype File = {\n  name: string | null;\n  data: ArrayBuffer;\n};\n\n/**\n * Converter from slpk to i3s\n */\nexport default class SLPKExtractor {\n  /**\n   * extract slpk to i3s\n   * @param options\n   * @param options.inputUrl the url to read SLPK file\n   * @param options.outputPath the output filename\n   */\n  public async extract(options: {inputUrl: string; outputPath: string}): Promise<string> {\n    if (isBrowser) {\n      console.log(BROWSER_ERROR_MESSAGE);\n      return BROWSER_ERROR_MESSAGE;\n    }\n    const {inputUrl} = options;\n\n    const provider = await FileHandleProvider.from(inputUrl);\n\n    let localHeader = await parseZipLocalFileHeader(0, provider);\n    while (localHeader) {\n      await this.writeFile(\n        await this.unGzip({\n          name: this.correctIndexNames(localHeader.fileName),\n          data: await provider.slice(\n            localHeader.fileDataOffset,\n            localHeader.fileDataOffset + localHeader.compressedSize\n          )\n        }),\n        options.outputPath\n      );\n      localHeader = await parseZipLocalFileHeader(\n        localHeader?.fileDataOffset + localHeader?.compressedSize,\n        provider\n      );\n    }\n\n    return 'success';\n  }\n\n  /**\n   * Defines file name and path for i3s format\n   * @param fileName initial file name and path\n   */\n  private correctIndexNames(fileName: string): string | null {\n    if (indexNames.includes(path.filename(path.join('/', fileName)))) {\n      return path.join(path.dirname(fileName), 'index.json.gz');\n    }\n    // finds path with name part and extention part\n    let parts = /^(.*\\/[^\\/\\.]*)(\\..+)$/.exec(fileName);\n    if (!parts) {\n      return null;\n    }\n    return `${parts?.at(1)}/index${parts?.at(2)}`;\n  }\n\n  private async unGzip(file: File): Promise<File> {\n    if (/\\.gz$/.test(file.name ?? '')) {\n      const compression = new GZipCompression();\n\n      const decompressedData = await compression.decompress(file.data);\n      return {data: decompressedData, name: (file.name ?? '').slice(0, -3)};\n    }\n    return Promise.resolve(file);\n  }\n\n  private async writeFile(options: File, outputPath: string): Promise<void> {\n    if (!options.name) {\n      return;\n    }\n    const finalPath = path.join(outputPath, options.name);\n    const dirName = path.dirname(finalPath);\n    const fileName = path.filename(finalPath);\n    await writeFile(dirName, options.data, fileName);\n  }\n}\n"],"mappings":"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"}