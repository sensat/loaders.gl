{"version":3,"file":"file-handle-provider.js","names":["_fs","require","FileHandleProvider","fileDescriptor","size","_classCallCheck2","default","_defineProperty2","_createClass2","key","value","_getUint","_asyncToGenerator2","_regenerator","mark","_callee","offset","val","wrap","_callee$","_context","prev","next","t0","Uint8Array","read","Buffer","alloc","t1","sent","buffer","at","undefined","Error","abrupt","stop","getUint8","_x","apply","arguments","_getUint2","_callee2","_callee2$","_context2","Uint16Array","getUint16","_x2","_getUint3","_callee3","_callee3$","_context3","Uint32Array","getUint32","_x3","_slice","_callee4","startOffset","endOffset","length","_callee4$","_context4","slice","_x4","_x5","get","_from","_callee5","path","_callee5$","_context5","fsPromises","open","stat","t2","from","_x6","exports"],"sources":["../../../../src/slpk-extractor/helpers/file-handle-provider.ts"],"sourcesContent":["import {FileProvider} from '@loaders.gl/i3s';\nimport {promises as fsPromises, PathLike} from 'fs';\n\n/**\n * Provides file data using node fs library\n */\nexport class FileHandleProvider implements FileProvider {\n  /**\n   * Returns a new copy of FileHandleProvider\n   * @param path The path to the file in file system\n   */\n  static async from(path: PathLike): Promise<FileHandleProvider> {\n    const fileDescriptor = await fsPromises.open(path);\n    return new FileHandleProvider(fileDescriptor, (await fileDescriptor.stat()).size);\n  }\n\n  /**\n   * The FileHandle from which data is provided\n   */\n  private fileDescriptor: fsPromises.FileHandle;\n\n  /**\n   * The file length in bytes\n   */\n  private size: number;\n\n  private constructor(fileDescriptor: fsPromises.FileHandle, size: number) {\n    this.fileDescriptor = fileDescriptor;\n    this.size = size;\n  }\n\n  /**\n   * Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint8(offset: number): Promise<number> {\n    const val = new Uint8Array(\n      (await this.fileDescriptor.read(Buffer.alloc(1), 0, 1, offset)).buffer.buffer\n    ).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n\n  /**\n   * Gets an unsigned 16-bit integer (unsigned byte) at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint16(offset: number): Promise<number> {\n    const val = new Uint16Array(\n      (await this.fileDescriptor.read(Buffer.alloc(2), 0, 2, offset)).buffer.buffer\n    ).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n\n  /**\n   * Gets an unsigned 32-bit integer (unsigned byte) at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint32(offset: number): Promise<number> {\n    const val = new Uint32Array(\n      (await this.fileDescriptor.read(Buffer.alloc(4), 0, 4, offset)).buffer.buffer\n    ).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in bytes, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  async slice(startOffset: number, endOffset: number): Promise<ArrayBuffer> {\n    const length = endOffset - startOffset;\n    return (await this.fileDescriptor.read(Buffer.alloc(length), 0, length, startOffset)).buffer\n      .buffer;\n  }\n\n  /**\n   * the length (in bytes) of the data.\n   */\n  get length(): number {\n    return this.size;\n  }\n}\n"],"mappings":"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"}