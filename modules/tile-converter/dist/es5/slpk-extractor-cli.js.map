{"version":3,"file":"slpk-extractor-cli.js","names":["require","_slpkExtractor","_interopRequireDefault","_cliUtils","main","_main","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","_process$argv","args","validatedOptionsArr","options","validatedOptions","wrap","_callee$","_context","prev","next","_toArray2","process","argv","slice","length","printHelp","validateOptionsWithEqual","parseOptions","validateOptions","convert","stop","catch","error","console","log","exit","_x","_convert","_callee2","slpkExtractor","_callee2$","_context2","SLPKExtractor","extract","inputUrl","tileset","outputPath","output","mandatoryOptionsWithExceptions","exceptions","mandatoryOption","optionValue","push","forEach","exeption","opts","arg","index","indexOf","getURLValue","warn","concat"],"sources":["../../src/slpk-extractor-cli.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport '@loaders.gl/polyfills';\nimport SLPKExtractor from './slpk-extractor/slpk-extractor';\nimport {getURLValue, validateOptionsWithEqual} from './lib/utils/cli-utils';\n\ntype SLPKExtractionOptions = {\n  /** \"tileset.json\" file (3DTiles) / \"http://..../SceneServer/layers/0\" resource (I3S) */\n  tileset?: string;\n  /** Output folder. This folder will be created by converter if doesn't exist. It is relative to the converter path.\n   * Default: \"data\" folder */\n  output?: string;\n};\n\n/* During validation we check that particular options are defined so they can't be undefined */\nexport type ValidatedSLPKExtractionOptions = SLPKExtractionOptions & {\n  /** slpk file */\n  tileset: string;\n  /** Output folder. This folder will be created by converter if doesn't exist. It is relative to the converter path.\n   * Default: \"data\" folder */\n  output: string;\n};\n\n/**\n * CLI entry\n * @returns\n */\nasync function main() {\n  const [, , ...args] = process.argv;\n\n  if (args.length === 0) {\n    printHelp();\n  }\n\n  const validatedOptionsArr = validateOptionsWithEqual(args);\n\n  const options: SLPKExtractionOptions = parseOptions(validatedOptionsArr);\n\n  const validatedOptions: ValidatedSLPKExtractionOptions = validateOptions(options);\n\n  await convert(validatedOptions);\n}\n\nmain().catch((error) => {\n  console.log(error);\n  process.exit(1); // eslint-disable-line\n});\n\n/**\n * Output for `npx slpk-extractor --help`\n */\nfunction printHelp(): void {\n  console.log('cli: converter slpk to I3S...');\n  console.log('--output [Output folder, default: \"data\" folder]');\n  console.log('--tileset [SLPK file]');\n  process.exit(0); // eslint-disable-line\n}\n\n/**\n * Run extraction process\n * @param options validated slpk-extractor options\n */\nasync function convert(options: ValidatedSLPKExtractionOptions) {\n  console.log(`------------------------------------------------`); // eslint-disable-line\n  console.log(`Starting conversion of SLPK`); // eslint-disable-line\n  console.log(`------------------------------------------------`); // eslint-disable-line\n  const slpkExtractor = new SLPKExtractor();\n  slpkExtractor.extract({\n    inputUrl: options.tileset,\n    outputPath: options.output\n  });\n}\n\n// OPTIONS\n/**\n * Validate input options of the CLI command\n * @param options - input options of the CLI command\n * @returns validated options\n */\nfunction validateOptions(options: SLPKExtractionOptions): ValidatedSLPKExtractionOptions {\n  const mandatoryOptionsWithExceptions: {\n    [key: string]: () => void;\n  } = {\n    output: () => console.log('Missed: --output [Output path name]'),\n    tileset: () => console.log('Missed: --tileset [SLPK file]')\n  };\n  const exceptions: (() => void)[] = [];\n  for (const mandatoryOption in mandatoryOptionsWithExceptions) {\n    const optionValue = options[mandatoryOption];\n    if (!optionValue) {\n      exceptions.push(mandatoryOptionsWithExceptions[mandatoryOption]);\n    }\n  }\n  if (exceptions.length) {\n    exceptions.forEach((exeption) => exeption());\n    process.exit(1);\n  }\n  return <ValidatedSLPKExtractionOptions>options;\n}\n\n/**\n * Parse option from the cli arguments array\n * @param args\n * @returns\n */\nfunction parseOptions(args: string[]): SLPKExtractionOptions {\n  const opts: SLPKExtractionOptions = {};\n\n  // eslint-disable-next-line complexity\n  args.forEach((arg, index) => {\n    if (arg.indexOf('--') === 0) {\n      switch (arg) {\n        case '--tileset':\n          opts.tileset = getURLValue(index, args);\n          break;\n        case '--output':\n          opts.output = getURLValue(index, args);\n          break;\n        case '--help':\n          printHelp();\n          break;\n        default:\n          console.warn(`Unknown option ${arg}`);\n          process.exit(0); // eslint-disable-line\n      }\n    }\n  });\n  return opts;\n}\n"],"mappings":"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"}