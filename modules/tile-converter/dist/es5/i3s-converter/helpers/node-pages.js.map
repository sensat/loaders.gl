{"version":3,"file":"node-pages.js","names":["_path","require","_jsonMapTransform","_interopRequireDefault","_metadata","_fileUtils","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","NodePages","writeFileFunc","nodesPerPage","converter","_classCallCheck2","default","_defineProperty2","nodesCounter","nodePages","nodes","writeFile","_createClass2","key","useWriteFunction","func","getNodePageFileName","nodePageId","filePath","fileName","options","slpk","join","layers0Path","concat","_loadNodePage","_asyncToGenerator2","_regenerator","mark","_callee","_this$getNodePageFile","fullName","wrap","_callee$","_context","prev","isFileExists","sent","console","log","openJson","abrupt","stop","loadNodePage","_x","apply","arguments","getPageIndexByNodeId","id","Math","floor","_getPageByNodeId","_callee2","pageIndex","_callee2$","_context2","instantNodeWriting","getPageByNodeId","_x2","_getNodeById","_callee3","nodePage","nodeIndex","_callee3$","_context3","t0","getNodeById","_x3","_x4","_addChildRelation","_callee4","parentId","childId","_parentNode$children","parentNode","_callee4$","_context4","undefined","children","push","saveNode","addChildRelation","_x5","_x6","_push","_callee5","node","currentNodePage","_callee5$","_context5","index","updateResourceInMesh","_x7","_x8","_saveNode","_callee6","_this","nodePageIndex","_this$getNodePageFile2","nodeToUpdate","nodePageStr","_callee6$","_context6","updateAll","JSON","stringify","writeQueue","enqueue","archiveKey","writePromise","compressList","_x9","_saveMetadata","_callee7","_this2","metadata","compress","_callee7$","_context7","transform","nodeCount","metadataTemplate","saveMetadata","_save","_callee8","_this3","_iterator","_step","_loop","_iterator2","_step2","_loop2","_callee8$","_context10","entries","_step$value","slpkPath","_loop$","_context8","_slicedToArray2","delegateYield","t1","finish","_step2$value","nodePagePath","_loop2$","_context9","t3","save","mesh","isFinite","geometry","resource","data","assign","updateMaterialByNodeId","materialId","material","definition","updateVertexCountByNodeId","vertexCount","updateNodeAttributeByNodeId","attribute","updateFeatureCountByNodeId","featureCount","updateTexelCountHintByNodeId","texelCountHint","exports"],"sources":["../../../../src/i3s-converter/helpers/node-pages.ts"],"sourcesContent":["import {join} from 'path';\nimport transform from 'json-map-transform';\nimport {METADATA as metadataTemplate} from '../json-templates/metadata';\nimport {NodeInPage} from '@loaders.gl/i3s';\nimport {isFileExists, openJson} from '../../lib/utils/file-utils';\nimport I3SConverter from '../i3s-converter';\n\n/**\n * class NodePages - wrapper of nodePages array\n *\n * @example\n * import {writeFile} from './helpers/write-file';\n *\n * // create an instance of the class\n * const nodePages = new NodePages(writeFile, HARDCODED_NODES_PER_PAGE);\n * ...\n * // push root node\n * const parent = await nodePages.push({\n      lodThreshold: HARDCODED_MAX_SCREEN_THRESHOLD_SQ,\n      obb: coordinates.obb,\n      children: []\n    });\n * ...\n * // push node with parent relation\n * const nodeInPage = {\n      lodThreshold: HARDCODED_MAX_SCREEN_THRESHOLD_SQ,\n      obb: coordinates.obb,\n      children: [],\n      mesh: {\n        geometry: {\n          definition: 0\n        }\n      }\n    };\n * const node = await this.nodePages.push(nodeInPage, parent.index);\n * ...\n * // save all the nodePages in the end of pushing all the nodes\n * await this.nodePages.save(layers0path);\n */\nexport default class NodePages {\n  readonly nodesPerPage: number;\n  nodesCounter: number;\n  writeFile: (...args) => Promise<null | string>;\n  converter: I3SConverter;\n  readonly nodePages: {nodes: NodeInPage[]}[];\n  readonly length: number = 0;\n\n  /**\n   * @constructs\n   * Create a nodePages instance.\n   * @param writeFileFunc - function to save one nodePage into a file\n   * @param nodesPerPage - length limit for one nodePage. An additional nodePage is created when this limit is met\n   */\n  constructor(writeFileFunc, nodesPerPage, converter: I3SConverter) {\n    this.nodesPerPage = nodesPerPage;\n    this.nodesCounter = 0;\n    // @ts-expect-error\n    this.nodePages = [{}];\n    this.nodePages[0].nodes = [];\n    this.writeFile = writeFileFunc;\n    this.converter = converter;\n    this.length = 0;\n  }\n\n  /**\n   * Setup function to save node pages\n   * @param func - function which should be used to save node pages\n   */\n  useWriteFunction(func: (...args) => Promise<null | string>): void {\n    this.writeFile = func;\n  }\n\n  /**\n   * Get file path and file name of the node page with the particular id\n   * @param nodePageId - node page id\n   * @returns file path and file name\n   */\n  private getNodePageFileName(nodePageId): {filePath: string; fileName: string} {\n    let filePath;\n    let fileName;\n    if (this.converter.options.slpk) {\n      filePath = join(this.converter.layers0Path, 'nodepages');\n      fileName = `${nodePageId.toString()}.json`;\n    } else {\n      filePath = join(this.converter.layers0Path, 'nodepages', nodePageId.toString());\n      fileName = 'index.json';\n    }\n    return {filePath, fileName};\n  }\n\n  /**\n   * Load node page from a file on the disk\n   * @param nodePageId - node page id\n   * @returns - node page data\n   */\n  private async loadNodePage(nodePageId: number): Promise<{nodes: NodeInPage[]}> {\n    const {filePath, fileName} = this.getNodePageFileName(nodePageId);\n    const fullName = join(filePath, fileName);\n    if (await isFileExists(fullName)) {\n      console.log(`load ${fullName}.`); // eslint-disable-line\n      return (await openJson(filePath, fileName)) as {nodes: NodeInPage[]};\n    } else {\n      return {nodes: []};\n    }\n  }\n\n  /**\n   * Get nodepage id by node id\n   * @param id node id\n   * @returns node page id\n   */\n  private getPageIndexByNodeId(id: number): number {\n    return Math.floor(id / this.nodesPerPage);\n  }\n\n  /**\n   * Get node page data by node id\n   * @param id node id\n   * @returns node page data\n   */\n  private async getPageByNodeId(id: number): Promise<{nodes: NodeInPage[]}> {\n    const pageIndex = this.getPageIndexByNodeId(id);\n    if (this.converter.options.instantNodeWriting) {\n      return await this.loadNodePage(pageIndex);\n    }\n    return this.nodePages[pageIndex];\n  }\n\n  /**\n   * Get the node by its end-to-end index\n   * @param id - end-to-end index of the node\n   * @return the node object\n   */\n  async getNodeById(id: number, nodePage?: {nodes: NodeInPage[]}): Promise<NodeInPage> {\n    const nodeIndex = id % this.nodesPerPage;\n    nodePage = nodePage || (await this.getPageByNodeId(id));\n    return nodePage.nodes[nodeIndex];\n  }\n\n  /**\n   * Add a child id into the parent node.children array\n   * @param parentId - end-to-end parent node index\n   * @param childId - end-to-end child node index\n   */\n  private async addChildRelation(parentId: number | undefined, childId: number): Promise<void> {\n    if (parentId === null || parentId === undefined) {\n      return;\n    }\n    const parentNode = await this.getNodeById(parentId);\n    parentNode.children?.push(childId);\n    await this.saveNode(parentNode);\n  }\n\n  /**\n   * Put new node in nodePages array\n   * @param node - node object\n   * @param parentId - index of parent node\n   * @return\n   */\n  async push(node: NodeInPage, parentId?: number): Promise<NodeInPage> {\n    node.index = this.nodesCounter++;\n    if (!this.converter.options.instantNodeWriting) {\n      let currentNodePage = this.nodePages[this.nodePages.length - 1];\n      if (currentNodePage.nodes.length === this.nodesPerPage) {\n        currentNodePage = {nodes: []};\n        this.nodePages.push(currentNodePage);\n      }\n      currentNodePage.nodes.push(node);\n    }\n    await this.addChildRelation(parentId, node.index);\n    NodePages.updateResourceInMesh(node);\n    await this.saveNode(node);\n    return node;\n  }\n\n  /**\n   * Save node to the file on the disk\n   * @param node - node data\n   */\n  async saveNode(node: NodeInPage): Promise<void> {\n    if (!this.converter.options.instantNodeWriting) {\n      return;\n    } else {\n      const nodePageIndex = this.getPageIndexByNodeId(node.index);\n      const nodePage = await this.getPageByNodeId(node.index);\n      const {filePath, fileName} = this.getNodePageFileName(nodePageIndex);\n      const nodeToUpdate = await this.getNodeById(node.index, nodePage);\n      if (nodeToUpdate) {\n        NodePages.updateAll(nodeToUpdate, node);\n      } else {\n        nodePage.nodes.push(node);\n      }\n      const nodePageStr = JSON.stringify(nodePage);\n      if (this.converter.options.slpk) {\n        await this.converter.writeQueue.enqueue(\n          {\n            archiveKey: `nodePages/${nodePageIndex.toString()}.json.gz`,\n            writePromise: () =>\n              this.writeFile(filePath, nodePageStr, fileName, true, this.converter.compressList)\n          },\n          true\n        );\n      } else {\n        await this.converter.writeQueue.enqueue(\n          {\n            writePromise: () => this.writeFile(filePath, nodePageStr)\n          },\n          true\n        );\n      }\n    }\n  }\n\n  /**\n   * Save metadata file (for slpk only)\n   */\n  async saveMetadata(): Promise<void> {\n    const metadata = transform({nodeCount: this.nodesCounter}, metadataTemplate());\n    const compress = false;\n    await this.converter.writeQueue.enqueue({\n      archiveKey: 'metadata.json',\n      writePromise: () =>\n        this.writeFile(\n          this.converter.layers0Path,\n          JSON.stringify(metadata),\n          'metadata.json',\n          compress\n        )\n    });\n  }\n\n  /**\n   * Save all the node pages\n   * Run this method when all nodes is pushed in nodePages\n   */\n  async save(): Promise<void> {\n    if (this.converter.options.instantNodeWriting) {\n      await this.saveMetadata();\n      return;\n    }\n    if (this.converter.options.slpk) {\n      for (const [index, nodePage] of this.nodePages.entries()) {\n        const nodePageStr = JSON.stringify(nodePage);\n        const slpkPath = join(this.converter.layers0Path, 'nodepages');\n        await this.converter.writeQueue.enqueue({\n          archiveKey: `nodePages/${index.toString()}.json.gz`,\n          writePromise: () => this.writeFile(slpkPath, nodePageStr, `${index.toString()}.json`)\n        });\n      }\n      await this.saveMetadata();\n    } else {\n      for (const [index, nodePage] of this.nodePages.entries()) {\n        const nodePageStr = JSON.stringify(nodePage);\n        const nodePagePath = join(this.converter.layers0Path, 'nodepages', index.toString());\n        await this.converter.writeQueue.enqueue({\n          writePromise: () => this.writeFile(nodePagePath, nodePageStr)\n        });\n      }\n    }\n  }\n\n  /**\n   * Update resource index in node.mesh object\n   * @param node - node object\n   */\n  static updateResourceInMesh(node: NodeInPage): void {\n    if (node.mesh && isFinite(node.index)) {\n      node.mesh.geometry.resource = node.index;\n    }\n  }\n\n  /**\n   * Update all fields in the node excluding id\n   * @param node - node object\n   * @param data - NodeInPage data to replace original data\n   */\n  static updateAll(node: NodeInPage, data: NodeInPage): NodeInPage {\n    Object.assign(node, data, {index: node.index});\n    NodePages.updateResourceInMesh(node);\n    return node;\n  }\n\n  /**\n   * Update material in node.mesh object by node id\n   * @param id - end-to-end index of the node\n   * @param materialId - id from scene layer materialDefinitions\n   */\n  static updateMaterialByNodeId(node: NodeInPage, materialId: number): void {\n    if (!node.mesh) {\n      return;\n    }\n    node.mesh.material = {\n      definition: materialId,\n      resource: node.index\n    };\n  }\n\n  /**\n   * Update vertexCount in node.mesh.geometry object by node id\n   * @param id - end-to-end index of the node\n   * @param vertexCount - vertex count for particular node\n   */\n  static updateVertexCountByNodeId(node: NodeInPage, vertexCount: number): void {\n    if (!node.mesh) {\n      return;\n    }\n    node.mesh.geometry.vertexCount = vertexCount;\n  }\n\n  /**\n   * Update resource in node.mesh.attribute object by node id\n   * @param node - node object\n   */\n  static updateNodeAttributeByNodeId(node: NodeInPage): void {\n    if (!node.mesh || !node.index) {\n      return;\n    }\n    node.mesh.attribute.resource = node.index;\n  }\n\n  /**\n   * Update featureCount in node.mesh.geometry object by node id\n   * @param node - node object\n   * @param featureCount - features count of the node\n   */\n  static updateFeatureCountByNodeId(node: NodeInPage, featureCount: number): void {\n    if (!node.mesh) {\n      return;\n    }\n    node.mesh.geometry.featureCount = featureCount;\n  }\n\n  /**\n   * Update texelCountHint in node.mesh.material object by node id\n   * @param node - node object\n   * @param texelCountHint - texelCountHint of particular node\n   */\n  static updateTexelCountHintByNodeId(node: NodeInPage, texelCountHint: number): void {\n    if (!node.mesh || !node.mesh.material) {\n      return;\n    }\n    node.mesh.material.texelCountHint = texelCountHint;\n  }\n}\n"],"mappings":"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"}