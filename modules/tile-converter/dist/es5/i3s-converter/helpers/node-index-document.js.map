{"version":3,"file":"node-index-document.js","names":["_path","require","_jsonMapTransform","_interopRequireDefault","_uuid","_fileUtils","_node","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","NodeIndexDocument","id","converter","_classCallCheck2","inPageId","_createClass2","_addData","_asyncToGenerator2","_regenerator","mark","_callee","data","wrap","_callee$","_context","prev","options","instantNodeWriting","write","abrupt","stop","addData","_x","_addChildren","_callee2","childNodes","newChildren","_iterator","_step","node","nodeData","_data$children","_callee2$","_context2","load","sent","href","concat","obb","mbs","t0","finish","children","addChildren","_x2","_addNeighbors","_callee3","_iterator2","_step2","_childNodeData$neighb","_nodeData$children","childNode","childNodeData","_iterator3","_step3","neighbor","_callee3$","_context3","neighbors","Number","console","warn","save","flush","t1","addNeighbors","_save","_callee4","_callee4$","_context4","_write","_callee5","_this","path","_callee5$","_context5","join","layers0Path","slpk","writeQueue","enqueue","archiveKey","writePromise","writeFileForSlpk","JSON","stringify","compressList","writeFile","_x3","_load","_callee6","parentNodePath","parentNodeFileName","_callee6$","_context6","openJson","_createRootNode","_callee7","boundingVolumes","rootData","rootNode","_callee7$","_context7","createRootNodeIndexDocument","createRootNode","_x4","_x5","_createNode","_callee8","parentNode","lodSelection","nodeInPage","resources","_callee8$","_context8","createNodeIndexDocument","index","createNode","_x6","_x7","_x8","_x9","_x10","_x11","root0data","version","uuidv4","toUpperCase","level","metricType","maxError","transform","nodeTemplate","_createNodeIndexDocument","_callee9","texture","attributes","nodeId","parentNodeData","_parentNode$converter","_parentNode$converter2","folderName","_callee9$","_context9","mesh","geometryData","sharedResource","textureData","layers0","attributeStorageInfo","attributeData","_x12","_x13","_x14","_x15","_x16","exports"],"sources":["../../../../src/i3s-converter/helpers/node-index-document.ts"],"sourcesContent":["import {join} from 'path';\nimport {\n  BoundingVolumes,\n  LodSelection,\n  Node3DIndexDocument,\n  NodeInPage,\n  NodeReference\n} from '@loaders.gl/i3s';\nimport transform from 'json-map-transform';\nimport {v4 as uuidv4} from 'uuid';\nimport {openJson, writeFile, writeFileForSlpk} from '../../lib/utils/file-utils';\nimport I3SConverter from '../i3s-converter';\nimport {NODE as nodeTemplate} from '../json-templates/node';\nimport {I3SConvertedResources} from '../types';\n\n/**\n * Wrapper for https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DNodeIndexDocument.cmn.md data\n * The class allows working with 3DNodeIndexDocument in 2 modes:\n * in memory: the data is stored in `data` field\n * on disk: the data is written on disk in a file. The file can be rewritten when new childrend or neighbors have to be added\n */\nexport class NodeIndexDocument {\n  /** Node id */\n  public id: string;\n  /** Id in node pages */\n  public inPageId: number;\n  /** 3DNodeIndexDocument data */\n  public data: Node3DIndexDocument | null = null;\n  /** children */\n  public children: NodeIndexDocument[] = [];\n  /** converter instance */\n  private converter: I3SConverter;\n\n  /**\n   * Constructor\n   * @param id - id of the node in node pages\n   * @param converter - converter instance\n   */\n  constructor(id: number, converter: I3SConverter) {\n    this.inPageId = id;\n    this.id = id === 0 ? 'root' : id.toString();\n    this.converter = converter;\n  }\n\n  /**\n   * Add Node3DIndexDocument data to the node\n   * @param data Node3DIndexDocument data\n   * @returns this NodeIndexDocument instance (to recurring with constructor)\n   */\n  public async addData(data: Node3DIndexDocument): Promise<NodeIndexDocument> {\n    if (this.converter.options.instantNodeWriting) {\n      await this.write(data);\n    } else {\n      this.data = data;\n    }\n    return this;\n  }\n\n  /**\n   * Add child node references\n   * @param childNodes - child NodeIndexDocument instances\n   */\n  public async addChildren(childNodes: NodeIndexDocument[]): Promise<void> {\n    const newChildren: NodeReference[] = [];\n    for (const node of childNodes) {\n      const nodeData = await node.load();\n      newChildren.push({\n        id: node.id,\n        href: `../${node.id}`,\n        obb: nodeData.obb,\n        mbs: nodeData.mbs\n      });\n    }\n    this.children = this.children.concat(childNodes);\n\n    let data: Node3DIndexDocument | null = this.data;\n    if (this.converter.options.instantNodeWriting) {\n      data = (await this.load()) as Node3DIndexDocument;\n    }\n    if (data) {\n      data.children = data.children ?? [];\n      data.children = data.children.concat(newChildren);\n    }\n    if (this.converter.options.instantNodeWriting && data) {\n      await this.write(data);\n    }\n  }\n\n  /**\n   * Add neighbors to child nodes of this node\n   */\n  public async addNeighbors(): Promise<void> {\n    const nodeData = await this.load();\n    for (const childNode of this.children) {\n      const childNodeData = await childNode.load();\n      childNodeData.neighbors = childNodeData.neighbors ?? [];\n\n      // Don't do large amount of \"neightbors\" to avoid big memory consumption\n      if (Number(nodeData?.children?.length) < 1000) {\n        for (const neighbor of nodeData.children || []) {\n          if (childNode.id === neighbor.id) {\n            continue; // eslint-disable-line\n          }\n\n          childNodeData.neighbors.push({...neighbor});\n        }\n      } else {\n        // eslint-disable-next-line no-console, no-undef\n        console.warn(\n          `Node ${childNode.id}: neighbors attribute is omited because of large number of neigbors`\n        );\n        delete childNodeData.neighbors;\n      }\n\n      if (this.converter.options.instantNodeWriting && childNodeData) {\n        await childNode.write(childNodeData);\n      }\n      await childNode.save();\n      // The save after adding neighbors is the last one. Flush the the node\n      childNode.flush();\n    }\n  }\n\n  /** Save 3DNodeIndexDocument in file on disk */\n  public async save(): Promise<void> {\n    if (this.data) {\n      await this.write(this.data);\n    }\n  }\n\n  /**\n   * Write 3DNodeIndexDocument https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DNodeIndexDocument.cmn.md\n   * @param node - Node3DIndexDocument object\n   */\n  private async write(node: Node3DIndexDocument): Promise<void> {\n    const path = join(this.converter.layers0Path, 'nodes', this.id);\n    if (this.converter.options.slpk) {\n      await this.converter.writeQueue.enqueue(\n        {\n          archiveKey: `nodes/${this.id}/3dNodeIndexDocument.json.gz`,\n          writePromise: () =>\n            writeFileForSlpk(\n              path,\n              JSON.stringify(node),\n              '3dNodeIndexDocument.json',\n              true,\n              this.converter.compressList\n            )\n        },\n        true\n      );\n    } else {\n      await this.converter.writeQueue.enqueue(\n        {writePromise: () => writeFile(path, JSON.stringify(node))},\n        true\n      );\n    }\n  }\n\n  /**\n   * Load 3DNodeIndexDocument data from file on disk\n   * @returns 3DNodeIndexDocument object\n   */\n  private async load(): Promise<Node3DIndexDocument> {\n    if (this.data) {\n      return this.data;\n    }\n    const path = this.id;\n    const parentNodePath = join(this.converter.layers0Path, 'nodes', path);\n    let parentNodeFileName = 'index.json';\n    if (this.converter.options.slpk) {\n      parentNodeFileName = '3dNodeIndexDocument.json';\n    }\n    return (await openJson(parentNodePath, parentNodeFileName)) as Node3DIndexDocument;\n  }\n\n  /**\n   * Unload the Node data\n   */\n  private flush(): void {\n    this.data = null;\n  }\n\n  /**\n   * Create root node of the tree\n   * @param boundingVolumes - MBS and OOB bounding volumes data\n   * @param converter - I3SConverter instance\n   * @returns instance of NodeIndexDocument\n   */\n  static async createRootNode(\n    boundingVolumes: BoundingVolumes,\n    converter: I3SConverter\n  ): Promise<NodeIndexDocument> {\n    const rootData = NodeIndexDocument.createRootNodeIndexDocument(boundingVolumes);\n    const rootNode = await new NodeIndexDocument(0, converter).addData(rootData);\n    return rootNode;\n  }\n\n  /**\n   * Create NodeIndexDocument instance\n   * @param parentNode - parent NodeIndexDocument\n   * @param boundingVolumes - MBS and OOB bounding volumes data\n   * @param lodSelection - LOD metrics data\n   * @param nodeInPage - node data in node pages\n   * @param resources - resources extracted from gltf/b3dm file\n   * @param converter - I3SConverter instance\n   * @returns NodeIndexDocument instance\n   */\n  static async createNode(\n    parentNode: NodeIndexDocument,\n    boundingVolumes: BoundingVolumes,\n    lodSelection: LodSelection[],\n    nodeInPage: NodeInPage,\n    resources: I3SConvertedResources,\n    converter: I3SConverter\n  ): Promise<NodeIndexDocument> {\n    const data = await NodeIndexDocument.createNodeIndexDocument(\n      parentNode,\n      boundingVolumes,\n      lodSelection,\n      nodeInPage,\n      resources\n    );\n    const node = await new NodeIndexDocument(nodeInPage.index, converter).addData(data);\n    return node;\n  }\n\n  /**\n   * Form 3DNodeIndexDocument data for the root node\n   * @param boundingVolumes - mbs and obb data about node's bounding volume\n   * @return 3DNodeIndexDocument data https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DNodeIndexDocument.cmn.md\n   */\n  static createRootNodeIndexDocument(boundingVolumes: BoundingVolumes): Node3DIndexDocument {\n    const root0data = {\n      version: `{${uuidv4().toUpperCase()}}`,\n      id: 'root',\n      level: 0,\n      lodSelection: [\n        {\n          metricType: 'maxScreenThresholdSQ',\n          maxError: 0\n        },\n        {\n          metricType: 'maxScreenThreshold',\n          maxError: 0\n        }\n      ],\n      ...boundingVolumes,\n      children: []\n    };\n    return transform(root0data, nodeTemplate());\n  }\n\n  /**\n   * Create a new Node3DIndexDocument\n   * @param parentNode - 3DNodeIndexDocument https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DNodeIndexDocument.cmn.md object of the parent node\n   * @param boundingVolumes - Bounding volumes\n   * @param lodSelection - Level of Details (LOD) metrics\n   * @param nodeInPage - corresponding node object in a node page\n   * @param resources - the node resources data\n   * @param resources.texture - texture image\n   * @param resources.attributes - feature attributes\n   * @return 3DNodeIndexDocument https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DNodeIndexDocument.cmn.md object\n   */\n  static async createNodeIndexDocument(\n    parentNode: NodeIndexDocument,\n    boundingVolumes: BoundingVolumes,\n    lodSelection: LodSelection[],\n    nodeInPage: NodeInPage,\n    resources: I3SConvertedResources\n  ): Promise<Node3DIndexDocument> {\n    const {texture, attributes} = resources;\n    const nodeId = nodeInPage.index!;\n    const parentNodeData = await parentNode.load();\n    const nodeData = {\n      version: parentNodeData.version,\n      id: nodeId.toString(),\n      level: parentNodeData.level! + 1,\n      ...boundingVolumes,\n      lodSelection,\n      parentNode: {\n        id: parentNode.id,\n        href: `../${parentNode.id}`,\n        mbs: parentNodeData.mbs,\n        obb: parentNodeData.obb\n      },\n      children: [],\n      neighbors: []\n    };\n    const node = transform(nodeData, nodeTemplate());\n\n    if (nodeInPage.mesh) {\n      node.geometryData = [{href: './geometries/0'}];\n      node.sharedResource = {href: './shared'};\n\n      if (texture) {\n        node.textureData = [{href: './textures/0'}, {href: './textures/1'}];\n      }\n\n      if (\n        attributes &&\n        attributes.length &&\n        parentNode.converter.layers0?.attributeStorageInfo?.length\n      ) {\n        node.attributeData = [];\n        for (let index = 0; index < attributes.length; index++) {\n          const folderName = parentNode.converter.layers0.attributeStorageInfo[index].key;\n          node.attributeData.push({href: `./attributes/${folderName}/0`});\n        }\n      }\n    }\n\n    return node;\n  }\n}\n"],"mappings":"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"}