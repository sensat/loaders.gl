{"version":3,"file":"feature-attributes.js","names":["flattenPropertyTableByFeatureIds","featureIds","propertyTable","resultPropertyTable","propertyName","properties","getPropertiesByFeatureIds","resultProperties","_iterator","_createForOfIteratorHelper","_step","s","n","done","featureId","value","property","push","err","e","f","checkPropertiesLength","needFlatten","_i","_Object$values","Object","values","length","attribute","STRING_TYPE","SHORT_INT_TYPE","DOUBLE_TYPE","OBJECT_ID_TYPE","getAttributeType","key","_typeof2","default","Number","isInteger","createdStorageAttribute","attributeIndex","attributeType","storageAttribute","concat","name","ordering","header","valueType","attributeValues","valuesPerElement","setupIdAttribute","setupStringAttribute","setupDoubleAttribute","getFieldAttributeType","createFieldAttribute","fieldAttributeType","type","alias","createPopupInfo","title","mediaInfos","fieldInfos","popupElements","expressionInfos","fieldName","visible","isEditable","label","unshift","encoding","attributeByteCounts"],"sources":["../../../../src/i3s-converter/helpers/feature-attributes.ts"],"sourcesContent":["import type {FeatureTableJson} from '@loaders.gl/3d-tiles';\nimport {\n  Attribute,\n  AttributeStorageInfo,\n  ESRIField,\n  Field,\n  FieldInfo,\n  PopupInfo\n} from '@loaders.gl/i3s';\n\n/**\n * Takes attributes from property table based on featureIds.\n * If there is no property value for particular featureId (index) the property will be null.\n * Example:\n * Initial data:\n *   OBJECTID: [0, 1, 5]\n *   component: ['Windows', 'Frames', 'Wall', 'Roof', 'Skylight']\n * Result:\n *   OBJECTID: [0, 1, 5]\n *   component: ['Windows', 'Frames', 'null']\n * @param featureIds\n * @param propertyTable\n */\nexport function flattenPropertyTableByFeatureIds(\n  featureIds: number[],\n  propertyTable: FeatureTableJson\n): FeatureTableJson {\n  const resultPropertyTable: FeatureTableJson = {};\n  for (const propertyName in propertyTable) {\n    const properties = propertyTable[propertyName];\n    resultPropertyTable[propertyName] = getPropertiesByFeatureIds(properties, featureIds);\n  }\n\n  return resultPropertyTable;\n}\n\n/**\n * Getting properties by featureId index\n * @param properties\n * @param featureIds\n */\nfunction getPropertiesByFeatureIds(properties: any[], featureIds: number[]): any[] {\n  const resultProperties: any = [];\n\n  for (const featureId of featureIds) {\n    const property = properties[featureId] || null;\n    resultProperties.push(property);\n  }\n\n  return resultProperties;\n}\n\n/**\n * Check that all attributes in propertyTable have the same length as FeatureIds.\n * If there are differencies between lengths we should flatten property table based on exiesting featureIds.\n * @param featureIds\n * @param propertyTable\n * @returns\n */\nexport function checkPropertiesLength(\n  featureIds: number[],\n  propertyTable: FeatureTableJson\n): boolean {\n  let needFlatten = false;\n\n  for (const attribute of Object.values(propertyTable)) {\n    if (featureIds.length !== attribute.length) {\n      needFlatten = true;\n    }\n  }\n\n  return needFlatten;\n}\n\n/** String data type name for feature attributes */\nconst STRING_TYPE = 'string';\n/** Integer data type name for feature attributes */\nconst SHORT_INT_TYPE = 'Int32';\n/** Double data type name for feature attributes */\nconst DOUBLE_TYPE = 'double';\n/** Type of attribute that is linked with feature ids */\nconst OBJECT_ID_TYPE = 'OBJECTID';\n/**\n * Get the attribute type for attributeStorageInfo https://github.com/Esri/i3s-spec/blob/master/docs/1.7/attributeStorageInfo.cmn.md\n * @param key - attribute's key\n * @param attribute - attribute's type in propertyTable\n */\nexport function getAttributeType(key: string, attribute: string): string {\n  if (key === OBJECT_ID_TYPE) {\n    return OBJECT_ID_TYPE;\n  }\n  if (typeof attribute === STRING_TYPE) {\n    return STRING_TYPE;\n  } else if (typeof attribute === 'number') {\n    return Number.isInteger(attribute) ? SHORT_INT_TYPE : DOUBLE_TYPE;\n  }\n  return STRING_TYPE;\n}\n\n/**\n * Generate storage attribute for map segmentation.\n * @param attributeIndex - order index of attribute (f_0, f_1 ...).\n * @param key - attribute key from propertyTable.\n * @param attributeType - attribute type.\n * @return Updated storageAttribute.\n */\nexport function createdStorageAttribute(\n  attributeIndex: number,\n  key: string,\n  attributeType: Attribute\n): AttributeStorageInfo {\n  const storageAttribute = {\n    key: `f_${attributeIndex}`,\n    name: key,\n    ordering: ['attributeValues'],\n    header: [{property: 'count', valueType: 'UInt32'}],\n    attributeValues: {valueType: 'Int32', valuesPerElement: 1}\n  };\n\n  switch (attributeType) {\n    case OBJECT_ID_TYPE:\n      setupIdAttribute(storageAttribute);\n      break;\n    case STRING_TYPE:\n      setupStringAttribute(storageAttribute);\n      break;\n    case DOUBLE_TYPE:\n      setupDoubleAttribute(storageAttribute);\n      break;\n    case SHORT_INT_TYPE:\n      break;\n    default:\n      setupStringAttribute(storageAttribute);\n  }\n\n  return storageAttribute;\n}\n\n/**\n * Find and return attribute type based on key form propertyTable.\n * @param attributeType\n */\nexport function getFieldAttributeType(attributeType: Attribute): ESRIField {\n  switch (attributeType) {\n    case OBJECT_ID_TYPE:\n      return 'esriFieldTypeOID';\n    case STRING_TYPE:\n      return 'esriFieldTypeString';\n    case SHORT_INT_TYPE:\n      return 'esriFieldTypeInteger';\n    case DOUBLE_TYPE:\n      return 'esriFieldTypeDouble';\n    default:\n      return 'esriFieldTypeString';\n  }\n}\n\n/**\n * Setup field attribute for map segmentation.\n * @param key - attribute for map segmentation.\n * @param fieldAttributeType - esri attribute type ('esriFieldTypeString' or 'esriFieldTypeOID').\n */\nexport function createFieldAttribute(key: string, fieldAttributeType: ESRIField): Field {\n  return {\n    name: key,\n    type: fieldAttributeType,\n    alias: key\n  };\n}\n\n/**\n * Generate popup info to show metadata on the map.\n * @param propertyTable - table data with OBJECTID.\n * @return data for correct rendering of popup.\n */\nexport function createPopupInfo(propertyTable: FeatureTableJson): PopupInfo {\n  const title = '{OBJECTID}';\n  const mediaInfos = [];\n  const fieldInfos: FieldInfo[] = [];\n  const popupElements: {\n    fieldInfos: FieldInfo[];\n    type: string;\n  }[] = [];\n  const expressionInfos = [];\n\n  for (const key in propertyTable) {\n    fieldInfos.push({\n      fieldName: key,\n      visible: true,\n      isEditable: false,\n      label: key\n    });\n  }\n  popupElements.push({\n    fieldInfos,\n    type: 'fields'\n  });\n\n  return {\n    title,\n    mediaInfos,\n    popupElements,\n    fieldInfos,\n    expressionInfos\n  };\n}\n\n/**\n * Setup storage attribute as string.\n * @param storageAttribute - attribute for map segmentation.\n */\nfunction setupStringAttribute(storageAttribute: AttributeStorageInfo): void {\n  // @ts-expect-error\n  storageAttribute.ordering.unshift('attributeByteCounts');\n  storageAttribute.header.push({property: 'attributeValuesByteCount', valueType: 'UInt32'});\n  storageAttribute.attributeValues = {\n    valueType: 'String',\n    encoding: 'UTF-8',\n    valuesPerElement: 1\n  };\n  storageAttribute.attributeByteCounts = {\n    valueType: 'UInt32',\n    valuesPerElement: 1\n  };\n}\n\n/**\n * Setup Id attribute for map segmentation.\n * @param storageAttribute - attribute for map segmentation .\n */\nfunction setupIdAttribute(storageAttribute: AttributeStorageInfo): void {\n  storageAttribute.attributeValues = {\n    valueType: 'Oid32',\n    valuesPerElement: 1\n  };\n}\n\n/**\n * Setup double attribute for map segmentation.\n * @param storageAttribute - attribute for map segmentation .\n */\nfunction setupDoubleAttribute(storageAttribute: AttributeStorageInfo): void {\n  storageAttribute.attributeValues = {\n    valueType: 'Float64',\n    valuesPerElement: 1\n  };\n}\n"],"mappings":"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"}