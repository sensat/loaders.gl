{"version":3,"file":"coordinate-converter.js","names":["_core","require","_geospatial","_culling","createBoundingVolumes","tile","geoidHeightModel","radius","halfSize","quaternion","boundingVolume","cartographicCenter","Ellipsoid","WGS84","cartesianToCartographic","center","Vector3","getHeight","OrientedBoundingBox","len","Quaternion","fromMatrix3","Matrix3","normalize","mbs","obb","createBoundingVolumesFromGeometry","cartesianPositions","positionVectors","convertPositionsToVectors","geometryObb","makeOrientedBoundingBoxFromPoints","geometryMbs","makeBoundingSphereFromPoints","mbsCenter","obbCenter","positions","result","i","length","positionVector","push","convertBoundingVolumeToI3SFullExtent","sphere","BoundingSphere","getBoundingSphere","vertexMax","vertexMin","xmin","Math","min","xmax","max","ymin","ymax","zmin","zmax","createObbFromMbs","halfAxex"],"sources":["../../../../src/i3s-converter/helpers/coordinate-converter.ts"],"sourcesContent":["import type {BoundingVolumes, FullExtent, Mbs, Obb} from '@loaders.gl/i3s';\n\nimport {Matrix3, Quaternion, Vector3} from '@math.gl/core';\nimport {Ellipsoid} from '@math.gl/geospatial';\nimport {\n  OrientedBoundingBox,\n  makeOrientedBoundingBoxFromPoints,\n  makeBoundingSphereFromPoints,\n  BoundingSphere\n} from '@math.gl/culling';\nimport {Tile3D} from '@loaders.gl/tiles';\nimport {Geoid} from '@math.gl/geoid';\n\n/**\n * Create bounding volumes object from tile and geoid height model.\n * @param tile\n * @param geoidHeightModel\n * @returns - Bounding volumes object\n */\nexport function createBoundingVolumes(tile: Tile3D, geoidHeightModel: Geoid): BoundingVolumes {\n  let radius;\n  let halfSize;\n  let quaternion;\n\n  const boundingVolume = tile.boundingVolume;\n  const cartographicCenter = Ellipsoid.WGS84.cartesianToCartographic(\n    boundingVolume.center,\n    new Vector3()\n  );\n  cartographicCenter[2] =\n    cartographicCenter[2] -\n    geoidHeightModel.getHeight(cartographicCenter[1], cartographicCenter[0]);\n  if (boundingVolume instanceof OrientedBoundingBox) {\n    halfSize = boundingVolume.halfSize;\n    radius = new Vector3(halfSize[0], halfSize[1], halfSize[2]).len();\n    quaternion = boundingVolume.quaternion;\n  } else {\n    radius = tile.boundingVolume.radius;\n    halfSize = [radius, radius, radius];\n    quaternion = new Quaternion()\n      .fromMatrix3(new Matrix3([halfSize[0], 0, 0, 0, halfSize[1], 0, 0, 0, halfSize[2]]))\n      .normalize();\n  }\n\n  return {\n    mbs: [cartographicCenter[0], cartographicCenter[1], cartographicCenter[2], radius],\n    obb: {\n      center: [cartographicCenter[0], cartographicCenter[1], cartographicCenter[2]],\n      halfSize,\n      quaternion\n    }\n  };\n}\n\n/**\n * Generates bounding volumes from geometry positions\n * @param cartesianPositions\n * @param geoidHeightModel\n */\nexport function createBoundingVolumesFromGeometry(\n  cartesianPositions: Float32Array,\n  geoidHeightModel: Geoid\n): {mbs: Mbs; obb: Obb} {\n  const positionVectors = convertPositionsToVectors(cartesianPositions);\n\n  const geometryObb = makeOrientedBoundingBoxFromPoints(positionVectors);\n  const geometryMbs = makeBoundingSphereFromPoints(positionVectors);\n\n  let mbsCenter = Ellipsoid.WGS84.cartesianToCartographic(geometryMbs.center, new Vector3());\n  let obbCenter = Ellipsoid.WGS84.cartesianToCartographic(geometryObb.center, new Vector3());\n\n  mbsCenter[2] = mbsCenter[2] - geoidHeightModel.getHeight(mbsCenter[1], mbsCenter[0]);\n  obbCenter[2] = obbCenter[2] - geoidHeightModel.getHeight(obbCenter[1], obbCenter[0]);\n\n  return {\n    mbs: [mbsCenter[0], mbsCenter[1], mbsCenter[2], geometryMbs.radius],\n    obb: {\n      center: obbCenter,\n      halfSize: geometryObb.halfSize,\n      quaternion: geometryObb.quaternion\n    }\n  };\n}\n\n/**\n * Create array of posisitons where each vertex is vector\n * @param {array} positions\n * @returns {Vector3[]}\n */\nexport function convertPositionsToVectors(positions: Float32Array): Vector3[] {\n  const result: Vector3[] = [];\n\n  for (let i = 0; i < positions.length; i += 3) {\n    // TODO: (perf) new Vector3 is not optimal but required in `makeOrientedBoundingBoxFromPoints`.\n    // modify `makeOrientedBoundingBoxFromPoints` to use scratch vectors\n    const positionVector = new Vector3([positions[i], positions[i + 1], positions[i + 2]]);\n    result.push(positionVector);\n  }\n\n  return result;\n}\n\n/**\n * Convert common coordinate to fullExtent https://github.com/Esri/i3s-spec/blob/master/docs/1.8/fullExtent.cmn.md\n * @param\n * @param boundingVolume\n * @returns - fullExtent object\n */\nexport function convertBoundingVolumeToI3SFullExtent(\n  boundingVolume: OrientedBoundingBox | BoundingSphere\n): FullExtent {\n  let sphere: BoundingSphere;\n  if (boundingVolume instanceof BoundingSphere) {\n    sphere = boundingVolume;\n  } else {\n    sphere = boundingVolume.getBoundingSphere();\n  }\n  const center: Vector3 = sphere.center;\n  const radius: number = sphere.radius;\n  const vertexMax = Ellipsoid.WGS84.cartesianToCartographic(\n    new Vector3(center[0] + radius, center[1] + radius, center[2] + radius),\n    new Vector3()\n  );\n  const vertexMin = Ellipsoid.WGS84.cartesianToCartographic(\n    new Vector3(center[0] - radius, center[1] - radius, center[2] - radius),\n    new Vector3()\n  );\n\n  // Converter sometimes returns min values that are bigger then max,\n  // so we should check and take bigger value from max and smaller for nim\n  return {\n    xmin: Math.min(vertexMin[0], vertexMax[0]),\n    xmax: Math.max(vertexMin[0], vertexMax[0]),\n    ymin: Math.min(vertexMin[1], vertexMax[1]),\n    ymax: Math.max(vertexMin[1], vertexMax[1]),\n    zmin: Math.min(vertexMin[2], vertexMax[2]),\n    zmax: Math.max(vertexMin[2], vertexMax[2])\n  };\n}\n\n/**\n * Creates oriented boundinb box from mbs.\n * @param mbs - Minimum Bounding Sphere\n * @returns - Oriented BOunding Box\n */\nexport function createObbFromMbs(mbs: Mbs): Obb {\n  const radius = mbs[3];\n  const center = new Vector3(mbs[0], mbs[1], mbs[2]);\n  const halfAxex = new Matrix3([radius, 0, 0, 0, radius, 0, 0, 0, radius]);\n  return new OrientedBoundingBox(center, halfAxex);\n}\n"],"mappings":"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"}