{"version":3,"file":"tileset-traversal.js","names":["traverseDatasetWith","_ref","_asyncToGenerator2","default","_regenerator","mark","_callee","tile","traversalProps","processTile","postprocessTile","maxDepth","level","processResults","newTraversalProps","_iterator","_step","childTile","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","abrupt","sent","push","_createForOfIteratorHelper","children","s","n","done","value","t0","e","f","finish","t1","stop","_x","_x2","_x3","_x4","_x5","apply","exports"],"sources":["../../../../src/i3s-converter/helpers/tileset-traversal.ts"],"sourcesContent":["import {Tiles3DTileJSONPostprocessed} from '@loaders.gl/3d-tiles';\nimport {NodeIndexDocument} from './node-index-document';\nimport {Matrix4} from '@math.gl/core';\n\n/** Traversal props for the conversion stage */\nexport type TraversalConversionProps = {\n  /** Transformation matrix for the specific tile */\n  transform: Matrix4;\n  /** Parent nodes of the converted tile. Multiple nodes can be if one tile is converted to multiple nodes*/\n  parentNodes: NodeIndexDocument[];\n};\n\n/**\n * Travesal of 3DTile tiles tree with making specific actions with each tile\n * @param tile - 3DTiles tile JSON metadata\n * @param traversalProps - traversal props used to pass data through recursive calls\n * @param processTile - callback to make some actions with the current tile\n * @param postprocessTile - callback to make some action after processing of the current tile and all the subtree\n * @param maxDepth - max recursive calls number the travesal function will do. If not set, the traversal function will\n *                   go through all the tree.\n *                   This value is used to limit the convertion with only partial number of levels of the tileset\n * @param level - counter to keep recursive calls number of the tiles tree. This value used to be able to break\n *                traversal at the some level of the tree\n * @returns void\n */\nexport const traverseDatasetWith = async <TProps>(\n  tile: Tiles3DTileJSONPostprocessed,\n  traversalProps: TProps,\n  processTile: (tile: Tiles3DTileJSONPostprocessed, traversalProps: TProps) => Promise<TProps>,\n  postprocessTile?: (processResults: TProps[], currentTraversalProps: TProps) => Promise<void>,\n  maxDepth?: number,\n  level = 0\n): Promise<void> => {\n  if (maxDepth && level > maxDepth) {\n    return;\n  }\n  const processResults: TProps[] = [];\n  const newTraversalProps: TProps = await processTile(tile, traversalProps);\n  processResults.push(newTraversalProps);\n  for (const childTile of tile.children) {\n    await traverseDatasetWith(\n      childTile,\n      newTraversalProps,\n      processTile,\n      postprocessTile,\n      maxDepth,\n      level + 1\n    );\n  }\n  postprocessTile && (await postprocessTile(processResults, traversalProps));\n};\n"],"mappings":";;;;;;;;;;;;AAyBO,IAAMA,mBAAmB;EAAA,IAAAC,IAAA,OAAAC,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAAG,SAAAC,QACjCC,IAAkC,EAClCC,cAAsB,EACtBC,WAA4F,EAC5FC,eAA4F,EAC5FC,QAAiB;IAAA,IAAAC,KAAA;MAAAC,cAAA;MAAAC,iBAAA;MAAAC,SAAA;MAAAC,KAAA;MAAAC,SAAA;MAAAC,KAAA,GAAAC,SAAA;IAAA,OAAAf,YAAA,CAAAD,OAAA,CAAAiB,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACjBZ,KAAK,GAAAM,KAAA,CAAAO,MAAA,QAAAP,KAAA,QAAAQ,SAAA,GAAAR,KAAA,MAAG,CAAC;UAAA,MAELP,QAAQ,IAAIC,KAAK,GAAGD,QAAQ;YAAAW,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAK,MAAA;QAAA;UAG1Bd,cAAwB,GAAG,EAAE;UAAAS,QAAA,CAAAE,IAAA;UAAA,OACKf,WAAW,CAACF,IAAI,EAAEC,cAAc,CAAC;QAAA;UAAnEM,iBAAyB,GAAAQ,QAAA,CAAAM,IAAA;UAC/Bf,cAAc,CAACgB,IAAI,CAACf,iBAAiB,CAAC;UAACC,SAAA,GAAAe,0BAAA,CACfvB,IAAI,CAACwB,QAAQ;UAAAT,QAAA,CAAAC,IAAA;UAAAR,SAAA,CAAAiB,CAAA;QAAA;UAAA,KAAAhB,KAAA,GAAAD,SAAA,CAAAkB,CAAA,IAAAC,IAAA;YAAAZ,QAAA,CAAAE,IAAA;YAAA;UAAA;UAA1BP,SAAS,GAAAD,KAAA,CAAAmB,KAAA;UAAAb,QAAA,CAAAE,IAAA;UAAA,OACZxB,mBAAmB,CACvBiB,SAAS,EACTH,iBAAiB,EACjBL,WAAW,EACXC,eAAe,EACfC,QAAQ,EACRC,KAAK,GAAG,CACV,CAAC;QAAA;UAAAU,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,QAAA,CAAAC,IAAA;UAAAD,QAAA,CAAAc,EAAA,GAAAd,QAAA;UAAAP,SAAA,CAAAsB,CAAA,CAAAf,QAAA,CAAAc,EAAA;QAAA;UAAAd,QAAA,CAAAC,IAAA;UAAAR,SAAA,CAAAuB,CAAA;UAAA,OAAAhB,QAAA,CAAAiB,MAAA;QAAA;UAAAjB,QAAA,CAAAkB,EAAA,GAEH9B,eAAe;UAAA,KAAAY,QAAA,CAAAkB,EAAA;YAAAlB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAAWd,eAAe,CAACG,cAAc,EAAEL,cAAc,CAAC;QAAA;QAAA;UAAA,OAAAc,QAAA,CAAAmB,IAAA;MAAA;IAAA,GAAAnC,OAAA;EAAA,CAC1E;EAAA,gBAzBYN,mBAAmBA,CAAA0C,EAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAA7C,IAAA,CAAA8C,KAAA,OAAA5B,SAAA;EAAA;AAAA,GAyB/B;AAAC6B,OAAA,CAAAhD,mBAAA,GAAAA,mBAAA"}