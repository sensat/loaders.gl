{"version":3,"file":"geometry-attributes.js","names":["_loaderUtils","require","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty2","default","getOwnPropertyDescriptors","defineProperties","defineProperty","VALUES_PER_VERTEX","POSITIONS_AND_NORMALS_PER_TRIANGLE","generateAttributes","attributes","positions","normals","texCoords","colors","uvRegions","featureIndices","triangleCount","faceRange","Uint32Array","featureIds","featureCount","data","calculateFaceRangesAndFeaturesCount","attributeObjects","makeAttributeObjects","unifiedAttributeObjectsByFeatureIds","unifyObjectsByFeatureId","groupedAttributes","groupAttributesAndRangesByFeatureId","rangeIndex","featureIndex","currentFeatureId","getFrequentValue","faceRangeList","uniqueFeatureIds","index","newFeatureId","includes","values","map","mostFrequentValue","maxCount","_iterator","_step","_attributes$faceRange","groupedData","positionsList","Float32Array","normalsList","colorsList","Uint8Array","texCoordsList","uvRegionsList","Uint16Array","startIndex","endIndex","positionsCount","getSliceAttributeCount","normalsCount","colorsCount","uvRegionsCount","texCoordsCount","featureId","sort","first","second","attributeName","itemsPerVertex4","texCoordsPerVertex","trianglesCount","vertexCount","sortedData","uniqueObjects","_loop","currentObject","existedObject","find","obj","concatenateTypedArrays","unifiedObjects","firstAttributeObject","range","objIndex","sum","currentAttributesObject","groupedObject"],"sources":["../../../../src/i3s-converter/helpers/geometry-attributes.ts"],"sourcesContent":["import type {GeometryAttributes, ConvertedAttributes, GroupedByFeatureIdAttributes} from '../types';\nimport {concatenateTypedArrays} from '@loaders.gl/loader-utils';\n\nconst VALUES_PER_VERTEX = 3;\nconst POSITIONS_AND_NORMALS_PER_TRIANGLE = 9;\n\n/**\n * Generate geometry attributes with faceRange and featureCount\n * @param attributes\n * @returns attirbutes with featureCount, featureIds and changed faceRange.\n */\nexport function generateAttributes(attributes: ConvertedAttributes): GeometryAttributes {\n  const {positions, normals, texCoords, colors, uvRegions, featureIndices} = attributes;\n  const triangleCount = positions.length / POSITIONS_AND_NORMALS_PER_TRIANGLE;\n\n  if (!featureIndices.length) {\n    return {\n      faceRange: new Uint32Array([0, triangleCount - 1]),\n      featureIds: [0],\n      featureCount: 1,\n      positions,\n      normals,\n      texCoords,\n      colors,\n      uvRegions\n    };\n  }\n\n  const data = calculateFaceRangesAndFeaturesCount(featureIndices);\n  const attributeObjects = makeAttributeObjects({...data, ...attributes});\n  const unifiedAttributeObjectsByFeatureIds = unifyObjectsByFeatureId(attributeObjects);\n  const groupedAttributes = groupAttributesAndRangesByFeatureId(\n    unifiedAttributeObjectsByFeatureIds,\n    data.featureCount\n  );\n  return groupedAttributes;\n}\n\n/**\n * Calculates face Ranges and feature count based on featureIndices.\n * @param featureIndices\n * @returns Object with featureCount, reordered attributes and changed faceRange.\n */\nfunction calculateFaceRangesAndFeaturesCount(featureIndices: number[]): {\n  faceRange: Uint32Array;\n  featureCount: number;\n  featureIds: number[];\n} {\n  let rangeIndex = 1;\n  let featureIndex = 1;\n  let currentFeatureId = getFrequentValue(featureIndices.slice(0, VALUES_PER_VERTEX));\n  const faceRangeList: any[] = [];\n  const featureIds: any[] = [];\n  const uniqueFeatureIds = [currentFeatureId];\n\n  faceRangeList[0] = 0;\n  featureIds[0] = currentFeatureId;\n\n  for (let index = VALUES_PER_VERTEX; index < featureIndices.length; index += VALUES_PER_VERTEX) {\n    const newFeatureId = getFrequentValue(featureIndices.slice(index, index + VALUES_PER_VERTEX));\n    if (currentFeatureId !== newFeatureId) {\n      faceRangeList[rangeIndex] = index / VALUES_PER_VERTEX - 1;\n      faceRangeList[rangeIndex + 1] = index / VALUES_PER_VERTEX;\n      featureIds[featureIndex] = newFeatureId;\n\n      if (!uniqueFeatureIds.includes(newFeatureId)) {\n        uniqueFeatureIds.push(newFeatureId);\n      }\n\n      rangeIndex += 2;\n      featureIndex += 1;\n    }\n    currentFeatureId = newFeatureId;\n  }\n\n  faceRangeList[rangeIndex] = featureIndices.length / VALUES_PER_VERTEX - 1;\n\n  const faceRange = new Uint32Array(faceRangeList);\n  const featureCount = uniqueFeatureIds.length;\n\n  return {faceRange, featureCount, featureIds};\n}\n\n/**\n * Find most frequent value to avoid situation where one vertex can be part of multiple features (objects).\n * @param values\n */\nfunction getFrequentValue(values: number[]): number {\n  const map: {[key: number]: number} = {};\n\n  let mostFrequentValue = values[0];\n  let maxCount = 1;\n\n  for (const value of values) {\n    // Save item and it's frequency count to the map.\n    map[value] = (map[value] || 0) + 1;\n    // Find max count of frequency.\n    maxCount = maxCount > map[value] ? maxCount : map[value];\n    // Find the most frequent value.\n    mostFrequentValue = maxCount > map[value] ? mostFrequentValue : value;\n  }\n\n  return mostFrequentValue;\n}\n\n/**\n * Generate list of attribute object grouped by feature ids.\n * @param  attributes\n * @returns sorted list of attribute objects.\n */\nfunction makeAttributeObjects(attributes: GeometryAttributes): GroupedByFeatureIdAttributes[] {\n  const {\n    featureIds,\n    positions,\n    normals,\n    colors,\n    uvRegions,\n    texCoords,\n    faceRange = new Uint32Array(0)\n  } = attributes;\n  const groupedData: GroupedByFeatureIdAttributes[] = [];\n\n  let positionsList = new Float32Array(positions);\n  let normalsList = new Float32Array(normals);\n  let colorsList = new Uint8Array(colors);\n  let texCoordsList = new Float32Array(texCoords);\n  let uvRegionsList = new Uint16Array(uvRegions);\n\n  for (let index = 0; index < featureIds.length; index++) {\n    const startIndex = faceRange[index * 2];\n    const endIndex = faceRange[index * 2 + 1];\n\n    const positionsCount = getSliceAttributeCount('positions', startIndex, endIndex);\n    const normalsCount = getSliceAttributeCount('normals', startIndex, endIndex);\n    const colorsCount = getSliceAttributeCount('colors', startIndex, endIndex);\n    const uvRegionsCount = getSliceAttributeCount('uvRegions', startIndex, endIndex);\n    const texCoordsCount = getSliceAttributeCount('texCoords', startIndex, endIndex);\n\n    groupedData.push({\n      featureId: featureIds[index],\n      positions: positionsList.slice(0, positionsCount),\n      normals: normalsList.slice(0, normalsCount),\n      colors: colorsList.slice(0, colorsCount),\n      uvRegions: uvRegionsList.slice(0, uvRegionsCount),\n      texCoords: texCoordsList.slice(0, texCoordsCount)\n    });\n\n    positionsList = positionsList.slice(positionsCount);\n    normalsList = normalsList.slice(normalsCount);\n    colorsList = colorsList.slice(colorsCount);\n    uvRegionsList = uvRegionsList.slice(uvRegionsCount);\n    texCoordsList = texCoordsList.slice(texCoordsCount);\n  }\n\n  return groupedData.sort((first, second) => first.featureId - second.featureId);\n}\n\n/**\n * Generate sliced count for generating attribute objects depends on attribute name and range.\n * @param attributeName\n * @param startIndex\n * @param endIndex\n * @returns sliced count\n */\nfunction getSliceAttributeCount(\n  attributeName: string,\n  startIndex: number,\n  endIndex: number\n): number {\n  const itemsPerVertex4 = 4;\n  const texCoordsPerVertex = 2;\n\n  const trianglesCount = endIndex - startIndex + 1;\n  const vertexCount = trianglesCount * 3;\n\n  switch (attributeName) {\n    case 'positions':\n    case 'normals':\n      return trianglesCount * POSITIONS_AND_NORMALS_PER_TRIANGLE;\n    case 'colors':\n    case 'uvRegions':\n      return vertexCount * itemsPerVertex4;\n    case 'texCoords':\n      return vertexCount * texCoordsPerVertex;\n    default:\n      return 0;\n  }\n}\n\n/**\n * Generates unique object list depends on feature ids and concantenate their attributes.\n * @param sortedData\n * @returns unique list of objects\n */\nfunction unifyObjectsByFeatureId(\n  sortedData: GroupedByFeatureIdAttributes[]\n): GroupedByFeatureIdAttributes[] {\n  const uniqueObjects: GroupedByFeatureIdAttributes[] = [];\n\n  for (let index = 0; index < sortedData.length; index++) {\n    const currentObject = sortedData[index];\n    const existedObject = uniqueObjects.find((obj) => obj.featureId === currentObject.featureId);\n\n    if (existedObject) {\n      existedObject.positions = concatenateTypedArrays(\n        existedObject.positions,\n        currentObject.positions\n      );\n      existedObject.normals = concatenateTypedArrays(existedObject.normals, currentObject.normals);\n      existedObject.colors = concatenateTypedArrays(existedObject.colors, currentObject.colors);\n      existedObject.texCoords = concatenateTypedArrays(\n        existedObject.texCoords,\n        currentObject.texCoords\n      );\n    } else {\n      uniqueObjects.push(currentObject);\n    }\n  }\n\n  return uniqueObjects;\n}\n\n/**\n * Generates attribute objects with new faceRange and reordered attributes.\n * @param unifiedObjects\n * @returns generated attributes with new faceRange.\n */\nfunction groupAttributesAndRangesByFeatureId(\n  unifiedObjects: GroupedByFeatureIdAttributes[],\n  featureCount: number\n): GeometryAttributes {\n  const firstAttributeObject = unifiedObjects[0];\n  const featureIds = [firstAttributeObject.featureId || 0];\n\n  let positions = new Float32Array(firstAttributeObject.positions);\n  let normals = new Float32Array(firstAttributeObject.normals);\n  let colors = new Uint8Array(firstAttributeObject.colors);\n  let uvRegions = new Uint16Array(firstAttributeObject.uvRegions);\n  let texCoords = new Float32Array(firstAttributeObject.texCoords);\n  const range = [0];\n\n  let objIndex = 0;\n  let sum = 0;\n\n  for (let index = 1; index < unifiedObjects.length; index++) {\n    const currentAttributesObject = unifiedObjects[index];\n    featureIds.push(currentAttributesObject.featureId || 0);\n\n    positions = concatenateTypedArrays(positions, currentAttributesObject.positions);\n    normals = concatenateTypedArrays(normals, currentAttributesObject.normals);\n    colors = concatenateTypedArrays(colors, currentAttributesObject.colors);\n    uvRegions = concatenateTypedArrays(uvRegions, currentAttributesObject.uvRegions);\n    texCoords = concatenateTypedArrays(texCoords, currentAttributesObject.texCoords);\n\n    const groupedObject = unifiedObjects[objIndex];\n    range.push(groupedObject.positions.length / POSITIONS_AND_NORMALS_PER_TRIANGLE - 1 + sum);\n    range.push(groupedObject.positions.length / POSITIONS_AND_NORMALS_PER_TRIANGLE + sum);\n\n    sum += groupedObject.positions.length / POSITIONS_AND_NORMALS_PER_TRIANGLE;\n    objIndex += 1;\n  }\n\n  range.push(positions.length / POSITIONS_AND_NORMALS_PER_TRIANGLE - 1);\n\n  const faceRange = new Uint32Array(range);\n  return {faceRange, featureIds, positions, normals, colors, uvRegions, texCoords, featureCount};\n}\n"],"mappings":"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"}