{"version":3,"file":"cli-utils.js","names":["getStringValue","index","args","length","value","indexOf","getURLValue","console","log","concat","replace","validateOptionsWithEqual","reduce","acc","curr","equalSignIndex","beforeEqual","slice","afterEqual","condition","includes","startsWith","getIntegerValue","stringValue","result","Number","parseInt","isFinite","NaN","getBooleanValue","toLowerCase","trim"],"sources":["../../../../src/lib/utils/cli-utils.ts"],"sourcesContent":["/**\n * Get string option value from cli arguments\n * @param index - option's name index in the argument's array.\n *                The value of the option should be next to name of the option.\n * @param args - cli arguments array\n * @returns - string value of the option\n */\nexport function getStringValue(index: number, args: string[]): string {\n  if (index + 1 >= args.length) {\n    return '';\n  }\n  const value = args[index + 1];\n  if (value.indexOf('--') === 0) {\n    return '';\n  }\n  return value;\n}\n\n/**\n * Modyfy URL path to be compatible with fetch\n * @param index - option's name index in the argument's array.\n *                The value of the option should be next to name of the option.\n * @param args - cli arguments array\n * @returns - string value of the option\n */\nexport function getURLValue(index: number, args: string[]): string {\n  const value = getStringValue(index, args);\n  console.log(`Input tileset value: ${value}`);\n  console.log(`Modified tileset value: ${value.replace(/\\\\/g, '/')}`);\n  return value.replace(/\\\\/g, '/');\n}\n\nexport function validateOptionsWithEqual(args: string[]): string[] {\n  return args.reduce((acc: string[], curr) => {\n    const equalSignIndex = curr.indexOf('=');\n    const beforeEqual = curr.slice(0, equalSignIndex);\n    const afterEqual = curr.slice(equalSignIndex + 1, curr.length);\n    const condition = curr.includes('=') && curr.startsWith('--') && afterEqual;\n    if (condition) {\n      return acc.concat(beforeEqual, afterEqual);\n    }\n    return acc.concat(curr);\n  }, []);\n}\n\n/**\n * Get integer option value from cli arguments\n * @param index - option's name index in the argument's array\n *                The value of the option should be next to name of the option.\n * @param args - cli arguments array\n * @returns - number value of the option\n */\nexport function getIntegerValue(index: number, args: string[]): number {\n  const stringValue: string = getStringValue(index, args);\n  const result: number = Number.parseInt(stringValue);\n  if (isFinite(result)) {\n    return result;\n  }\n  return NaN;\n}\n\n/**\n * Get boolean option value from cli arguments\n * @param index - option's name index in the argument's array\n *                The value of the option should be next to name of the option.\n * @param args - cli arguments array\n * @returns - boolean value of the option\n */\nexport function getBooleanValue(index: number, args: string[]): boolean {\n  const stringValue: string = getStringValue(index, args).toLowerCase().trim();\n  if (['--no-draco', '--split-nodes'].includes(args[index]) && !stringValue) {\n    return false;\n  }\n  if (!stringValue || stringValue === 'true') {\n    return true;\n  }\n  return false;\n}\n"],"mappings":";;;;;;;;;;AAOO,SAASA,cAAcA,CAACC,KAAa,EAAEC,IAAc,EAAU;EACpE,IAAID,KAAK,GAAG,CAAC,IAAIC,IAAI,CAACC,MAAM,EAAE;IAC5B,OAAO,EAAE;EACX;EACA,IAAMC,KAAK,GAAGF,IAAI,CAACD,KAAK,GAAG,CAAC,CAAC;EAC7B,IAAIG,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;IAC7B,OAAO,EAAE;EACX;EACA,OAAOD,KAAK;AACd;AASO,SAASE,WAAWA,CAACL,KAAa,EAAEC,IAAc,EAAU;EACjE,IAAME,KAAK,GAAGJ,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC;EACzCK,OAAO,CAACC,GAAG,yBAAAC,MAAA,CAAyBL,KAAK,CAAE,CAAC;EAC5CG,OAAO,CAACC,GAAG,4BAAAC,MAAA,CAA4BL,KAAK,CAACM,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAE,CAAC;EACnE,OAAON,KAAK,CAACM,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AAClC;AAEO,SAASC,wBAAwBA,CAACT,IAAc,EAAY;EACjE,OAAOA,IAAI,CAACU,MAAM,CAAC,UAACC,GAAa,EAAEC,IAAI,EAAK;IAC1C,IAAMC,cAAc,GAAGD,IAAI,CAACT,OAAO,CAAC,GAAG,CAAC;IACxC,IAAMW,WAAW,GAAGF,IAAI,CAACG,KAAK,CAAC,CAAC,EAAEF,cAAc,CAAC;IACjD,IAAMG,UAAU,GAAGJ,IAAI,CAACG,KAAK,CAACF,cAAc,GAAG,CAAC,EAAED,IAAI,CAACX,MAAM,CAAC;IAC9D,IAAMgB,SAAS,GAAGL,IAAI,CAACM,QAAQ,CAAC,GAAG,CAAC,IAAIN,IAAI,CAACO,UAAU,CAAC,IAAI,CAAC,IAAIH,UAAU;IAC3E,IAAIC,SAAS,EAAE;MACb,OAAON,GAAG,CAACJ,MAAM,CAACO,WAAW,EAAEE,UAAU,CAAC;IAC5C;IACA,OAAOL,GAAG,CAACJ,MAAM,CAACK,IAAI,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC;AACR;AASO,SAASQ,eAAeA,CAACrB,KAAa,EAAEC,IAAc,EAAU;EACrE,IAAMqB,WAAmB,GAAGvB,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC;EACvD,IAAMsB,MAAc,GAAGC,MAAM,CAACC,QAAQ,CAACH,WAAW,CAAC;EACnD,IAAII,QAAQ,CAACH,MAAM,CAAC,EAAE;IACpB,OAAOA,MAAM;EACf;EACA,OAAOI,GAAG;AACZ;AASO,SAASC,eAAeA,CAAC5B,KAAa,EAAEC,IAAc,EAAW;EACtE,IAAMqB,WAAmB,GAAGvB,cAAc,CAACC,KAAK,EAAEC,IAAI,CAAC,CAAC4B,WAAW,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;EAC5E,IAAI,CAAC,YAAY,EAAE,eAAe,CAAC,CAACX,QAAQ,CAAClB,IAAI,CAACD,KAAK,CAAC,CAAC,IAAI,CAACsB,WAAW,EAAE;IACzE,OAAO,KAAK;EACd;EACA,IAAI,CAACA,WAAW,IAAIA,WAAW,KAAK,MAAM,EAAE;IAC1C,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd"}