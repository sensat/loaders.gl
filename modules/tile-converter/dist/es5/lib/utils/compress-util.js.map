{"version":3,"file":"compress-util.js","names":["_zlib","require","_path","_fs","_archiver","_interopRequireDefault","_fileUtils","_workerUtils","_jszip","_crypto","_crypt","compressFileWithGzip","pathFile","compressedPathFile","concat","gzip","createGzip","input","createReadStream","output","createWriteStream","Promise","resolve","reject","on","console","log","error","pipe","compressFilesWithZip","_x","_x2","_compressFilesWithZip","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee2","fileMap","outputFile","level","archive","_args2","wrap","_callee2$","_context2","prev","next","length","undefined","removeFile","t0","archiver","zlib","abrupt","_ref","_callee","subFileName","subFileData","_callee$","_context","pointer","err","keys","t1","done","value","appendFileToArchive","finalize","stop","_x18","_x19","compressWithChildProcess","_x3","_x4","_x5","_x6","_x7","_compressWithChildProcess","_callee3","inputFolder","inputFiles","sevenZipExe","_callee3$","_context3","process","platform","compressWithChildProcessWindows","compressWithChildProcessUnix","_x8","_x9","_compressWithChildProcessUnix","_callee4","fullOutputFile","args","childProcess","_args4","_callee4$","_context4","getAbsoluteFilePath","ChildProcessProxy","start","command","spawn","cwd","wait","_x10","_x11","_compressWithChildProcessWindows","_callee5","_args5","_callee5$","_context5","join","substr","generateHash128FromZip","_x12","_x13","_generateHash128FromZip","_callee6","inputZipFile","zip","hashTable","zipFiles","relativePath","zipEntry","_data","content","hash","_callee6$","_context6","fs","readFile","sent","JSZip","loadAsync","files","compressedContent","dir","MD5Hash","Buffer","from","toLowerCase","push","key","atob","byteOffset","sort","item","longToByteArray","write","crypt","hexToBytes","close","long","buffer","ArrayBuffer","longNum","Float64Array","parseInt","Array","Uint8Array","reverse","addFileToZip","_x14","_x15","_x16","_x17","_addFileToZip","_callee7","fileName","zipFile","_callee7$","_context7","fileStream","append","name"],"sources":["../../../../src/lib/utils/compress-util.ts"],"sourcesContent":["import {createGzip} from 'zlib';\nimport {join} from 'path';\nimport {promises as fs, createReadStream, createWriteStream} from 'fs';\nimport archiver from 'archiver';\nimport {removeFile} from './file-utils';\nimport {ChildProcessProxy} from '@loaders.gl/worker-utils';\nimport JSZip from 'jszip';\nimport {MD5Hash} from '@loaders.gl/crypto';\nimport crypt from 'crypt';\nimport {getAbsoluteFilePath} from './file-utils';\n\n/**\n * Compress file to gzip file\n *\n * @param pathFile - the path to the file\n * @return the path to the gzip file\n */\nexport function compressFileWithGzip(pathFile: string): Promise<string> {\n  const compressedPathFile = `${pathFile}.gz`;\n  const gzip = createGzip();\n  const input = createReadStream(pathFile);\n  const output = createWriteStream(compressedPathFile);\n\n  return new Promise((resolve, reject) => {\n    input.on('end', () => {\n      console.log(`${compressedPathFile} compressed and saved.`); // eslint-disable-line no-undef,no-console\n      resolve(compressedPathFile);\n    });\n    input.on('error', (error) => {\n      console.log(`${compressedPathFile}: compression error!`); // eslint-disable-line no-undef,no-console\n      reject(error);\n    });\n    input.pipe(gzip).pipe(output);\n  });\n}\n\n/**\n * Compress files from map into slpk file\n *\n * @param fileMap - map with file paths (key: output path, value: input path)\n * @param outputFile - output slpk file\n * @param level - compression level\n */\nexport async function compressFilesWithZip(\n  fileMap: {[key: string]: string},\n  outputFile: string,\n  level: number = 0\n) {\n  // Before creating a new file, we need to delete the old file\n  try {\n    await removeFile(outputFile);\n  } catch (e) {\n    // Do nothing if old file doesn't exist\n  }\n\n  const output = createWriteStream(outputFile);\n  const archive = archiver('zip', {\n    zlib: {level} // Sets the compression level.\n  });\n\n  return new Promise(async (resolve, reject) => {\n    // listen for all archive data to be writte\n    // 'close' event is fired only when a file descriptor is involved\n    output.on('close', function () {\n      console.log(`${outputFile} saved.`); // eslint-disable-line no-undef,no-console\n      console.log(`${archive.pointer()} total bytes`); // eslint-disable-line no-undef,no-console\n      resolve(null);\n    });\n\n    // This event is fired when the data source is drained no matter what was the data source.\n    // It is not part of this library but rather from the NodeJS Stream API.\n    // @see: https://nodejs.org/api/stream.html#stream_event_end\n    output.on('end', function () {\n      console.log('Data has been drained'); // eslint-disable-line no-undef,no-console\n      resolve(null);\n    });\n\n    // good practice to catch warnings (ie stat failures and other non-blocking errors)\n    archive.on('warning', function (err) {\n      console.log(err); // eslint-disable-line no-undef,no-console\n      reject(err);\n    });\n\n    // good practice to catch this error explicitly\n    archive.on('error', function (err) {\n      reject(err);\n    });\n\n    // pipe archive data to the file\n    archive.pipe(output);\n\n    for (const subFileName in fileMap) {\n      const subFileData = fileMap[subFileName];\n      await appendFileToArchive(archive, subFileName, subFileData);\n    }\n\n    // finalize the archive (ie we are done appending files but streams have to finish yet)\n    archive.finalize();\n  });\n}\n\n/**\n * Compress files using external tool 'zip'/'7z'\n *\n * @param inputFolder - folder to archive - for cwd option\n * @param outputFile - output slpk file\n * @param level - compression level\n * @param inputFiles - input files path to pass to the executable as option\n * @param sevenZipExe - path to 7z.exe executable\n */\nexport async function compressWithChildProcess(\n  inputFolder: string,\n  outputFile: string,\n  level: number,\n  inputFiles: string,\n  sevenZipExe: string\n) {\n  // eslint-disable-next-line no-undef\n  if (process.platform === 'win32') {\n    await compressWithChildProcessWindows(inputFolder, outputFile, level, inputFiles, sevenZipExe);\n  } else {\n    await compressWithChildProcessUnix(inputFolder, outputFile, level, inputFiles);\n  }\n}\n\n/**\n * Compress files using external linux tool 'zip'\n *\n * @param inputFolder - folder to archive - for cwd option\n * @param outputFile - output slpk file\n * @param level - compression level\n * @param inputFiles - input files path to pass to the executable as option\n */\nasync function compressWithChildProcessUnix(\n  inputFolder: string,\n  outputFile: string,\n  level: number = 0,\n  inputFiles: string = '.'\n) {\n  const fullOutputFile = getAbsoluteFilePath(outputFile);\n  const args = [`-${level}`, '-r', fullOutputFile, inputFiles];\n  const childProcess = new ChildProcessProxy();\n  await childProcess.start({\n    command: 'zip',\n    arguments: args,\n    spawn: {\n      cwd: inputFolder\n    },\n    wait: 0\n  });\n}\n\n/**\n * Compress files using windows external tool '7z'\n *\n * @param inputFolder - folder to archive - for cwd option\n * @param outputFile - output slpk file\n * @param level - compression level\n * @param inputFiles - input files path to pass to the executable as option\n * @param sevenZipExe - path to 7z.exe executable\n */\nasync function compressWithChildProcessWindows(\n  inputFolder: string,\n  outputFile: string,\n  level: number = 0,\n  inputFiles: string = join('.', '*'),\n  sevenZipExe: string\n) {\n  // Workaround for @listfile issue. In 7z.exe @-leading files are handled as listfiles\n  // https://sevenzip.osdn.jp/chm/cmdline/syntax.htm\n  if (inputFiles[0] === '@') {\n    inputFiles = `*${inputFiles.substr(1)}`;\n  }\n\n  const fullOutputFile = getAbsoluteFilePath(outputFile);\n  const args = ['a', '-tzip', `-mx=${level}`, fullOutputFile, inputFiles];\n  const childProcess = new ChildProcessProxy();\n  await childProcess.start({\n    command: sevenZipExe,\n    arguments: args,\n    spawn: {\n      cwd: `${inputFolder}`\n    },\n    wait: 0\n  });\n}\n\n/**\n * Generate hash file from zip archive\n * https://github.com/Esri/i3s-spec/blob/master/docs/1.7/slpk_hashtable.cmn.md\n *\n * @param inputZipFile\n * @param outputFile\n */\nexport async function generateHash128FromZip(inputZipFile: string, outputFile: string) {\n  const input = await fs.readFile(inputZipFile);\n  const zip = await JSZip.loadAsync(input);\n  const hashTable: {key: string; value: string}[] = [];\n  const zipFiles = zip.files;\n  for (const relativePath in zipFiles) {\n    const zipEntry = zipFiles[relativePath];\n    // Had to use a workaround because the correct string is getting the wrong data\n    // const content = await zipEntry.async('nodebuffer');\n    // _data isn't described in the interface, so lint thought it was wrong\n    const _data = '_data';\n    const content = zipEntry[_data].compressedContent;\n    if (zipEntry.dir) continue; // eslint-disable-line no-continue\n    // eslint-disable-next-line no-undef\n    const hash = await new MD5Hash().hash(Buffer.from(relativePath.toLowerCase()));\n    // eslint-disable-next-line no-undef\n    hashTable.push({key: atob(hash), value: content.byteOffset});\n  }\n\n  hashTable.sort((prev, next) => {\n    if (prev.key === next.key) {\n      return prev.value < next.value ? -1 : 1;\n    }\n    return prev.key < next.key ? -1 : 1;\n  });\n\n  const output = createWriteStream(outputFile);\n  return new Promise((resolve, reject) => {\n    output.on('close', function () {\n      console.log(`${outputFile} generated and saved`); // eslint-disable-line\n      resolve(null);\n    });\n    output.on('error', function (err) {\n      console.log(err); // eslint-disable-line\n      reject(err);\n    });\n    for (const key in hashTable) {\n      const item = hashTable[key];\n      const value = longToByteArray(item.value);\n      // TODO: perhaps you need to wait for the 'drain' event if the write returns 'false'\n      // eslint-disable-next-line no-undef\n      output.write(Buffer.from(crypt.hexToBytes(item.key).concat(value)));\n    }\n    output.close();\n  });\n}\n\n/**\n * Encode 64 bit value to byte array\n *\n * @param long - stringified number\n * @returns\n */\nfunction longToByteArray(long: string): number[] {\n  const buffer = new ArrayBuffer(8); // JS numbers are 8 bytes long, or 64 bits\n  const longNum = new Float64Array(buffer); // so equivalent to Float64\n  longNum[0] = parseInt(long);\n  return Array.from(new Uint8Array(buffer)).reverse(); // reverse to get little endian\n}\n\n/**\n * Add file to zip archive\n *\n * @param inputFile\n * @param fileName\n * @param zipFile\n * @param sevenZipExe\n */\nexport async function addFileToZip(\n  inputFolder: string,\n  fileName: string,\n  zipFile: string,\n  sevenZipExe: string\n) {\n  await compressWithChildProcess(inputFolder, zipFile, 0, fileName, sevenZipExe);\n  console.log(`${fileName} added to ${zipFile}.`); // eslint-disable-line\n}\n\n/**\n *\n * @param archive zip archive instance\n * @param subFileName file path inside archive\n * @param subFileData source file path\n * @returns\n */\nfunction appendFileToArchive(archive: any, subFileName: string, subFileData: string) {\n  return new Promise((resolve) => {\n    const fileStream = createReadStream(subFileData);\n    console.log(`Compression start: ${subFileName}`); // eslint-disable-line no-undef,no-console\n    fileStream.on('close', () => {\n      console.log(`Compression finish: ${subFileName}`); // eslint-disable-line no-undef,no-console\n      resolve(null);\n    });\n    archive.append(fileStream, {name: subFileName});\n  });\n}\n"],"mappings":"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"}