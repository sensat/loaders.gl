{"version":3,"file":"file-utils.js","names":["_core","require","_loaderUtils","_fs","_path","_compressUtil","writeFile","_x","_x2","_writeFile","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","path","data","fileName","toWriteData","pathFile","_args","wrap","_callee$","_context","prev","next","length","undefined","Promise","t0","Uint8Array","t1","sent","ArrayBuffer","fs","mkdir","recursive","join","t2","console","log","concat","abrupt","stop","writeFileForSlpk","_x3","_x4","_writeFileForSlpk","_callee2","compress","compressList","pathGzFile","_args2","_callee2$","_context2","includes","push","compressFileWithGzip","removeFile","openJson","_x5","_x6","_openJson","_callee3","_callee3$","_context3","resolve","reject","count","intervalId","setInterval","load","JSONLoader","then","result","clearInterval","catch","Error","isFileExists","_x7","_isFileExists","_callee4","_callee4$","_context4","stat","removeDir","rm","unlink","getAbsoluteFilePath","filePath","isAbsolute","process","cwd"],"sources":["../../../../src/lib/utils/file-utils.ts"],"sourcesContent":["import {load} from '@loaders.gl/core';\nimport {JSONLoader} from '@loaders.gl/loader-utils';\nimport {promises as fs} from 'fs';\nimport {isAbsolute, join} from 'path';\nimport {compressFileWithGzip} from './compress-util';\n\n/**\n * Write a file with data and name fileName to path\n *\n * @param path - output path\n * @param data - file content\n * @param fileName - name of output file (default: index.json)\n */\nexport async function writeFile(\n  path: string,\n  data: string | Uint8Array | ArrayBuffer | Promise<ArrayBuffer>,\n  fileName: string = 'index.json'\n): Promise<string> {\n  let toWriteData: string | Uint8Array;\n  if (data instanceof Promise) {\n    toWriteData = new Uint8Array(await data);\n  } else if (data instanceof ArrayBuffer) {\n    toWriteData = new Uint8Array(data as ArrayBuffer);\n  } else {\n    toWriteData = data;\n  }\n  await fs.mkdir(path, {recursive: true});\n  const pathFile = join(path, fileName);\n  try {\n    await fs.writeFile(pathFile, toWriteData);\n  } catch (err) {\n    throw err;\n  }\n  console.log(`${pathFile} saved.`); // eslint-disable-line\n  return pathFile;\n}\n\n/**\n * Write a file with data and name fileName to path - specific one for further packaging into slpk\n *\n * @param path - output path\n * @param data - file content\n * @param fileName - name of output file (default: index.json)\n * @param compress - if need to compress file with gzip (default: true)\n * @param compressList - if set - the file should be added to this list and compressed in the end of conversion\n */\nexport async function writeFileForSlpk(\n  path: string,\n  data: string | Uint8Array | ArrayBuffer | Promise<ArrayBuffer>,\n  fileName: string = 'index.json',\n  compress: boolean = true,\n  compressList?: string[] | null\n): Promise<string | null> {\n  const pathFile = await writeFile(path, data, fileName);\n  if (compress) {\n    if (compressList) {\n      if (!compressList.includes(pathFile)) {\n        compressList.push(pathFile);\n        return `${pathFile}.gz`;\n      } else {\n        return null;\n      }\n    } else {\n      const pathGzFile = await compressFileWithGzip(pathFile);\n      // After compression, we don't need an uncompressed file\n      await removeFile(pathFile);\n      return pathGzFile;\n    }\n  }\n  return pathFile;\n}\n\n/**\n * Open json file\n * @param path - path to the file\n * @param fileName - file name\n * @returns object\n */\nexport async function openJson(path: string, fileName: string): Promise<{[key: string]: any}> {\n  return new Promise((resolve, reject) => {\n    let count = 0;\n    console.log(`load ${path}/${fileName}.`); // eslint-disable-line\n    const intervalId = setInterval(() => {\n      const pathFile = join(path, fileName);\n      load(pathFile, JSONLoader)\n        .then((result) => {\n          clearInterval(intervalId);\n          resolve(result);\n        })\n        .catch(() => {\n          count++;\n          if (count > 100) {\n            clearInterval(intervalId);\n            reject(new Error(`Cannon load ${path}/${fileName}.`));\n          }\n        });\n    }, 200);\n  });\n}\n\n/**\n * Check if the file exists\n * @param fileName - full name of file\n * @returns true if file exists, otherwise - false\n */\nexport async function isFileExists(fileName: string): Promise<boolean> {\n  try {\n    await fs.stat(fileName);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Remove dir with path\n *\n * @param path\n */\nexport function removeDir(path: string) {\n  // (node:35607) [DEP0147] DeprecationWarning: In future versions of Node.js, fs.rmdir(path, { recursive: true }) will be removed. Use fs.rm(path, { recursive: true }) instead\n  return fs.rm(path, {recursive: true});\n}\n\n/**\n * Remove file with path\n *\n * @param path\n */\nexport function removeFile(path: string) {\n  return fs.unlink(path);\n}\n\n/**\n * Generates absolute file path\n * @param filePath\n */\nexport function getAbsoluteFilePath(filePath: string) {\n  return isAbsolute(filePath) ? filePath : join(process.cwd(), filePath);\n}\n"],"mappings":"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"}