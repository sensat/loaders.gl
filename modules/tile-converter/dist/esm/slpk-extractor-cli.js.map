{"version":3,"file":"slpk-extractor-cli.js","names":["SLPKExtractor","getURLValue","validateOptionsWithEqual","main","args","process","argv","length","printHelp","validatedOptionsArr","options","parseOptions","validatedOptions","validateOptions","convert","catch","error","console","log","exit","slpkExtractor","extract","inputUrl","tileset","outputPath","output","mandatoryOptionsWithExceptions","exceptions","mandatoryOption","optionValue","push","forEach","exeption","opts","arg","index","indexOf","warn","concat"],"sources":["../../src/slpk-extractor-cli.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport '@loaders.gl/polyfills';\nimport SLPKExtractor from './slpk-extractor/slpk-extractor';\nimport {getURLValue, validateOptionsWithEqual} from './lib/utils/cli-utils';\n\ntype SLPKExtractionOptions = {\n  /** \"tileset.json\" file (3DTiles) / \"http://..../SceneServer/layers/0\" resource (I3S) */\n  tileset?: string;\n  /** Output folder. This folder will be created by converter if doesn't exist. It is relative to the converter path.\n   * Default: \"data\" folder */\n  output?: string;\n};\n\n/* During validation we check that particular options are defined so they can't be undefined */\nexport type ValidatedSLPKExtractionOptions = SLPKExtractionOptions & {\n  /** slpk file */\n  tileset: string;\n  /** Output folder. This folder will be created by converter if doesn't exist. It is relative to the converter path.\n   * Default: \"data\" folder */\n  output: string;\n};\n\n/**\n * CLI entry\n * @returns\n */\nasync function main() {\n  const [, , ...args] = process.argv;\n\n  if (args.length === 0) {\n    printHelp();\n  }\n\n  const validatedOptionsArr = validateOptionsWithEqual(args);\n\n  const options: SLPKExtractionOptions = parseOptions(validatedOptionsArr);\n\n  const validatedOptions: ValidatedSLPKExtractionOptions = validateOptions(options);\n\n  await convert(validatedOptions);\n}\n\nmain().catch((error) => {\n  console.log(error);\n  process.exit(1); // eslint-disable-line\n});\n\n/**\n * Output for `npx slpk-extractor --help`\n */\nfunction printHelp(): void {\n  console.log('cli: converter slpk to I3S...');\n  console.log('--output [Output folder, default: \"data\" folder]');\n  console.log('--tileset [SLPK file]');\n  process.exit(0); // eslint-disable-line\n}\n\n/**\n * Run extraction process\n * @param options validated slpk-extractor options\n */\nasync function convert(options: ValidatedSLPKExtractionOptions) {\n  console.log(`------------------------------------------------`); // eslint-disable-line\n  console.log(`Starting conversion of SLPK`); // eslint-disable-line\n  console.log(`------------------------------------------------`); // eslint-disable-line\n  const slpkExtractor = new SLPKExtractor();\n  slpkExtractor.extract({\n    inputUrl: options.tileset,\n    outputPath: options.output\n  });\n}\n\n// OPTIONS\n/**\n * Validate input options of the CLI command\n * @param options - input options of the CLI command\n * @returns validated options\n */\nfunction validateOptions(options: SLPKExtractionOptions): ValidatedSLPKExtractionOptions {\n  const mandatoryOptionsWithExceptions: {\n    [key: string]: () => void;\n  } = {\n    output: () => console.log('Missed: --output [Output path name]'),\n    tileset: () => console.log('Missed: --tileset [SLPK file]')\n  };\n  const exceptions: (() => void)[] = [];\n  for (const mandatoryOption in mandatoryOptionsWithExceptions) {\n    const optionValue = options[mandatoryOption];\n    if (!optionValue) {\n      exceptions.push(mandatoryOptionsWithExceptions[mandatoryOption]);\n    }\n  }\n  if (exceptions.length) {\n    exceptions.forEach((exeption) => exeption());\n    process.exit(1);\n  }\n  return <ValidatedSLPKExtractionOptions>options;\n}\n\n/**\n * Parse option from the cli arguments array\n * @param args\n * @returns\n */\nfunction parseOptions(args: string[]): SLPKExtractionOptions {\n  const opts: SLPKExtractionOptions = {};\n\n  // eslint-disable-next-line complexity\n  args.forEach((arg, index) => {\n    if (arg.indexOf('--') === 0) {\n      switch (arg) {\n        case '--tileset':\n          opts.tileset = getURLValue(index, args);\n          break;\n        case '--output':\n          opts.output = getURLValue(index, args);\n          break;\n        case '--help':\n          printHelp();\n          break;\n        default:\n          console.warn(`Unknown option ${arg}`);\n          process.exit(0); // eslint-disable-line\n      }\n    }\n  });\n  return opts;\n}\n"],"mappings":"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"}