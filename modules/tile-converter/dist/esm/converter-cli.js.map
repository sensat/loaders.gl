{"version":3,"file":"converter-cli.js","names":["join","I3SConverter","Tiles3DConverter","DepsInstaller","TILESET_TYPE","I3S","_3DTILES","main","args","process","argv","length","printHelp","validatedOptionsArr","validateOptionsWithEqual","options","parseOptions","installDependencies","depthInstaller","install","validatedOptions","validateOptions","convert","catch","error","console","log","exit","concat","inputType","toUpperCase","tiles3DConverter","inputUrl","tileset","outputPath","output","tilesetName","name","maxDepth","egmFilePath","egm","converter","slpk","sevenZipExe","token","draco","mergeMaterials","generateTextures","generateBoundingVolumes","validate","instantNodeWriting","mandatoryOptionsWithExceptions","exceptions","mandatoryOption","optionValue","isWrongInputType","Boolean","Object","values","includes","push","forEach","exeption","reduce","acc","curr","equalSignIndex","indexOf","beforeEqual","slice","afterEqual","condition","startsWith","opts","cwd","arg","index","getStringValue","getURLValue","getBooleanValue","getIntegerValue","warn","value","replace","stringValue","result","Number","parseInt","isFinite","NaN","toLowerCase","trim"],"sources":["../../src/converter-cli.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport '@loaders.gl/polyfills';\nimport {join} from 'path';\nimport {I3SConverter, Tiles3DConverter} from '@loaders.gl/tile-converter';\nimport {DepsInstaller} from './deps-installer/deps-installer';\n\ntype TileConversionOptions = {\n  /** \"I3S\" - for I3S to 3DTiles conversion, \"3DTILES\" for 3DTiles to I3S conversion */\n  inputType?: string;\n  /** \"tileset.json\" file (3DTiles) / \"http://..../SceneServer/layers/0\" resource (I3S) */\n  tileset?: string;\n  /** Tileset name. This option is used for naming in resulting json resouces and for resulting path/*.slpk file naming */\n  name?: string;\n  /** Output folder. This folder will be created by converter if doesn't exist. It is relative to the converter path.\n   * Default: \"data\" folder */\n  output: string;\n  /** Keep created 3DNodeIndexDocument files on disk instead of memory. This option reduce memory usage but decelerates conversion speed */\n  instantNodeWriting: boolean;\n  /** Try to merge similar materials to be able to merge meshes into one node (I3S to 3DTiles conversion only) */\n  mergeMaterials: boolean;\n  /** 3DTiles->I3S only. location of 7z.exe archiver to create slpk on Windows OS, default: \"C:\\Program Files\\7-Zip\\7z.exe\" */\n  sevenZipExe: string;\n  /** location of the Earth Gravity Model (*.pgm) file to convert heights from ellipsoidal to gravity-related format,\n   * default: \"./deps/egm2008-5.pgm\". A model file can be loaded from GeographicLib\n   * https://geographiclib.sourceforge.io/html/geoid.html */\n  egm: string;\n  /** 3DTile->I3S only. Token for Cesium ION tileset authentication. */\n  token?: string;\n  /** 3DTiles->I3S only. Enable draco compression for geometry. Default: true */\n  draco: boolean;\n  /** Run the script for installing dependencies. Run this options separate from others. Now \"*.pgm\" file installation is\n   * implemented */\n  installDependencies: boolean;\n  /** 3DTile->I3S only. Enable KTX2 textures generation if only one of (JPG, PNG) texture is provided or generate JPG texture\n   * if only KTX2 is provided */\n  generateTextures: boolean;\n  /** 3DTile->I3S only. Will generate obb and mbs bounding volumes from geometry */\n  generateBoundingVolumes: boolean;\n  /** Validate the dataset during conversion. Validation messages will be posted in the console output */\n  validate: boolean;\n  /** Maximal depth of the hierarchical tiles tree traversal, default: infinite */\n  maxDepth?: number;\n  /** 3DTiles->I3S only. Whether the converter generates *.slpk (Scene Layer Package) I3S output file */\n  slpk: boolean;\n};\n\n/* During validation we check that particular options are defined so they can't be undefined */\ntype ValidatedTileConversionOptions = TileConversionOptions & {\n  /** \"I3S\" - for I3S to 3DTiles conversion, \"3DTILES\" for 3DTiles to I3S conversion */\n  inputType: string;\n  /** \"tileset.json\" file (3DTiles) / \"http://..../SceneServer/layers/0\" resource (I3S) */\n  tileset: string;\n  /** Tileset name. This option is used for naming in resulting json resouces and for resulting path/*.slpk file naming */\n  name: string;\n};\n\nconst TILESET_TYPE = {\n  I3S: 'I3S',\n  _3DTILES: '3DTILES'\n};\n\n/**\n * CLI entry\n * @returns\n */\nasync function main() {\n  const [, , ...args] = process.argv;\n\n  if (args.length === 0) {\n    printHelp();\n  }\n\n  const validatedOptionsArr = validateOptionsWithEqual(args);\n\n  const options: TileConversionOptions = parseOptions(validatedOptionsArr);\n\n  if (options.installDependencies) {\n    const depthInstaller = new DepsInstaller();\n    depthInstaller.install('deps');\n    return;\n  }\n\n  const validatedOptions: ValidatedTileConversionOptions = validateOptions(options);\n\n  await convert(validatedOptions);\n}\n\nmain().catch((error) => {\n  console.log(error);\n  process.exit(1); // eslint-disable-line\n});\n\n/**\n * Output for `npx tile-converter --help`\n */\nfunction printHelp(): void {\n  console.log('cli: converter 3dTiles to I3S or I3S to 3dTiles...');\n  console.log(\n    '--install-dependencies [Run the script for installing dependencies. Run this options separate from others. Now \"*.pgm\" file installation is implemented]'\n  );\n  console.log(\n    '--max-depth [Maximal depth of hierarchical tiles tree traversal, default: infinite]'\n  );\n  console.log('--name [Tileset name]');\n  console.log('--output [Output folder, default: \"data\" folder]');\n  console.log(\n    '--instant-node-writing [Keep created 3DNodeIndexDocument files on disk instead of memory. This option reduce memory usage but decelerates conversion speed]'\n  );\n  console.log(\n    '--split-nodes [Prevent to merge similar materials that could lead to incorrect visualization (I3S to 3DTiles conversion only)]'\n  );\n  console.log('--slpk [Generate slpk (Scene Layer Packages) I3S output file]');\n  console.log(\n    '--tileset [tileset.json file (3DTiles) / http://..../SceneServer/layers/0 resource (I3S)]'\n  );\n  console.log('--input-type [tileset input type: I3S or 3DTILES]');\n  console.log(\n    '--7zExe [location of 7z.exe archiver to create slpk on Windows, default: \"C:\\\\Program Files\\\\7-Zip\\\\7z.exe\"]'\n  );\n  console.log(\n    '--egm [location of Earth Gravity Model *.pgm file to convert heights from ellipsoidal to gravity-related format. A model file can be loaded from GeographicLib https://geographiclib.sourceforge.io/html/geoid.html], default: \"./deps/egm2008-5.zip\"'\n  );\n  console.log('--token [Token for Cesium ION tilesets authentication]');\n  console.log('--no-draco [Disable draco compression for geometry]');\n  console.log(\n    '--generate-textures [Enable KTX2 textures generation if only one of (JPG, PNG) texture is provided or generate JPG texture if only KTX2 is provided]'\n  );\n  console.log(\n    '--generate-bounding-volumes [Will generate obb and mbs bounding volumes from geometry]'\n  );\n  console.log('--validate [Enable validation]');\n  process.exit(0); // eslint-disable-line\n}\n\n/**\n * Run conversion process\n * @param options validated tile-converter options\n */\nasync function convert(options: ValidatedTileConversionOptions) {\n  console.log(`------------------------------------------------`); // eslint-disable-line\n  console.log(`Starting conversion of ${options.inputType}`); // eslint-disable-line\n  console.log(`------------------------------------------------`); // eslint-disable-line\n  const inputType = options.inputType.toUpperCase();\n  switch (inputType) {\n    case TILESET_TYPE.I3S:\n      const tiles3DConverter = new Tiles3DConverter();\n      tiles3DConverter.convert({\n        inputUrl: options.tileset,\n        outputPath: options.output,\n        tilesetName: options.name,\n        maxDepth: options.maxDepth,\n        egmFilePath: options.egm\n      });\n      break;\n    case TILESET_TYPE._3DTILES:\n      const converter = new I3SConverter();\n      await converter.convert({\n        inputUrl: options.tileset,\n        outputPath: options.output,\n        tilesetName: options.name,\n        maxDepth: options.maxDepth,\n        slpk: options.slpk,\n        sevenZipExe: options.sevenZipExe,\n        egmFilePath: options.egm,\n        token: options.token,\n        draco: options.draco,\n        mergeMaterials: options.mergeMaterials,\n        generateTextures: options.generateTextures,\n        generateBoundingVolumes: options.generateBoundingVolumes,\n        validate: options.validate,\n        instantNodeWriting: options.instantNodeWriting\n      });\n      break;\n    default:\n      printHelp();\n  }\n}\n\n// OPTIONS\n/**\n * Validate input options of the CLI command\n * @param options - input options of the CLI command\n * @returns validated options\n */\nfunction validateOptions(options: TileConversionOptions): ValidatedTileConversionOptions {\n  const mandatoryOptionsWithExceptions: {\n    [key: string]: () => void;\n  } = {\n    name: () => console.log('Missed: --name [Tileset name]'),\n    output: () => console.log('Missed: --output [Output path name]'),\n    sevenZipExe: () => console.log('Missed: --7zExe [7z archiver executable path]'),\n    egm: () => console.log('Missed: --egm [*.pgm earth gravity model file path]'),\n    tileset: () => console.log('Missed: --tileset [tileset.json file]'),\n    inputType: () =>\n      console.log('Missed/Incorrect: --input-type [tileset input type: I3S or 3DTILES]')\n  };\n  const exceptions: (() => void)[] = [];\n  for (const mandatoryOption in mandatoryOptionsWithExceptions) {\n    const optionValue = options[mandatoryOption];\n    const isWrongInputType =\n      Boolean(optionValue) &&\n      mandatoryOption === 'inputType' &&\n      !Object.values(TILESET_TYPE).includes(optionValue.toUpperCase());\n\n    if (!optionValue || isWrongInputType) {\n      exceptions.push(mandatoryOptionsWithExceptions[mandatoryOption]);\n    }\n  }\n  if (exceptions.length) {\n    exceptions.forEach((exeption) => exeption());\n    process.exit(1);\n  }\n  return <ValidatedTileConversionOptions>options;\n}\n\nfunction validateOptionsWithEqual(args: string[]): string[] {\n  return args.reduce((acc: string[], curr) => {\n    const equalSignIndex = curr.indexOf('=');\n    const beforeEqual = curr.slice(0, equalSignIndex);\n    const afterEqual = curr.slice(equalSignIndex + 1, curr.length);\n    const condition = curr.includes('=') && curr.startsWith('--') && afterEqual;\n    if (condition) {\n      return acc.concat(beforeEqual, afterEqual);\n    }\n    return acc.concat(curr);\n  }, []);\n}\n\n/**\n * Parse option from the cli arguments array\n * @param args\n * @returns\n */\nfunction parseOptions(args: string[]): TileConversionOptions {\n  const opts: TileConversionOptions = {\n    output: 'data',\n    instantNodeWriting: false,\n    mergeMaterials: true,\n    sevenZipExe: 'C:\\\\Program Files\\\\7-Zip\\\\7z.exe',\n    egm: join(process.cwd(), 'deps', 'egm2008-5.pgm'),\n    draco: true,\n    installDependencies: false,\n    generateTextures: false,\n    generateBoundingVolumes: false,\n    validate: false,\n    slpk: false\n  };\n\n  // eslint-disable-next-line complexity\n  args.forEach((arg, index) => {\n    if (arg.indexOf('--') === 0) {\n      switch (arg) {\n        case '--input-type':\n          opts.inputType = getStringValue(index, args);\n          break;\n        case '--tileset':\n          opts.tileset = getURLValue(index, args);\n          break;\n        case '--name':\n          opts.name = getStringValue(index, args);\n          break;\n        case '--output':\n          opts.output = getStringValue(index, args);\n          break;\n        case '--instant-node-writing':\n          opts.instantNodeWriting = getBooleanValue(index, args);\n          break;\n        case '--split-nodes':\n          opts.mergeMaterials = getBooleanValue(index, args);\n          break;\n        case '--max-depth':\n          opts.maxDepth = getIntegerValue(index, args);\n          break;\n        case '--slpk':\n          opts.slpk = getBooleanValue(index, args);\n          break;\n        case '--7zExe':\n          opts.sevenZipExe = getStringValue(index, args);\n          break;\n        case '--egm':\n          opts.egm = getStringValue(index, args);\n          break;\n        case '--token':\n          opts.token = getStringValue(index, args);\n          break;\n        case '--no-draco':\n          opts.draco = getBooleanValue(index, args);\n          break;\n        case '--validate':\n          opts.validate = getBooleanValue(index, args);\n          break;\n        case '--install-dependencies':\n          opts.installDependencies = getBooleanValue(index, args);\n          break;\n        case '--generate-textures':\n          opts.generateTextures = getBooleanValue(index, args);\n          break;\n        case '--generate-bounding-volumes':\n          opts.generateBoundingVolumes = getBooleanValue(index, args);\n          break;\n        case '--help':\n          printHelp();\n          break;\n        default:\n          console.warn(`Unknown option ${arg}`);\n          process.exit(0); // eslint-disable-line\n      }\n    }\n  });\n  return opts;\n}\n\n/**\n * Get string option value from cli arguments\n * @param index - option's name index in the argument's array.\n *                The value of the option should be next to name of the option.\n * @param args - cli arguments array\n * @returns - string value of the option\n */\nfunction getStringValue(index: number, args: string[]): string {\n  if (index + 1 >= args.length) {\n    return '';\n  }\n  const value = args[index + 1];\n  if (value.indexOf('--') === 0) {\n    return '';\n  }\n  return value;\n}\n\n/**\n * Modyfy URL path to be compatible with fetch\n * @param index - option's name index in the argument's array.\n *                The value of the option should be next to name of the option.\n * @param args - cli arguments array\n * @returns - string value of the option\n */\nfunction getURLValue(index: number, args: string[]): string {\n  const value = getStringValue(index, args);\n  console.log(`Input tileset value: ${value}`);\n  console.log(`Modified tileset value: ${value.replace(/\\\\/g, '/')}`);\n  return value.replace(/\\\\/g, '/');\n}\n\n/**\n * Get integer option value from cli arguments\n * @param index - option's name index in the argument's array\n *                The value of the option should be next to name of the option.\n * @param args - cli arguments array\n * @returns - number value of the option\n */\nfunction getIntegerValue(index: number, args: string[]): number {\n  const stringValue: string = getStringValue(index, args);\n  const result: number = Number.parseInt(stringValue);\n  if (isFinite(result)) {\n    return result;\n  }\n  return NaN;\n}\n\nfunction getBooleanValue(index: number, args: string[]): boolean {\n  const stringValue: string = getStringValue(index, args).toLowerCase().trim();\n  if (['--no-draco', '--split-nodes'].includes(args[index]) && !stringValue) {\n    return false;\n  }\n  if (!stringValue || stringValue === 'true') {\n    return true;\n  }\n  return false;\n}\n"],"mappings":"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"}