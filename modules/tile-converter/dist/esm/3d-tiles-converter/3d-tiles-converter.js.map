{"version":3,"file":"3d-tiles-converter.js","names":["join","process","transform","fetchFile","getLoaderOptions","load","isBrowser","I3SLoader","I3SAttributeLoader","COORDINATE_SYSTEM","Tileset3D","Tile3D","PGMLoader","i3sObbTo3dTilesObb","convertScreenThresholdToGeometricError","writeFile","removeDir","calculateFilesSize","timeConverter","TILESET","tilesetTemplate","createObbFromMbs","Tile3dAttributesWorker","transform3DTilesAttributesOnWorker","getWorkerURL","WorkerFarm","BROWSER_ERROR_MESSAGE","I3S","Tiles3DConverter","constructor","_defineProperty","options","tilesetPath","vertexCounter","conversionStartTime","geoidHeightModel","sourceTileset","attributeStorageInfo","workerSource","convert","console","log","inputUrl","outputPath","tilesetName","maxDepth","egmFilePath","hrtime","loadWorkers","sourceTilesetJson","loadOptions","_nodeWorkers","reuseWorkers","i3s","coordinateSystem","LNGLAT_OFFSETS","decodeTextures","tilesetInitializationPromise","rootNode","root","header","obb","mbs","concat","e","rootTile","boundingVolume","box","geometricError","children","_addChildren","tileset","JSON","stringify","_finishConversion","slpk","workerFarm","getWorkerFarm","destroy","convertChildNode","parentSourceNode","parentNode","level","childNodeInfo","sourceChild","_loadChildNode","push","contentUrl","_sourceChild$header","_loadTile","content","vertexCount","featureAttributes","_loadChildAttributes","child","i3sAttributesData","tileContent","textureFormat","b3dm","source","tile3dWorkerSource","uri","id","Uint8Array","unloadContent","promises","Promise","all","nodePages","nodePagesTile","formTileFromNodePages","loader","nodeUrl","_relativeUrlToFullUrl","url","href","isTileHeader","loadContent","baseUrl","relativeUrl","resultArray","split","relativeUrlArray","folder","slice","attributeUrls","index","length","attribute","attributeName","name","attributeType","_getAttributeType","attributesList","_replaceNestedArrays","Object","assign","attributeValues","valueType","objectIds","attributeObject","key","Array","from","params","filesSize","diff","conversionTime","tile3dAttributesWorkerUrl","sourceResponse","text"],"sources":["../../../src/3d-tiles-converter/3d-tiles-converter.ts"],"sourcesContent":["import type {AttributeStorageInfo, FeatureAttribute, NodeReference} from '@loaders.gl/i3s';\nimport type {Tiles3DTileJSON} from '@loaders.gl/3d-tiles';\n\nimport {join} from 'path';\nimport process from 'process';\nimport transform from 'json-map-transform';\nimport {fetchFile, getLoaderOptions, load, isBrowser} from '@loaders.gl/core';\nimport {I3SLoader, I3SAttributeLoader, COORDINATE_SYSTEM} from '@loaders.gl/i3s';\nimport {Tileset3D, Tile3D} from '@loaders.gl/tiles';\nimport {Geoid} from '@math.gl/geoid';\n\nimport {PGMLoader} from '../pgm-loader';\nimport {i3sObbTo3dTilesObb} from './helpers/i3s-obb-to-3d-tiles-obb';\nimport {convertScreenThresholdToGeometricError} from '../lib/utils/lod-conversion-utils';\nimport {writeFile, removeDir} from '../lib/utils/file-utils';\nimport {calculateFilesSize, timeConverter} from '../lib/utils/statistic-utills';\nimport {TILESET as tilesetTemplate} from './json-templates/tileset';\nimport {createObbFromMbs} from '../i3s-converter/helpers/coordinate-converter';\nimport {\n  I3SAttributesData,\n  Tile3dAttributesWorker,\n  transform3DTilesAttributesOnWorker\n} from '../3d-tiles-attributes-worker';\nimport {getWorkerURL, WorkerFarm} from '@loaders.gl/worker-utils';\nimport {BROWSER_ERROR_MESSAGE} from '../constants';\n\nconst I3S = 'I3S';\n\n/**\n * Converter from i3s to 3d-tiles\n */\nexport default class Tiles3DConverter {\n  options: any;\n  tilesetPath: string;\n  vertexCounter: number;\n  conversionStartTime: [number, number];\n  geoidHeightModel: Geoid | null;\n  sourceTileset: Tileset3D | null;\n  attributeStorageInfo: AttributeStorageInfo | null;\n  workerSource: {[key: string]: string} = {};\n\n  constructor() {\n    this.options = {};\n    this.tilesetPath = '';\n    this.vertexCounter = 0;\n    this.conversionStartTime = [0, 0];\n    this.geoidHeightModel = null;\n    this.sourceTileset = null;\n    this.attributeStorageInfo = null;\n    this.workerSource = {};\n  }\n\n  /**\n   * Convert i3s format data to 3dTiles\n   * @param options\n   * @param options.inputUrl the url to read the tileset from\n   * @param options.outputPath the output filename\n   * @param options.tilesetName the output name of the tileset\n   * @param options.egmFilePath location of *.pgm file to convert heights from ellipsoidal to gravity-related format\n   * @param options.maxDepth The max tree depth of conversion\n   */\n  public async convert(options: {\n    inputUrl: string;\n    outputPath: string;\n    tilesetName: string;\n    maxDepth?: number;\n    egmFilePath: string;\n  }): Promise<any> {\n    if (isBrowser) {\n      console.log(BROWSER_ERROR_MESSAGE);\n      return BROWSER_ERROR_MESSAGE;\n    }\n    const {inputUrl, outputPath, tilesetName, maxDepth, egmFilePath} = options;\n    this.conversionStartTime = process.hrtime();\n    this.options = {maxDepth};\n\n    console.log('Loading egm file...'); // eslint-disable-line\n    this.geoidHeightModel = await load(egmFilePath, PGMLoader);\n    console.log('Loading egm file completed!'); // eslint-disable-line\n\n    await this.loadWorkers();\n\n    const sourceTilesetJson = await load(inputUrl, I3SLoader, {});\n\n    this.sourceTileset = new Tileset3D(sourceTilesetJson, {\n      loadOptions: {\n        _nodeWorkers: true,\n        reuseWorkers: true,\n        i3s: {coordinateSystem: COORDINATE_SYSTEM.LNGLAT_OFFSETS, decodeTextures: false}\n        // TODO should no longer be needed with new workers\n        // 'i3s-content-nodejs': {\n        //   workerUrl: './modules/i3s/dist/i3s-content-nodejs-worker.js'\n        // }\n      }\n    });\n\n    await this.sourceTileset.tilesetInitializationPromise;\n    const rootNode = this.sourceTileset.root!;\n    if (!rootNode.header.obb) {\n      rootNode.header.obb = createObbFromMbs(rootNode.header.mbs);\n    }\n\n    this.tilesetPath = join(`${outputPath}`, `${tilesetName}`);\n    this.attributeStorageInfo = sourceTilesetJson.attributeStorageInfo;\n    // Removing the tilesetPath needed to exclude erroneous files after conversion\n    try {\n      await removeDir(this.tilesetPath);\n    } catch (e) {\n      // do nothing\n    }\n\n    const rootTile: Tiles3DTileJSON = {\n      boundingVolume: {\n        box: i3sObbTo3dTilesObb(rootNode.header.obb, this.geoidHeightModel)\n      },\n      geometricError: convertScreenThresholdToGeometricError(rootNode),\n      children: []\n    };\n\n    await this._addChildren(rootNode, rootTile, 1);\n\n    const tileset = transform({root: rootTile}, tilesetTemplate());\n    await writeFile(this.tilesetPath, JSON.stringify(tileset), 'tileset.json');\n\n    this._finishConversion({slpk: false, outputPath, tilesetName});\n\n    // Clean up worker pools\n    const workerFarm = WorkerFarm.getWorkerFarm({});\n    workerFarm.destroy();\n  }\n\n  /**\n   * Convert particular I3S Node\n   * @param parentSourceNode the parent node tile object (@loaders.gl/tiles/Tile3D)\n   * @param parentNode object in resulting tileset\n   * @param level a current level of a tree depth\n   * @param childNodeInfo child node to convert\n   */\n  private async convertChildNode(\n    parentSourceNode: Tile3D,\n    parentNode: Tiles3DTileJSON,\n    level: number,\n    childNodeInfo: NodeReference\n  ): Promise<void> {\n    const sourceChild = await this._loadChildNode(parentSourceNode, childNodeInfo);\n    parentSourceNode.children.push(sourceChild);\n    if (sourceChild.contentUrl) {\n      await this.sourceTileset!._loadTile(sourceChild);\n      this.vertexCounter += sourceChild.content.vertexCount;\n\n      let featureAttributes: FeatureAttribute | null = null;\n      if (this.attributeStorageInfo) {\n        featureAttributes = await this._loadChildAttributes(sourceChild, this.attributeStorageInfo);\n      }\n\n      if (!sourceChild.header.obb) {\n        sourceChild.header.obb = createObbFromMbs(sourceChild.header.mbs);\n      }\n\n      const boundingVolume = {\n        box: i3sObbTo3dTilesObb(sourceChild.header.obb, this.geoidHeightModel)\n      };\n      const child: Tiles3DTileJSON = {\n        boundingVolume,\n        geometricError: convertScreenThresholdToGeometricError(sourceChild),\n        children: []\n      };\n\n      const i3sAttributesData: I3SAttributesData = {\n        tileContent: sourceChild.content,\n        textureFormat: sourceChild?.header?.textureFormat\n      };\n\n      const b3dm = await transform3DTilesAttributesOnWorker(i3sAttributesData, {\n        source: this.workerSource.tile3dWorkerSource,\n        featureAttributes\n      });\n\n      child.content = {\n        uri: `${sourceChild.id}.b3dm`,\n        boundingVolume\n      };\n      await writeFile(this.tilesetPath, new Uint8Array(b3dm), `${sourceChild.id}.b3dm`);\n      parentNode.children.push(child);\n\n      sourceChild.unloadContent();\n      await this._addChildren(sourceChild, child, level + 1);\n    } else {\n      await this._addChildren(sourceChild, parentNode, level + 1);\n    }\n  }\n\n  /**\n   * The recursive function of traversal of a nodes tree\n   * @param parentSourceNode the parent node tile object (@loaders.gl/tiles/Tile3D)\n   * @param parentNode object in resulting tileset\n   * @param level a current level of a tree depth\n   */\n  private async _addChildren(\n    parentSourceNode: Tile3D,\n    parentNode: Tiles3DTileJSON,\n    level: number\n  ): Promise<void> {\n    if (this.options.maxDepth && level > this.options.maxDepth) {\n      return;\n    }\n    const promises: Promise<void>[] = [];\n    for (const childNodeInfo of parentSourceNode.header.children || []) {\n      promises.push(this.convertChildNode(parentSourceNode, parentNode, level, childNodeInfo));\n    }\n    await Promise.all(promises);\n  }\n\n  /**\n   * Load a child node having information from the node header\n   * @param parentNode a parent node tile object (@loaders.gl/tiles/Tile3D)\n   * @param childNodeInfo child information from 3DNodeIndexDocument\n   *   (https://github.com/Esri/i3s-spec/blob/master/docs/1.7/nodeReference.cmn.md)\n   */\n  private async _loadChildNode(parentNode: Tile3D, childNodeInfo: NodeReference): Promise<Tile3D> {\n    let header;\n    if (this.sourceTileset!.tileset.nodePages) {\n      console.log(`Node conversion: ${childNodeInfo.id}`); // eslint-disable-line no-console,no-undef\n      header = await this.sourceTileset!.tileset.nodePagesTile.formTileFromNodePages(\n        childNodeInfo.id\n      );\n    } else {\n      const {loader} = this.sourceTileset!;\n      const nodeUrl = this._relativeUrlToFullUrl(parentNode.url, childNodeInfo.href!);\n      // load metadata\n      const options = {\n        i3s: {\n          ...this.sourceTileset!.loadOptions,\n          isTileHeader: true,\n          loadContent: false\n        }\n      };\n\n      console.log(`Node conversion: ${nodeUrl}`); // eslint-disable-line no-console,no-undef\n      header = await load(nodeUrl, loader, options);\n    }\n    return new Tile3D(this.sourceTileset!, header, parentNode);\n  }\n\n  /**\n   * Make an url of a resource from its relative url having the base url\n   * @param baseUrl the base url. A resulting url will be related from this url\n   * @param relativeUrl a realtive url of a resource\n   */\n  private _relativeUrlToFullUrl(baseUrl: string, relativeUrl: string): string {\n    let resultArray = baseUrl.split('/');\n    const relativeUrlArray = relativeUrl.split('/');\n    for (const folder of relativeUrlArray) {\n      switch (folder) {\n        case '.':\n          continue; // eslint-disable-line no-continue\n        case '..':\n          resultArray = resultArray.slice(0, -1);\n          break;\n        default:\n          resultArray.push(folder);\n      }\n    }\n    return resultArray.join('/');\n  }\n\n  /**\n   * Do loading all attributes related to particular node.\n   * @param sourceChild\n   * @param attributeStorageInfo\n   * @returns Promise of attributes object.\n   */\n  private async _loadChildAttributes(\n    sourceChild: Tile3D,\n    attributeStorageInfo: AttributeStorageInfo\n  ): Promise<FeatureAttribute> {\n    const promises: any[] = [];\n    const {attributeUrls} = sourceChild.header;\n\n    for (let index = 0; index < attributeUrls.length; index++) {\n      const inputUrl = attributeUrls[index];\n      const attribute = attributeStorageInfo[index];\n      const options = {\n        attributeName: attribute.name,\n        attributeType: this._getAttributeType(attribute)\n      };\n\n      promises.push(load(inputUrl, I3SAttributeLoader, options));\n    }\n    const attributesList = await Promise.all(promises);\n    this._replaceNestedArrays(attributesList);\n    return Object.assign({}, ...attributesList);\n  }\n\n  /**\n   * Returns attribute type for loading attributes\n   * @param attribute\n   * Workaround for I3S v1.6. There is no attribute.attributeValues.valueType field in attribute.\n   * There is an 'Oid32' type if attribute has objectIds property.\n   * Doc: https://github.com/Esri/i3s-spec/blob/master/docs/1.6/attributeStorageInfo.cmn.md\n   */\n  private _getAttributeType(attribute: AttributeStorageInfo): string {\n    if (attribute.attributeValues) {\n      return attribute.attributeValues.valueType;\n    } else if (attribute.objectIds) {\n      return 'Oid32';\n    }\n    return '';\n  }\n\n  /**\n   * Make simple arrays from attribute typed arrays.\n   * @param attributesList\n   */\n  private _replaceNestedArrays(attributesList: FeatureAttribute[]): void {\n    for (let index = 0; index < attributesList.length; index++) {\n      const attributeObject = attributesList[index];\n\n      for (const key in attributeObject) {\n        attributeObject[key] = Array.from(attributeObject[key]);\n      }\n    }\n  }\n\n  /**\n   * Print statistics in the end of conversion\n   * @param params - output files data\n   */\n  private async _finishConversion(params: {\n    slpk: boolean;\n    outputPath: string;\n    tilesetName: string;\n  }): Promise<void> {\n    const filesSize = await calculateFilesSize(params);\n    const diff = process.hrtime(this.conversionStartTime);\n    const conversionTime = timeConverter(diff);\n\n    console.log(`------------------------------------------------`); // eslint-disable-line\n    console.log(`Finish conversion of ${I3S}`); // eslint-disable-line\n    console.log(`Total conversion time: ${conversionTime}`); // eslint-disable-line\n    console.log(`Vertex count: `, this.vertexCounter); // eslint-disable-line\n    console.log(`File(s) size: `, filesSize, ' bytes'); // eslint-disable-line\n    console.log(`------------------------------------------------`); // eslint-disable-line\n  }\n\n  private async loadWorkers(): Promise<void> {\n    console.log(`Loading workers source...`); // eslint-disable-line no-undef, no-console\n    const tile3dAttributesWorkerUrl = getWorkerURL(Tile3dAttributesWorker, {...getLoaderOptions()});\n    const sourceResponse = await fetchFile(tile3dAttributesWorkerUrl);\n    const source = await sourceResponse.text();\n\n    this.workerSource.tile3dWorkerSource = source;\n    console.log(`Loading workers source completed!`); // eslint-disable-line no-undef, no-console\n  }\n}\n"],"mappings":"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"}