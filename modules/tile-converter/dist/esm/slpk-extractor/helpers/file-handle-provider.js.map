{"version":3,"file":"file-handle-provider.js","names":["promises","fsPromises","FileHandleProvider","from","path","fileDescriptor","open","stat","size","constructor","_defineProperty","getUint8","offset","val","Uint8Array","read","Buffer","alloc","buffer","at","undefined","Error","getUint16","Uint16Array","getUint32","Uint32Array","slice","startOffset","endOffset","length"],"sources":["../../../../src/slpk-extractor/helpers/file-handle-provider.ts"],"sourcesContent":["import {FileProvider} from '@loaders.gl/i3s';\nimport {promises as fsPromises, PathLike} from 'fs';\n\n/**\n * Provides file data using node fs library\n */\nexport class FileHandleProvider implements FileProvider {\n  /**\n   * Returns a new copy of FileHandleProvider\n   * @param path The path to the file in file system\n   */\n  static async from(path: PathLike): Promise<FileHandleProvider> {\n    const fileDescriptor = await fsPromises.open(path);\n    return new FileHandleProvider(fileDescriptor, (await fileDescriptor.stat()).size);\n  }\n\n  /**\n   * The FileHandle from which data is provided\n   */\n  private fileDescriptor: fsPromises.FileHandle;\n\n  /**\n   * The file length in bytes\n   */\n  private size: number;\n\n  private constructor(fileDescriptor: fsPromises.FileHandle, size: number) {\n    this.fileDescriptor = fileDescriptor;\n    this.size = size;\n  }\n\n  /**\n   * Gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint8(offset: number): Promise<number> {\n    const val = new Uint8Array(\n      (await this.fileDescriptor.read(Buffer.alloc(1), 0, 1, offset)).buffer.buffer\n    ).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n\n  /**\n   * Gets an unsigned 16-bit integer (unsigned byte) at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint16(offset: number): Promise<number> {\n    const val = new Uint16Array(\n      (await this.fileDescriptor.read(Buffer.alloc(2), 0, 2, offset)).buffer.buffer\n    ).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n\n  /**\n   * Gets an unsigned 32-bit integer (unsigned byte) at the specified byte offset from the start of the file.\n   * @param offset The offset, in bytes, from the start of the file where to read the data.\n   */\n  async getUint32(offset: number): Promise<number> {\n    const val = new Uint32Array(\n      (await this.fileDescriptor.read(Buffer.alloc(4), 0, 4, offset)).buffer.buffer\n    ).at(0);\n    if (val === undefined) {\n      throw new Error('something went wrong');\n    }\n    return val;\n  }\n\n  /**\n   * returns an ArrayBuffer whose contents are a copy of this file bytes from startOffset, inclusive, up to endOffset, exclusive.\n   * @param startOffset The offset, in bytes, from the start of the file where to start reading the data.\n   * @param endOffset The offset, in bytes, from the start of the file where to end reading the data.\n   */\n  async slice(startOffset: number, endOffset: number): Promise<ArrayBuffer> {\n    const length = endOffset - startOffset;\n    return (await this.fileDescriptor.read(Buffer.alloc(length), 0, length, startOffset)).buffer\n      .buffer;\n  }\n\n  /**\n   * the length (in bytes) of the data.\n   */\n  get length(): number {\n    return this.size;\n  }\n}\n"],"mappings":";AACA,SAAQA,QAAQ,IAAIC,UAAU,QAAiB,IAAI;AAKnD,OAAO,MAAMC,kBAAkB,CAAyB;EAKtD,aAAaC,IAAIA,CAACC,IAAc,EAA+B;IAC7D,MAAMC,cAAc,GAAG,MAAMJ,UAAU,CAACK,IAAI,CAACF,IAAI,CAAC;IAClD,OAAO,IAAIF,kBAAkB,CAACG,cAAc,EAAE,CAAC,MAAMA,cAAc,CAACE,IAAI,CAAC,CAAC,EAAEC,IAAI,CAAC;EACnF;EAYQC,WAAWA,CAACJ,cAAqC,EAAEG,IAAY,EAAE;IAAAE,eAAA;IAAAA,eAAA;IACvE,IAAI,CAACL,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACG,IAAI,GAAGA,IAAI;EAClB;EAMA,MAAMG,QAAQA,CAACC,MAAc,EAAmB;IAC9C,MAAMC,GAAG,GAAG,IAAIC,UAAU,CACxB,CAAC,MAAM,IAAI,CAACT,cAAc,CAACU,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEL,MAAM,CAAC,EAAEM,MAAM,CAACA,MACzE,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC;IACP,IAAIN,GAAG,KAAKO,SAAS,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,OAAOR,GAAG;EACZ;EAMA,MAAMS,SAASA,CAACV,MAAc,EAAmB;IAC/C,MAAMC,GAAG,GAAG,IAAIU,WAAW,CACzB,CAAC,MAAM,IAAI,CAAClB,cAAc,CAACU,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEL,MAAM,CAAC,EAAEM,MAAM,CAACA,MACzE,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC;IACP,IAAIN,GAAG,KAAKO,SAAS,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,OAAOR,GAAG;EACZ;EAMA,MAAMW,SAASA,CAACZ,MAAc,EAAmB;IAC/C,MAAMC,GAAG,GAAG,IAAIY,WAAW,CACzB,CAAC,MAAM,IAAI,CAACpB,cAAc,CAACU,IAAI,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAEL,MAAM,CAAC,EAAEM,MAAM,CAACA,MACzE,CAAC,CAACC,EAAE,CAAC,CAAC,CAAC;IACP,IAAIN,GAAG,KAAKO,SAAS,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,OAAOR,GAAG;EACZ;EAOA,MAAMa,KAAKA,CAACC,WAAmB,EAAEC,SAAiB,EAAwB;IACxE,MAAMC,MAAM,GAAGD,SAAS,GAAGD,WAAW;IACtC,OAAO,CAAC,MAAM,IAAI,CAACtB,cAAc,CAACU,IAAI,CAACC,MAAM,CAACC,KAAK,CAACY,MAAM,CAAC,EAAE,CAAC,EAAEA,MAAM,EAAEF,WAAW,CAAC,EAAET,MAAM,CACzFA,MAAM;EACX;EAKA,IAAIW,MAAMA,CAAA,EAAW;IACnB,OAAO,IAAI,CAACrB,IAAI;EAClB;AACF"}