{"version":3,"file":"slpk-extractor.js","names":["isBrowser","BROWSER_ERROR_MESSAGE","FileHandleProvider","parseZipLocalFileHeader","path","GZipCompression","writeFile","indexNames","SLPKExtractor","extract","options","console","log","inputUrl","provider","from","localHeader","_localHeader","_localHeader2","unGzip","name","correctIndexNames","fileName","data","slice","fileDataOffset","compressedSize","outputPath","includes","filename","join","dirname","parts","exec","concat","at","file","_file$name","test","_file$name2","compression","decompressedData","decompress","Promise","resolve","finalPath","dirName"],"sources":["../../../src/slpk-extractor/slpk-extractor.ts"],"sourcesContent":["import {isBrowser} from '@loaders.gl/core';\n\nimport {BROWSER_ERROR_MESSAGE} from '../constants';\nimport {FileHandleProvider} from './helpers/file-handle-provider';\nimport {parseZipLocalFileHeader} from '@loaders.gl/i3s';\nimport {path} from '@loaders.gl/loader-utils';\nimport {GZipCompression} from '@loaders.gl/compression';\nimport {writeFile} from '../lib/utils/file-utils';\n\n/**\n * names of files that should be changed to index\n */\nconst indexNames = [\n  '3dSceneLayer.json.gz',\n  '3dNodeIndexDocument.json.gz',\n  'sharedResource.json.gz'\n];\n\n/**\n * Description of the file in the SLPK\n */\ntype File = {\n  name: string | null;\n  data: ArrayBuffer;\n};\n\n/**\n * Converter from slpk to i3s\n */\nexport default class SLPKExtractor {\n  /**\n   * extract slpk to i3s\n   * @param options\n   * @param options.inputUrl the url to read SLPK file\n   * @param options.outputPath the output filename\n   */\n  public async extract(options: {inputUrl: string; outputPath: string}): Promise<string> {\n    if (isBrowser) {\n      console.log(BROWSER_ERROR_MESSAGE);\n      return BROWSER_ERROR_MESSAGE;\n    }\n    const {inputUrl} = options;\n\n    const provider = await FileHandleProvider.from(inputUrl);\n\n    let localHeader = await parseZipLocalFileHeader(0, provider);\n    while (localHeader) {\n      await this.writeFile(\n        await this.unGzip({\n          name: this.correctIndexNames(localHeader.fileName),\n          data: await provider.slice(\n            localHeader.fileDataOffset,\n            localHeader.fileDataOffset + localHeader.compressedSize\n          )\n        }),\n        options.outputPath\n      );\n      localHeader = await parseZipLocalFileHeader(\n        localHeader?.fileDataOffset + localHeader?.compressedSize,\n        provider\n      );\n    }\n\n    return 'success';\n  }\n\n  /**\n   * Defines file name and path for i3s format\n   * @param fileName initial file name and path\n   */\n  private correctIndexNames(fileName: string): string | null {\n    if (indexNames.includes(path.filename(path.join('/', fileName)))) {\n      return path.join(path.dirname(fileName), 'index.json.gz');\n    }\n    // finds path with name part and extention part\n    let parts = /^(.*\\/[^\\/\\.]*)(\\..+)$/.exec(fileName);\n    if (!parts) {\n      return null;\n    }\n    return `${parts?.at(1)}/index${parts?.at(2)}`;\n  }\n\n  private async unGzip(file: File): Promise<File> {\n    if (/\\.gz$/.test(file.name ?? '')) {\n      const compression = new GZipCompression();\n\n      const decompressedData = await compression.decompress(file.data);\n      return {data: decompressedData, name: (file.name ?? '').slice(0, -3)};\n    }\n    return Promise.resolve(file);\n  }\n\n  private async writeFile(options: File, outputPath: string): Promise<void> {\n    if (!options.name) {\n      return;\n    }\n    const finalPath = path.join(outputPath, options.name);\n    const dirName = path.dirname(finalPath);\n    const fileName = path.filename(finalPath);\n    await writeFile(dirName, options.data, fileName);\n  }\n}\n"],"mappings":"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"}