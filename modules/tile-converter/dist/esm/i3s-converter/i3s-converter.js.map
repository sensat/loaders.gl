{"version":3,"file":"i3s-converter.js","names":["load","encode","fetchFile","getLoaderOptions","isBrowser","Tileset3D","CesiumIonLoader","Tiles3DLoader","join","v4","uuidv4","process","transform","md5","NodePages","writeFile","removeDir","writeFileForSlpk","removeFile","compressFileWithGzip","compressWithChildProcess","calculateFilesSize","timeConverter","convertB3dmToI3sGeometry","getPropertyTable","createBoundingVolumes","convertBoundingVolumeToI3SFullExtent","createSceneServerPath","convertGeometricErrorToScreenThreshold","PGMLoader","LAYERS","layersTemplate","GEOMETRY_DEFINITION","geometryDefinitionTemlate","SHARED_RESOURCES","sharedResourcesTemplate","validateNodeBoundingVolumes","KTX2BasisWriterWorker","ImageWriter","getWorkerURL","WorkerFarm","DracoWriterWorker","WriteQueue","I3SAttributesWorker","BROWSER_ERROR_MESSAGE","createdStorageAttribute","createFieldAttribute","createPopupInfo","getAttributeType","getFieldAttributeType","NodeIndexDocument","ION_DEFAULT_TOKEN","_process$env","env","IonToken","HARDCODED_NODES_PER_PAGE","_3D_TILES","_3D_OBJECT_LAYER_TYPE","REFRESH_TOKEN_TIMEOUT","CESIUM_DATASET_PREFIX","I3SConverter","constructor","_defineProperty","nodePages","options","layers0Path","materialMap","Map","materialDefinitions","geometryMap","geometryConfigs","vertexCounter","layers0","featuresHashArray","refinementCounter","tilesCount","tilesWithAddRefineCount","validate","generateTextures","generateBoundingVolumes","layersHasTexture","compressList","convert","console","log","conversionStartTime","hrtime","tilesetName","slpk","egmFilePath","inputUrl","outputPath","draco","sevenZipExe","maxDepth","token","instantNodeWriting","mergeMaterials","Boolean","Loader","indexOf","writeQueue","startListening","geoidHeightModel","useWriteFunction","loadWorkers","_sourceTilesetJson$ro","_sourceTilesetJson$ro2","preloadOptions","_fetchPreloadOptions","tilesetOptions","loadOptions","_nodeWorkers","reuseWorkers","basis","format","workerUrl","headers","fetch","Object","assign","sourceTilesetJson","sourceTileset","_createAndSaveTileset","root","boundingVolume","region","_finishConversion","error","workerFarm","getWorkerFarm","destroy","boundingVolumeRegion","tilesetPath","concat","e","_formLayers0","sourceRootTile","boundingVolumes","push","index","lodThreshold","obb","children","rootNode","createRootNode","_convertNodesTree","geometryDefinitions","map","config","geometryConfig","store","defaultGeometrySchema","ordering","filter","attribute","_writeLayers0","filePath","save","finalize","_createSlpk","_this$sourceTileset","_this$sourceTileset2","_this$sourceTileset2$","fullExtent","zmin","zmax","extent","xmin","ymin","xmax","ymax","layers0data","version","toUpperCase","id","name","href","nodesPerPage","compressGeometry","_loadTile","isContentSupported","childNodes","_createNode","childNode","addChildren","_addChildrenWithNeighborsAndWriteFile","parentNode","sourceTiles","level","unloadContent","enqueue","archiveKey","writePromise","JSON","stringify","slpkTilesetPath","slpkFileName","data","_addChildren","addNeighbors","convertNestedTileset","_ref","sourceTile","convertNode","_ref2","type","_this$layers","_this$layers$attribut","_checkAddRefinementTypeForTile","_updateTilesetOptions","propertyTable","content","attributeStorageInfo","length","_convertPropertyTableToNodeAttributes","resourcesData","_convertResources","inPageId","nodes","nodeIds","nodesInPage","emptyResources","geometry","compressedGeometry","texture","hasUvRegions","sharedResources","meshMaterial","vertexCount","attributes","featureCount","resources","lodSelection","maxScreenThresholdSQ","find","val","metricType","maxError","nodeInPage","_updateNodeInNodePages","nodeData","createNodeIndexDocument","node","addData","mesh","_writeResources","boundingVolumeWarnings","warn","parentId","_this$layers2","draftObb","center","halfSize","quaternion","workerSource","definition","findOrCreateGeometryDefinition","resource","material","nodeId","getNodeById","updateAll","updateMaterialByNodeId","_findOrCreateMaterial","texelCountHint","image","height","width","updateTexelCountHintByNodeId","updateVertexCountByNodeId","updateNodeAttributeByNodeId","updateFeatureCountByNodeId","saveNode","nodePath","geometryBuffer","childPath","slpkChildPath","_writeGeometries","_writeShared","_writeTexture","_writeAttributes","slpkGeometryPath","geometryPath","slpkCompressedGeometryPath","compressedGeometryPath","sharedData","sharedDataStr","slpkSharedPath","sharedPath","_getFormatByMimeType","mimeType","formats","textureData","bufferView","writeTextureFile","copyArrayBuffer","subarray","arrayToEncode","Uint8Array","ktx2TextureData","source","ktx2","decodedFromKTX2TextureData","textureSetDefinitions","atlas","slpkTexturePath","compress","texturePath","_this$layers3","_this$layers3$attribu","arguments","undefined","folderName","key","fileBuffer","slpkAttributesPath","attributesPath","hash","has","get","newMaterialId","set","hasTexture","newGeometryId","attributeIndex","propertyTableWithObjectId","OBJECTID","firstAttribute","attributeType","storageAttribute","fieldAttributeType","fieldAttribute","popupInfo","fields","layerType","params","addRefinementPercentage","filesSize","diff","conversionTime","preload","accessToken","refreshTokenTime","tile","ADD_TILE_REFINEMENT","refine","_sourceRootTile$conte","includes","url","sourceResponse","text","i3sAttributesWorkerUrl","I3SAttributes"],"sources":["../../../src/i3s-converter/i3s-converter.ts"],"sourcesContent":["// loaders.gl, MIT license\n\nimport type {Tileset3DProps} from '@loaders.gl/tiles';\nimport type {FeatureTableJson} from '@loaders.gl/3d-tiles';\nimport type {WriteQueueItem} from '../lib/utils/write-queue';\nimport type {\n  SceneLayer3D,\n  BoundingVolumes,\n  MaxScreenThresholdSQ,\n  NodeInPage\n} from '@loaders.gl/i3s';\nimport {load, encode, fetchFile, getLoaderOptions, isBrowser} from '@loaders.gl/core';\nimport {Tileset3D} from '@loaders.gl/tiles';\nimport {CesiumIonLoader, Tiles3DLoader} from '@loaders.gl/3d-tiles';\nimport {Geoid} from '@math.gl/geoid';\nimport {join} from 'path';\nimport {v4 as uuidv4} from 'uuid';\nimport process from 'process';\nimport transform from 'json-map-transform';\nimport md5 from 'md5';\n\nimport NodePages from './helpers/node-pages';\nimport {writeFile, removeDir, writeFileForSlpk, removeFile} from '../lib/utils/file-utils';\nimport {\n  compressFileWithGzip,\n  compressWithChildProcess\n  // generateHash128FromZip,\n  // addFileToZip\n} from '../lib/utils/compress-util';\nimport {calculateFilesSize, timeConverter} from '../lib/utils/statistic-utills';\nimport convertB3dmToI3sGeometry, {getPropertyTable} from './helpers/geometry-converter';\nimport {\n  createBoundingVolumes,\n  convertBoundingVolumeToI3SFullExtent\n} from './helpers/coordinate-converter';\nimport {createSceneServerPath} from './helpers/create-scene-server-path';\nimport {convertGeometricErrorToScreenThreshold} from '../lib/utils/lod-conversion-utils';\nimport {PGMLoader} from '../pgm-loader';\n\nimport {LAYERS as layersTemplate} from './json-templates/layers';\nimport {GEOMETRY_DEFINITION as geometryDefinitionTemlate} from './json-templates/geometry-definitions';\nimport {SHARED_RESOURCES as sharedResourcesTemplate} from './json-templates/shared-resources';\nimport {validateNodeBoundingVolumes} from './helpers/node-debug';\n// loaders.gl, MIT license\n\nimport {Tile3D} from '@loaders.gl/tiles';\nimport {KTX2BasisWriterWorker} from '@loaders.gl/textures';\nimport {LoaderWithParser} from '@loaders.gl/loader-utils';\nimport {I3SMaterialDefinition, TextureSetDefinitionFormats} from '@loaders.gl/i3s/src/types';\nimport {ImageWriter} from '@loaders.gl/images';\nimport {GLTFImagePostprocessed} from '@loaders.gl/gltf';\nimport {I3SConvertedResources, SharedResourcesArrays} from './types';\nimport {getWorkerURL, WorkerFarm} from '@loaders.gl/worker-utils';\nimport {DracoWriterWorker} from '@loaders.gl/draco';\nimport WriteQueue from '../lib/utils/write-queue';\nimport {I3SAttributesWorker} from '../i3s-attributes-worker';\nimport {BROWSER_ERROR_MESSAGE} from '../constants';\nimport {\n  createdStorageAttribute,\n  createFieldAttribute,\n  createPopupInfo,\n  getAttributeType,\n  getFieldAttributeType\n} from './helpers/feature-attributes';\nimport {NodeIndexDocument} from './helpers/node-index-document';\n\nconst ION_DEFAULT_TOKEN =\n  process.env?.IonToken || // eslint-disable-line\n  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJlYWMxMzcyYy0zZjJkLTQwODctODNlNi01MDRkZmMzMjIxOWIiLCJpZCI6OTYyMCwic2NvcGVzIjpbImFzbCIsImFzciIsImdjIl0sImlhdCI6MTU2Mjg2NjI3M30.1FNiClUyk00YH_nWfSGpiQAjR5V2OvREDq1PJ5QMjWQ'; // eslint-disable-line\nconst HARDCODED_NODES_PER_PAGE = 64;\nconst _3D_TILES = '3DTILES';\nconst _3D_OBJECT_LAYER_TYPE = '3DObject';\nconst REFRESH_TOKEN_TIMEOUT = 1800; // 30 minutes in seconds\nconst CESIUM_DATASET_PREFIX = 'https://';\n// const FS_FILE_TOO_LARGE = 'ERR_FS_FILE_TOO_LARGE';\n\n/**\n * Converter from 3d-tiles tileset to i3s layer\n */\nexport default class I3SConverter {\n  nodePages: NodePages;\n  options: any;\n  layers0Path: string;\n  materialMap: Map<string, number>;\n  materialDefinitions: I3SMaterialDefinition[];\n  geometryMap: Map<string, number>;\n  geometryConfigs: {hasTexture: boolean; hasUvRegions: boolean}[];\n  vertexCounter: number;\n  layers0: SceneLayer3D | null;\n  featuresHashArray: string[];\n  refinementCounter: {\n    tilesCount: number;\n    tilesWithAddRefineCount: number;\n  };\n  validate: boolean;\n  boundingVolumeWarnings?: string[] = [];\n  conversionStartTime: [number, number] = [0, 0];\n  refreshTokenTime: [number, number] = [0, 0];\n  sourceTileset: Tileset3D | null = null;\n  geoidHeightModel: Geoid | null = null;\n  Loader: LoaderWithParser = Tiles3DLoader;\n  generateTextures: boolean;\n  generateBoundingVolumes: boolean;\n  layersHasTexture: boolean;\n  workerSource: {[key: string]: string} = {};\n  writeQueue: WriteQueue<WriteQueueItem> = new WriteQueue();\n  compressList: string[] | null = null;\n\n  constructor() {\n    this.nodePages = new NodePages(writeFile, HARDCODED_NODES_PER_PAGE, this);\n    this.options = {};\n    this.layers0Path = '';\n    this.materialMap = new Map();\n    this.materialDefinitions = [];\n    this.geometryMap = new Map();\n    this.geometryConfigs = [];\n    this.vertexCounter = 0;\n    this.layers0 = null;\n    this.featuresHashArray = [];\n    this.refinementCounter = {\n      tilesCount: 0,\n      tilesWithAddRefineCount: 0\n    };\n    this.validate = false;\n    this.generateTextures = false;\n    this.generateBoundingVolumes = false;\n    this.layersHasTexture = false;\n    this.compressList = null;\n  }\n\n  /**\n   * Convert a 3d tileset\n   * @param options\n   * @param options.inputUrl the url to read the tileset from\n   * @param options.outputPath the output filename\n   * @param options.tilesetName the output name of the tileset\n   * @param options.maxDepth The max tree depth of conversion\n   * @param options.slpk Generate slpk (Scene Layer Packages) output file\n   * @param options.sevenZipExe Location of 7z.exe archiver to create slpk on Windows\n   * @param options.egmFilePath location of *.pgm file to convert heights from ellipsoidal to gravity-related format\n   * @param options.token Token for Cesium ION tilesets authentication\n   * @param options.draco Generate I3S 1.7 draco compressed geometries\n   * @param options.validate -enable validation\n   * @param options.generateTextures - generate alternative type of textures (to have non-compressed jpeg/png and compressed ktx2)\n   * @param options.generateBoundingVolumes - generate bounding volumes from vertices coordinates instead of source tiles bounding volumes\n   * @param options.instantNodeWriting - Keep created 3DNodeIndexDocument files on disk instead of memory. This option reduce memory usage but decelerates conversion speed\n   */\n  async convert(options: {\n    inputUrl: string;\n    outputPath: string;\n    tilesetName: string;\n    sevenZipExe: string;\n    egmFilePath: string;\n    maxDepth?: number;\n    slpk?: boolean;\n    token?: string;\n    draco?: boolean;\n    mergeMaterials?: boolean;\n    validate?: boolean;\n    generateTextures?: boolean;\n    generateBoundingVolumes?: boolean;\n    instantNodeWriting?: boolean;\n  }): Promise<any> {\n    if (isBrowser) {\n      console.log(BROWSER_ERROR_MESSAGE);\n      return BROWSER_ERROR_MESSAGE;\n    }\n    this.conversionStartTime = process.hrtime();\n    const {\n      tilesetName,\n      slpk,\n      egmFilePath,\n      inputUrl,\n      validate,\n      outputPath,\n      draco = true,\n      sevenZipExe,\n      maxDepth,\n      token,\n      generateTextures,\n      generateBoundingVolumes,\n      instantNodeWriting = false,\n      mergeMaterials = true\n    } = options;\n    this.options = {\n      maxDepth,\n      slpk,\n      sevenZipExe,\n      egmFilePath,\n      draco,\n      token,\n      inputUrl,\n      instantNodeWriting,\n      mergeMaterials\n    };\n    this.compressList = (this.options.instantNodeWriting && []) || null;\n    this.validate = Boolean(validate);\n    this.Loader = inputUrl.indexOf(CESIUM_DATASET_PREFIX) !== -1 ? CesiumIonLoader : Tiles3DLoader;\n    this.generateTextures = Boolean(generateTextures);\n    this.generateBoundingVolumes = Boolean(generateBoundingVolumes);\n\n    this.writeQueue = new WriteQueue();\n    this.writeQueue.startListening();\n\n    console.log('Loading egm file...'); // eslint-disable-line\n    this.geoidHeightModel = await load(egmFilePath, PGMLoader);\n    console.log('Loading egm file completed!'); // eslint-disable-line\n\n    if (slpk) {\n      this.nodePages.useWriteFunction(writeFileForSlpk);\n    }\n\n    await this.loadWorkers();\n\n    try {\n      const preloadOptions = await this._fetchPreloadOptions();\n      const tilesetOptions: Tileset3DProps = {\n        loadOptions: {\n          _nodeWorkers: true,\n          reuseWorkers: true,\n          basis: {\n            format: 'rgba32',\n            // We need to load local fs workers because nodejs can't load workers from the Internet\n            workerUrl: './modules/textures/dist/basis-worker-node.js'\n          },\n          // We need to load local fs workers because nodejs can't load workers from the Internet\n          draco: {workerUrl: './modules/draco/dist/draco-worker-node.js'}\n        }\n      };\n      if (preloadOptions.headers) {\n        tilesetOptions.loadOptions!.fetch = {headers: preloadOptions.headers};\n      }\n      Object.assign(tilesetOptions, preloadOptions);\n      const sourceTilesetJson = await load(inputUrl, this.Loader, tilesetOptions.loadOptions);\n      // console.log(tilesetJson); // eslint-disable-line\n      this.sourceTileset = new Tileset3D(sourceTilesetJson, tilesetOptions);\n\n      await this._createAndSaveTileset(\n        outputPath,\n        tilesetName,\n        sourceTilesetJson?.root?.boundingVolume?.region\n      );\n      await this._finishConversion({slpk: Boolean(slpk), outputPath, tilesetName});\n      return sourceTilesetJson;\n    } catch (error) {\n      throw error;\n    } finally {\n      // Clean up worker pools\n      const workerFarm = WorkerFarm.getWorkerFarm({});\n      workerFarm.destroy();\n    }\n  }\n\n  /**\n   * Convert and save the layer and embedded tiles\n   * @param outputPath - path to save output data\n   * @param tilesetName - new tileset path\n   */\n  private async _createAndSaveTileset(\n    outputPath: string,\n    tilesetName: string,\n    boundingVolumeRegion?: number[]\n  ): Promise<void> {\n    const tilesetPath = join(`${outputPath}`, `${tilesetName}`);\n    // Removing the tilesetPath needed to exclude erroneous files after conversion\n    try {\n      await removeDir(tilesetPath);\n    } catch (e) {\n      // do nothing\n    }\n\n    this.layers0Path = join(tilesetPath, 'SceneServer', 'layers', '0');\n\n    this._formLayers0(tilesetName, boundingVolumeRegion);\n\n    this.materialDefinitions = [];\n    this.materialMap = new Map();\n\n    const sourceRootTile: Tile3D = this.sourceTileset!.root!;\n    const boundingVolumes = createBoundingVolumes(sourceRootTile, this.geoidHeightModel!);\n    await this.nodePages.push({\n      index: 0,\n      lodThreshold: 0,\n      obb: boundingVolumes.obb,\n      children: []\n    });\n\n    const rootNode = await NodeIndexDocument.createRootNode(boundingVolumes, this);\n    await this._convertNodesTree(rootNode, sourceRootTile);\n\n    this.layers0!.materialDefinitions = this.materialDefinitions;\n    // @ts-ignore\n    this.layers0.geometryDefinitions = transform(\n      this.geometryConfigs.map((config) => ({\n        geometryConfig: {...config, draco: this.options.draco}\n      })),\n      geometryDefinitionTemlate()\n    );\n\n    if (this.layersHasTexture === false) {\n      this.layers0!.store.defaultGeometrySchema.ordering =\n        this.layers0!.store.defaultGeometrySchema.ordering.filter(\n          (attribute) => attribute !== 'uv0'\n        );\n    }\n\n    await this._writeLayers0();\n    createSceneServerPath(tilesetName, this.layers0!, tilesetPath);\n    for (const filePath of this.compressList || []) {\n      await compressFileWithGzip(filePath);\n      await removeFile(filePath);\n    }\n    await this.nodePages.save();\n    await this.writeQueue.finalize();\n    await this._createSlpk(tilesetPath);\n  }\n\n  /**\n   * Form object of 3DSceneLayer https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DSceneLayer.cmn.md\n   * @param  tilesetName - Name of layer\n   */\n  private _formLayers0(tilesetName: string, boundingVolumeRegion?: number[]): void {\n    const fullExtent = convertBoundingVolumeToI3SFullExtent(\n      this.sourceTileset?.boundingVolume || this.sourceTileset?.root?.boundingVolume\n    );\n    if (boundingVolumeRegion) {\n      fullExtent.zmin = boundingVolumeRegion[4];\n      fullExtent.zmax = boundingVolumeRegion[5];\n    }\n    const extent = [fullExtent.xmin, fullExtent.ymin, fullExtent.xmax, fullExtent.ymax];\n    const layers0data = {\n      version: `{${uuidv4().toUpperCase()}}`,\n      id: 0,\n      name: tilesetName,\n      href: './layers/0',\n      store: {\n        id: `{${uuidv4().toUpperCase()}}`,\n        extent\n      },\n      nodePages: {\n        nodesPerPage: HARDCODED_NODES_PER_PAGE\n      },\n      compressGeometry: this.options.draco,\n      fullExtent\n    };\n    this.layers0 = transform(layers0data, layersTemplate());\n  }\n\n  /**\n   * Form object of 3DSceneLayer https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DSceneLayer.cmn.md\n   * @param rootNode - 3DNodeIndexDocument of root node https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DNodeIndexDocument.cmn.md\n   * @param sourceRootTile - Source (3DTile) tile data\n   */\n  private async _convertNodesTree(\n    rootNode: NodeIndexDocument,\n    sourceRootTile: Tile3D\n  ): Promise<void> {\n    await this.sourceTileset!._loadTile(sourceRootTile);\n    if (this.isContentSupported(sourceRootTile)) {\n      const childNodes = await this._createNode(rootNode, sourceRootTile, 0);\n      for (const childNode of childNodes) {\n        await childNode.save();\n      }\n      await rootNode.addChildren(childNodes);\n    } else {\n      await this._addChildrenWithNeighborsAndWriteFile({\n        parentNode: rootNode,\n        sourceTiles: sourceRootTile.children,\n        level: 1\n      });\n    }\n    await sourceRootTile.unloadContent();\n    await rootNode.save();\n  }\n\n  /**\n   * Write 3DSceneLayer https://github.com/Esri/i3s-spec/blob/master/docs/1.7/3DSceneLayer.cmn.md in file\n   */\n  private async _writeLayers0(): Promise<void> {\n    if (this.options.slpk) {\n      await this.writeQueue.enqueue({\n        archiveKey: '3dSceneLayer.json.gz',\n        writePromise: () =>\n          writeFileForSlpk(this.layers0Path, JSON.stringify(this.layers0), '3dSceneLayer.json')\n      });\n    } else {\n      await this.writeQueue.enqueue({\n        writePromise: () => writeFile(this.layers0Path, JSON.stringify(this.layers0))\n      });\n    }\n  }\n\n  /**\n   * Pack files into *.slpk archive\n   * @param tilesetPath - Path to save file\n   */\n  private async _createSlpk(tilesetPath: string): Promise<void> {\n    if (this.options.slpk) {\n      const slpkTilesetPath = join(tilesetPath, 'SceneServer', 'layers', '0');\n      const slpkFileName = `${tilesetPath}.slpk`;\n      await compressWithChildProcess(\n        slpkTilesetPath,\n        slpkFileName,\n        0,\n        '.',\n        this.options.sevenZipExe\n      );\n\n      // TODO: `addFileToZip` corrupts archive so it can't be validated with windows i3s_converter.exe\n      // const fileHash128Path = `${tilesetPath}/@specialIndexFileHASH128@`;\n      // try {\n      //   await generateHash128FromZip(slpkFileName, fileHash128Path);\n      //   await addFileToZip(\n      //     tilesetPath,\n      //     '@specialIndexFileHASH128@',\n      //     slpkFileName,\n      //     this.options.sevenZipExe\n      //   );\n      // } catch (error) {\n      //   if (error.code === FS_FILE_TOO_LARGE) {\n      //     console.warn(`${slpkFileName} file is too big to generate a hash`); // eslint-disable-line\n      //   } else {\n      //     console.error(error); // eslint-disable-line\n      //   }\n      // }\n      // All converted files are contained in slpk now they can be deleted\n      try {\n        await removeDir(tilesetPath);\n      } catch (e) {\n        // do nothing\n      }\n    }\n  }\n\n  /**\n   * Add child nodes recursively and write them to files\n   * @param data - arguments\n   * @param data.parentNode - 3DNodeIndexDocument of parent node\n   * @param data.sourceTiles - array of source child nodes\n   * @param data.level - level of node (distanse to root node in the tree)\n   */\n  private async _addChildrenWithNeighborsAndWriteFile(data: {\n    parentNode: NodeIndexDocument;\n    sourceTiles: Tile3D[];\n    level: number;\n  }): Promise<void> {\n    await this._addChildren(data);\n    await data.parentNode.addNeighbors();\n  }\n\n  /**\n   * Convert nested subtree of 3DTiles dataset\n   * @param param0\n   * @param data.parentNode - 3DNodeIndexDocument of parent node\n   * @param param0.sourceTile - source 3DTile data\n   * @param param0.level - tree level\n   */\n  private async convertNestedTileset({\n    parentNode,\n    sourceTile,\n    level\n  }: {\n    parentNode: NodeIndexDocument;\n    sourceTile: Tile3D;\n    level: number;\n  }) {\n    await this.sourceTileset!._loadTile(sourceTile);\n    await this._addChildren({\n      parentNode,\n      sourceTiles: sourceTile.children,\n      level: level + 1\n    });\n    await sourceTile.unloadContent();\n  }\n\n  /**\n   * Convert 3DTiles tile to I3S node\n   * @param param0\n   * @param param0.parentNode - 3DNodeIndexDocument of parent node\n   * @param param0.sourceTile - source 3DTile data\n   * @param param0.level - tree level\n   */\n  private async convertNode({\n    parentNode,\n    sourceTile,\n    level\n  }: {\n    parentNode: NodeIndexDocument;\n    sourceTile: Tile3D;\n    level: number;\n  }) {\n    const childNodes = await this._createNode(parentNode, sourceTile, level);\n    await parentNode.addChildren(childNodes);\n  }\n\n  /**\n   * Add child nodes recursively and write them to files\n   * @param param0 - arguments\n   * @param param0.parentNode - 3DNodeIndexDocument of parent node\n   * @param param0.sourceTile - source 3DTile data\n   * @param param0.level - tree level\n   */\n  private async _addChildren(data: {\n    parentNode: NodeIndexDocument;\n    sourceTiles: Tile3D[];\n    level: number;\n  }): Promise<void> {\n    const {sourceTiles, parentNode, level} = data;\n    if (this.options.maxDepth && level > this.options.maxDepth) {\n      return;\n    }\n    for (const sourceTile of sourceTiles) {\n      if (sourceTile.type === 'json') {\n        await this.convertNestedTileset({parentNode, sourceTile, level});\n      } else {\n        await this.convertNode({parentNode, sourceTile, level});\n      }\n      if (sourceTile.id) {\n        console.log(sourceTile.id); // eslint-disable-line\n      }\n    }\n  }\n\n  /**\n   * Convert tile to one or more I3S nodes\n   * @param parentNode - 3DNodeIndexDocument of parent node\n   * @param sourceTile - source 3DTile data\n   * @param level - tree level\n   */\n  private async _createNode(\n    parentNode: NodeIndexDocument,\n    sourceTile: Tile3D,\n    level: number\n  ): Promise<NodeIndexDocument[]> {\n    this._checkAddRefinementTypeForTile(sourceTile);\n\n    await this._updateTilesetOptions();\n    await this.sourceTileset!._loadTile(sourceTile);\n\n    let boundingVolumes = createBoundingVolumes(sourceTile, this.geoidHeightModel!);\n\n    const propertyTable = getPropertyTable(sourceTile.content);\n\n    if (propertyTable && !this.layers0?.attributeStorageInfo?.length) {\n      this._convertPropertyTableToNodeAttributes(propertyTable);\n    }\n\n    const resourcesData = await this._convertResources(\n      sourceTile,\n      parentNode.inPageId,\n      propertyTable\n    );\n\n    const nodes: NodeIndexDocument[] = [];\n    const nodeIds: number[] = [];\n    const nodesInPage: NodeInPage[] = [];\n    const emptyResources = {\n      geometry: null,\n      compressedGeometry: null,\n      texture: null,\n      hasUvRegions: false,\n      sharedResources: null,\n      meshMaterial: null,\n      vertexCount: null,\n      attributes: null,\n      featureCount: null,\n      boundingVolumes: null\n    };\n\n    for (const resources of resourcesData || [emptyResources]) {\n      this.layersHasTexture = this.layersHasTexture || Boolean(resources.texture);\n\n      if (this.generateBoundingVolumes && resources.boundingVolumes) {\n        boundingVolumes = resources.boundingVolumes;\n      }\n\n      const lodSelection = convertGeometricErrorToScreenThreshold(sourceTile, boundingVolumes);\n      const maxScreenThresholdSQ = lodSelection.find(\n        (val) => val.metricType === 'maxScreenThresholdSQ'\n      ) || {maxError: 0};\n\n      const nodeInPage = await this._updateNodeInNodePages(\n        maxScreenThresholdSQ,\n        boundingVolumes,\n        sourceTile,\n        parentNode.inPageId,\n        resources\n      );\n\n      const nodeData = await NodeIndexDocument.createNodeIndexDocument(\n        parentNode,\n        boundingVolumes,\n        lodSelection,\n        nodeInPage,\n        resources\n      );\n      const node = await new NodeIndexDocument(nodeInPage.index, this).addData(nodeData);\n      nodes.push(node);\n\n      if (nodeInPage.mesh) {\n        await this._writeResources(resources, node.id);\n      }\n\n      if (this.validate) {\n        this.boundingVolumeWarnings = validateNodeBoundingVolumes(nodeData);\n\n        if (this.boundingVolumeWarnings && this.boundingVolumeWarnings.length) {\n          console.warn('Bounding Volume Warnings: ', ...this.boundingVolumeWarnings); //eslint-disable-line\n        }\n      }\n\n      nodeIds.push(nodeInPage.index);\n      nodesInPage.push(nodeInPage);\n    }\n\n    sourceTile.unloadContent();\n\n    await this._addChildrenWithNeighborsAndWriteFile({\n      parentNode: nodes[0],\n      sourceTiles: sourceTile.children,\n      level: level + 1\n    });\n    return nodes;\n  }\n\n  /**\n   * Convert tile to one or more I3S nodes\n   * @param sourceTile - source tile (3DTile)\n   * @param parentId - id of parent node in node pages\n   * @param propertyTable - batch table from b3dm / feature properties from EXT_FEATURE_METADATA\n   * @returns - converted node resources\n   */\n  private async _convertResources(\n    sourceTile: Tile3D,\n    parentId: number,\n    propertyTable: FeatureTableJson | null\n  ): Promise<I3SConvertedResources[] | null> {\n    if (!this.isContentSupported(sourceTile)) {\n      return null;\n    }\n    const draftObb = {\n      center: [],\n      halfSize: [],\n      quaternion: []\n    };\n    const resourcesData = await convertB3dmToI3sGeometry(\n      sourceTile.content,\n      async () => (await this.nodePages.push({index: 0, obb: draftObb}, parentId)).index,\n      propertyTable,\n      this.featuresHashArray,\n      this.layers0?.attributeStorageInfo,\n      this.options.draco,\n      this.generateBoundingVolumes,\n      this.options.mergeMaterials,\n      this.geoidHeightModel!,\n      this.workerSource\n    );\n    return resourcesData;\n  }\n\n  /**\n   * Update node object (https://github.com/Esri/i3s-spec/blob/master/docs/1.7/node.cmn.md)\n   * in node pages (https://github.com/Esri/i3s-spec/blob/master/docs/1.7/nodePage.cmn.md)\n   * @param maxScreenThresholdSQ - Level of Details (LOD) metric\n   * @param boundingVolumes - Bounding volumes\n   * @param sourceTile - source tile (3DTile)\n   * @param parentId - id of parent node in node pages\n   * @param resources - the node resources data\n   * @param resources.meshMaterial - PBR-like material object\n   * @param resources.texture - texture image\n   * @param resources.vertexCount - number of vertices in geometry\n   * @param resources.featureCount - number of features\n   * @param resources.geometry - Uint8Array with geometry attributes\n   * @return the node object in node pages\n   */\n  private async _updateNodeInNodePages(\n    maxScreenThresholdSQ: MaxScreenThresholdSQ,\n    boundingVolumes: BoundingVolumes,\n    sourceTile: Tile3D,\n    parentId: number,\n    resources: I3SConvertedResources\n  ): Promise<NodeInPage> {\n    const {meshMaterial, texture, vertexCount, featureCount, geometry, hasUvRegions} = resources;\n    const nodeInPage: NodeInPage = {\n      index: 0,\n      lodThreshold: maxScreenThresholdSQ.maxError,\n      obb: boundingVolumes.obb,\n      children: []\n    };\n    if (geometry && this.isContentSupported(sourceTile)) {\n      nodeInPage.mesh = {\n        geometry: {\n          definition: this.findOrCreateGeometryDefinition(Boolean(texture), hasUvRegions),\n          resource: 0\n        },\n        attribute: {\n          resource: 0\n        },\n        material: {\n          definition: 0\n        }\n      };\n    }\n\n    let nodeId = resources.nodeId;\n    let node;\n    if (!nodeId) {\n      node = await this.nodePages.push(nodeInPage, parentId);\n    } else {\n      node = await this.nodePages.getNodeById(nodeId);\n    }\n\n    NodePages.updateAll(node, nodeInPage);\n    if (meshMaterial) {\n      NodePages.updateMaterialByNodeId(node, this._findOrCreateMaterial(meshMaterial));\n    }\n    if (texture) {\n      const texelCountHint = texture.image.height * texture.image.width;\n      NodePages.updateTexelCountHintByNodeId(node, texelCountHint);\n    }\n    if (vertexCount) {\n      this.vertexCounter += vertexCount;\n      NodePages.updateVertexCountByNodeId(node, vertexCount);\n    }\n    NodePages.updateNodeAttributeByNodeId(node);\n    if (featureCount) {\n      NodePages.updateFeatureCountByNodeId(node, featureCount);\n    }\n\n    this.nodePages.saveNode(node);\n\n    return node;\n  }\n\n  /**\n   * Write node resources in files\n   * @param resources - source tile (3DTile)\n   * @param resources.geometry - Uint8Array with geometry attributes\n   * @param resources.compressedGeometry - Uint8Array with compressed (draco) geometry\n   * @param resources.texture - texture image\n   * @param resources.sharedResources - shared resource data object\n   * @param resources.attributes - feature attributes\n   * @return {Promise<void>}\n   */\n  private async _writeResources(resources: I3SConvertedResources, nodePath: string): Promise<void> {\n    const {\n      geometry: geometryBuffer,\n      compressedGeometry,\n      texture,\n      sharedResources,\n      attributes\n    } = resources;\n    const childPath = join(this.layers0Path, 'nodes', nodePath);\n    const slpkChildPath = join('nodes', nodePath);\n\n    await this._writeGeometries(geometryBuffer!, compressedGeometry!, childPath, slpkChildPath);\n    await this._writeShared(sharedResources, childPath, slpkChildPath, nodePath);\n    await this._writeTexture(texture, childPath, slpkChildPath);\n    await this._writeAttributes(attributes, childPath, slpkChildPath);\n  }\n\n  /**\n   * Write non-compressed and compressed geometries in files\n   * @param geometryBuffer - Uint8Array with geometry attributes\n   * @param compressedGeometry - Uint8Array with compressed (draco) geometry\n   * @param childPath - a child path to write resources\n   * @param slpkChildPath - resource path inside *slpk file\n   */\n  private async _writeGeometries(\n    geometryBuffer: ArrayBuffer,\n    compressedGeometry: Promise<ArrayBuffer>,\n    childPath: string,\n    slpkChildPath: string\n  ): Promise<void> {\n    if (this.options.slpk) {\n      const slpkGeometryPath = join(childPath, 'geometries');\n      await this.writeQueue.enqueue({\n        archiveKey: `${slpkChildPath}/geometries/0.bin.gz`,\n        writePromise: () => writeFileForSlpk(slpkGeometryPath, geometryBuffer, '0.bin')\n      });\n    } else {\n      const geometryPath = join(childPath, 'geometries/0/');\n      await this.writeQueue.enqueue({\n        writePromise: () => writeFile(geometryPath, geometryBuffer, 'index.bin')\n      });\n    }\n\n    if (this.options.draco) {\n      if (this.options.slpk) {\n        const slpkCompressedGeometryPath = join(childPath, 'geometries');\n        await this.writeQueue.enqueue({\n          archiveKey: `${slpkChildPath}/geometries/1.bin.gz`,\n          writePromise: () =>\n            writeFileForSlpk(slpkCompressedGeometryPath, compressedGeometry, '1.bin')\n        });\n      } else {\n        const compressedGeometryPath = join(childPath, 'geometries/1/');\n        await this.writeQueue.enqueue({\n          writePromise: () => writeFile(compressedGeometryPath, compressedGeometry, 'index.bin')\n        });\n      }\n    }\n  }\n\n  /**\n   * Write shared resources in a file\n   * @param sharedResources - shared resource data object\n   * @param childPath - a child path to write resources\n   * @param slpkChildPath - resource path inside *slpk file\n   * @param nodePath - a node path\n   */\n  private async _writeShared(\n    sharedResources: SharedResourcesArrays | null,\n    childPath: string,\n    slpkChildPath: string,\n    nodePath: string\n  ): Promise<void> {\n    if (!sharedResources) {\n      return;\n    }\n    sharedResources.nodePath = nodePath;\n    const sharedData = transform(sharedResources, sharedResourcesTemplate());\n    const sharedDataStr = JSON.stringify(sharedData);\n    if (this.options.slpk) {\n      const slpkSharedPath = join(childPath, 'shared');\n      await this.writeQueue.enqueue({\n        archiveKey: `${slpkChildPath}/shared/sharedResource.json.gz`,\n        writePromise: () => writeFileForSlpk(slpkSharedPath, sharedDataStr, 'sharedResource.json')\n      });\n    } else {\n      const sharedPath = join(childPath, 'shared/');\n      await this.writeQueue.enqueue({writePromise: () => writeFile(sharedPath, sharedDataStr)});\n    }\n  }\n\n  /**\n   * Generates textures based on texture mime type and fill in textureSetDefinitions data.\n   * @param texture - the texture image\n   * @param childPath - a child path to write resources\n   * @param slpkChildPath - the resource path inside *slpk file\n   */\n  private async _writeTexture(\n    texture: GLTFImagePostprocessed,\n    childPath: string,\n    slpkChildPath: string\n  ): Promise<void> {\n    if (texture) {\n      const format = this._getFormatByMimeType(texture?.mimeType);\n      const formats: TextureSetDefinitionFormats = [];\n      const textureData = texture.bufferView!.data;\n\n      switch (format) {\n        case 'jpg':\n        case 'png': {\n          formats.push({name: '0', format});\n          await this.writeTextureFile(textureData, '0', format, childPath, slpkChildPath);\n\n          if (this.generateTextures) {\n            formats.push({name: '1', format: 'ktx2'});\n            // For Node.js texture.image.data is type of Buffer\n            const copyArrayBuffer = texture.image.data.subarray();\n            const arrayToEncode = new Uint8Array(copyArrayBuffer);\n            const ktx2TextureData = encode(\n              {...texture.image, data: arrayToEncode},\n              KTX2BasisWriterWorker,\n              {\n                ...KTX2BasisWriterWorker.options,\n                source: this.workerSource.ktx2,\n                reuseWorkers: true,\n                _nodeWorkers: true\n              }\n            );\n\n            await this.writeTextureFile(ktx2TextureData, '1', 'ktx2', childPath, slpkChildPath);\n          }\n\n          break;\n        }\n\n        case 'ktx2': {\n          formats.push({name: '1', format});\n          await this.writeTextureFile(textureData, '1', format, childPath, slpkChildPath);\n\n          if (this.generateTextures) {\n            formats.push({name: '0', format: 'jpg'});\n            const decodedFromKTX2TextureData = encode(texture.image!.data[0], ImageWriter);\n            await this.writeTextureFile(\n              decodedFromKTX2TextureData,\n              '0',\n              'jpg',\n              childPath,\n              slpkChildPath\n            );\n          }\n        }\n      }\n\n      if (!this.layers0!.textureSetDefinitions!.length) {\n        this.layers0!.textureSetDefinitions!.push({formats});\n        this.layers0!.textureSetDefinitions!.push({formats, atlas: true});\n      }\n    }\n  }\n\n  /**\n   * Write the texture image in a file\n   * @param textureData\n   * @param name\n   * @param format\n   * @param childPath\n   * @param slpkChildPath\n   */\n  private async writeTextureFile(\n    textureData: Uint8Array | Promise<ArrayBuffer>,\n    name: string,\n    format: 'jpg' | 'png' | 'ktx2',\n    childPath: string,\n    slpkChildPath: string\n  ): Promise<void> {\n    if (this.options.slpk) {\n      const slpkTexturePath = join(childPath, 'textures');\n      const compress = false;\n\n      await this.writeQueue.enqueue({\n        archiveKey: `${slpkChildPath}/textures/${name}.${format}`,\n        writePromise: () =>\n          writeFileForSlpk(slpkTexturePath, textureData, `${name}.${format}`, compress)\n      });\n    } else {\n      const texturePath = join(childPath, `textures/${name}/`);\n      await this.writeQueue.enqueue({\n        writePromise: () => writeFile(texturePath, textureData, `index.${format}`)\n      });\n    }\n  }\n\n  /**\n   * Write feature attributes in files\n   * @param attributes - feature attributes\n   * @param childPath - a child path to write resources\n   * @param slpkChildPath - the resource path inside *slpk file\n   */\n  private async _writeAttributes(\n    attributes: ArrayBuffer[] | null = [],\n    childPath: string,\n    slpkChildPath: string\n  ): Promise<void> {\n    if (attributes?.length && this.layers0?.attributeStorageInfo?.length) {\n      for (let index = 0; index < attributes.length; index++) {\n        const folderName = this.layers0.attributeStorageInfo[index].key;\n        const fileBuffer = new Uint8Array(attributes[index]);\n\n        if (this.options.slpk) {\n          const slpkAttributesPath = join(childPath, 'attributes', folderName);\n          await this.writeQueue.enqueue({\n            archiveKey: `${slpkChildPath}/attributes/${folderName}.bin.gz`,\n            writePromise: () => writeFileForSlpk(slpkAttributesPath, fileBuffer, '0.bin')\n          });\n        } else {\n          const attributesPath = join(childPath, `attributes/${folderName}/0`);\n          await this.writeQueue.enqueue({\n            writePromise: () => writeFile(attributesPath, fileBuffer, 'index.bin')\n          });\n        }\n      }\n    }\n  }\n\n  /**\n   * Return file format by its MIME type\n   * @param mimeType - feature attributes\n   */\n  private _getFormatByMimeType(mimeType: string | undefined): 'jpg' | 'png' | 'ktx2' {\n    switch (mimeType) {\n      case 'image/jpeg':\n        return 'jpg';\n      case 'image/png':\n        return 'png';\n      case 'image/ktx2':\n        return 'ktx2';\n      default:\n        return 'jpg';\n    }\n  }\n\n  /**\n   * Find or create material in materialDefinitions array\n   * @param material - end-to-end index of the node\n   * @return material id\n   */\n  private _findOrCreateMaterial(material: I3SMaterialDefinition): number {\n    const hash = md5(JSON.stringify(material));\n    if (this.materialMap.has(hash)) {\n      return this.materialMap.get(hash) || 0;\n    }\n    const newMaterialId = this.materialDefinitions.push(material) - 1;\n    this.materialMap.set(hash, newMaterialId);\n    return newMaterialId;\n  }\n\n  /**\n   * Get unique geometry configuration index\n   * In the end of conversion configurations will be transformed to geometryDefinitions array\n   * @param hasTexture\n   * @param hasUvRegions\n   * @returns\n   */\n  private findOrCreateGeometryDefinition(hasTexture: boolean, hasUvRegions: boolean): number {\n    const geometryConfig = {hasTexture, hasUvRegions};\n    const hash = md5(JSON.stringify(geometryConfig));\n    if (this.geometryMap.has(hash)) {\n      return this.geometryMap.get(hash) || 0;\n    }\n    const newGeometryId = this.geometryConfigs.push(geometryConfig) - 1;\n    this.geometryMap.set(hash, newGeometryId);\n    return newGeometryId;\n  }\n\n  /**\n   * Do conversion of 3DTiles property table to I3s node attributes.\n   * @param propertyTable - Table with layer meta data.\n   */\n  private _convertPropertyTableToNodeAttributes(propertyTable: FeatureTableJson): void {\n    let attributeIndex = 0;\n    const propertyTableWithObjectId = {\n      OBJECTID: [0],\n      ...propertyTable\n    };\n\n    for (const key in propertyTableWithObjectId) {\n      const firstAttribute = propertyTableWithObjectId[key][0];\n      const attributeType = getAttributeType(key, firstAttribute);\n\n      const storageAttribute = createdStorageAttribute(attributeIndex, key, attributeType);\n      const fieldAttributeType = getFieldAttributeType(attributeType);\n      const fieldAttribute = createFieldAttribute(key, fieldAttributeType);\n      const popupInfo = createPopupInfo(propertyTableWithObjectId);\n\n      this.layers0!.attributeStorageInfo!.push(storageAttribute);\n      this.layers0!.fields!.push(fieldAttribute);\n      this.layers0!.popupInfo = popupInfo;\n      this.layers0!.layerType = _3D_OBJECT_LAYER_TYPE;\n\n      attributeIndex += 1;\n    }\n  }\n\n  /**\n   * Print statistics in the end of conversion\n   * @param params - output files data\n   */\n  private async _finishConversion(params: {\n    slpk: boolean;\n    outputPath: string;\n    tilesetName: string;\n  }): Promise<void> {\n    const {tilesCount, tilesWithAddRefineCount} = this.refinementCounter;\n    const addRefinementPercentage = tilesWithAddRefineCount\n      ? (tilesWithAddRefineCount / tilesCount) * 100\n      : 0;\n    const filesSize = await calculateFilesSize(params);\n    const diff = process.hrtime(this.conversionStartTime);\n    const conversionTime = timeConverter(diff);\n    console.log(`------------------------------------------------`); // eslint-disable-line no-undef, no-console\n    console.log(`Finishing conversion of ${_3D_TILES}`); // eslint-disable-line no-undef, no-console\n    console.log(`Total conversion time: ${conversionTime}`); // eslint-disable-line no-undef, no-console\n    console.log(`Vertex count: `, this.vertexCounter); // eslint-disable-line no-undef, no-console\n    console.log(`File(s) size: `, filesSize, ' bytes'); // eslint-disable-line no-undef, no-console\n    console.log(`Percentage of tiles with \"ADD\" refinement type:`, addRefinementPercentage, '%'); // eslint-disable-line no-undef, no-console\n    console.log(`------------------------------------------------`); // eslint-disable-line no-undef, no-console\n  }\n\n  /**\n   * Fetch preload options for ION tileset\n   */\n  private async _fetchPreloadOptions(): Promise<any> {\n    if (!this.Loader.preload) {\n      return {};\n    }\n    const options = {\n      'cesium-ion': {accessToken: this.options.token || ION_DEFAULT_TOKEN}\n    };\n    const preloadOptions = await this.Loader.preload(this.options.inputUrl, options);\n    this.refreshTokenTime = process.hrtime();\n    return {...options, ...preloadOptions};\n  }\n\n  /**\n   * Update options of source tileset\n   */\n  private async _updateTilesetOptions(): Promise<void> {\n    const diff = process.hrtime(this.refreshTokenTime);\n    if (diff[0] < REFRESH_TOKEN_TIMEOUT) {\n      return;\n    }\n    this.refreshTokenTime = process.hrtime();\n\n    const preloadOptions = await this._fetchPreloadOptions();\n    this.sourceTileset!.options = {...this.sourceTileset!.options, ...preloadOptions};\n    if (preloadOptions.headers) {\n      this.sourceTileset!.loadOptions.fetch = {\n        ...this.sourceTileset!.loadOptions.fetch,\n        headers: preloadOptions.headers\n      };\n      console.log('Authorization Bearer token has been updated'); // eslint-disable-line no-undef, no-console\n    }\n  }\n\n  /** Do calculations of all tiles and tiles with \"ADD\" type of refinement.\n   * @param tile\n   */\n  private _checkAddRefinementTypeForTile(tile: Tile3D): void {\n    const ADD_TILE_REFINEMENT = 1;\n\n    if (tile.refine === ADD_TILE_REFINEMENT) {\n      this.refinementCounter.tilesWithAddRefineCount += 1;\n      console.warn('This tile uses \"ADD\" type of refinement'); // eslint-disable-line\n    }\n\n    this.refinementCounter.tilesCount += 1;\n  }\n  /**\n   * Check if the tile's content format is supported by the converter\n   * @param sourceRootTile\n   * @returns\n   */\n  private isContentSupported(sourceRootTile: Tile3D): boolean {\n    return ['b3dm', 'glTF'].includes(sourceRootTile?.content?.type);\n  }\n\n  private async loadWorkers(): Promise<void> {\n    console.log(`Loading workers source...`); // eslint-disable-line no-undef, no-console\n    if (this.options.draco) {\n      const url = getWorkerURL(DracoWriterWorker, {...getLoaderOptions()});\n      const sourceResponse = await fetchFile(url);\n      const source = await sourceResponse.text();\n      this.workerSource.draco = source;\n    }\n\n    if (this.generateTextures) {\n      const url = getWorkerURL(KTX2BasisWriterWorker, {...getLoaderOptions()});\n      const sourceResponse = await fetchFile(url);\n      const source = await sourceResponse.text();\n      this.workerSource.ktx2 = source;\n    }\n\n    const i3sAttributesWorkerUrl = getWorkerURL(I3SAttributesWorker, {...getLoaderOptions()});\n    const sourceResponse = await fetchFile(i3sAttributesWorkerUrl);\n    const source = await sourceResponse.text();\n    this.workerSource.I3SAttributes = source;\n    console.log(`Loading workers source completed!`); // eslint-disable-line no-undef, no-console\n  }\n}\n"],"mappings":"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"}