{"version":3,"file":"batch-ids-extensions.js","names":["EXT_MESH_FEATURES","EXT_FEATURE_METADATA","handleBatchIdsExtensions","attributes","primitive","images","extensions","extensionName","extensionData","Object","entries","handleExtFeatureMetadataExtension","console","warn","extFeatureMetadata","_extFeatureMetadata$f","_featureIdAttribute$f","_featureIdAttribute$f2","_featureIdAttribute$f3","featureIdAttribute","featureIdAttributes","featureIds","attribute","batchIdsAttribute","value","hasOwnProperty","_attributes$POSITIONS","featuresCount","POSITIONS","length","generateImplicitFeatureIds","constant","divisor","featureIdTexture","featureIdTextures","_featureIdTexture$fea","_featureIdTexture$fea2","textureAttributeIndex","texture","texCoord","textCoordAttribute","concat","textureCoordinates","generateBatchIdsFromTexture","featureTexture","featureTextures","arguments","undefined","currentValue","devisorCounter","index","push","Array","fill","_featureIdTexture$fea3","_featureIdTexture$fea4","_featureIdTexture$fea5","CHANNELS_MAP","r","g","b","a","textureIndex","featureChannel","channels","image","batchIds","width","height","components","u","v","tx","Math","min","emod","ty","offset","batchId","Uint8Array","data","mimeType","n"],"sources":["../../../../src/i3s-converter/helpers/batch-ids-extensions.ts"],"sourcesContent":["import {GLTFAccessorPostprocessed, GLTFMeshPrimitivePostprocessed} from '@loaders.gl/gltf';\nimport type {NumericArray} from '@loaders.gl/loader-utils';\nimport type {\n  GLTF_EXT_feature_metadata_attribute,\n  GLTF_EXT_feature_metadata_primitive\n} from '@loaders.gl/gltf';\nimport {TypedArray} from '@math.gl/core';\nimport {TextureImageProperties} from '../../i3s-attributes-worker';\n\nconst EXT_MESH_FEATURES = 'EXT_mesh_features';\nconst EXT_FEATURE_METADATA = 'EXT_feature_metadata';\n\n/**\n * Getting batchIds from 3DTilesNext extensions.\n * @param attributes - gltf accessors\n * @param primitive - gltf primitive data\n * @param images - gltf texture images\n */\nexport function handleBatchIdsExtensions(\n  attributes: {\n    [key: string]: GLTFAccessorPostprocessed;\n  },\n  primitive: GLTFMeshPrimitivePostprocessed,\n  images: (TextureImageProperties | null)[]\n): NumericArray {\n  const extensions = primitive?.extensions;\n\n  if (!extensions) {\n    return [];\n  }\n\n  for (const [extensionName, extensionData] of Object.entries(extensions || {})) {\n    switch (extensionName) {\n      case EXT_FEATURE_METADATA:\n        return handleExtFeatureMetadataExtension(\n          attributes,\n          extensionData as GLTF_EXT_feature_metadata_primitive,\n          images\n        );\n      case EXT_MESH_FEATURES:\n        console.warn('EXT_mesh_features extension is not supported yet');\n        return [];\n      default:\n        return [];\n    }\n  }\n\n  return [];\n}\n\n/**\n * Get batchIds from EXT_feature_metadata extension.\n * Docs - https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata\n * @param attributes\n * @param extFeatureMetadata\n * @param textures\n */\nfunction handleExtFeatureMetadataExtension(\n  attributes: {\n    [key: string]: GLTFAccessorPostprocessed;\n  },\n  extFeatureMetadata: GLTF_EXT_feature_metadata_primitive,\n  images: (TextureImageProperties | null)[]\n): NumericArray {\n  // Take only first extension object to get batchIds attribute name.\n  const featureIdAttribute = extFeatureMetadata?.featureIdAttributes?.[0];\n\n  if (featureIdAttribute?.featureIds?.attribute) {\n    const batchIdsAttribute = attributes[featureIdAttribute.featureIds.attribute];\n    return batchIdsAttribute.value;\n  }\n\n  if (\n    featureIdAttribute?.featureIds?.hasOwnProperty('constant') &&\n    featureIdAttribute?.featureIds?.hasOwnProperty('divisor')\n  ) {\n    const featuresCount = attributes?.POSITIONS?.value.length / 3 || 0;\n    return generateImplicitFeatureIds(\n      featuresCount,\n      featureIdAttribute.featureIds.constant,\n      featureIdAttribute.featureIds.divisor\n    );\n  }\n\n  // Take only first extension object to get batchIds attribute name.\n  const featureIdTexture =\n    extFeatureMetadata?.featureIdTextures && extFeatureMetadata?.featureIdTextures[0];\n\n  if (featureIdTexture) {\n    const textureAttributeIndex = featureIdTexture?.featureIds?.texture?.texCoord || 0;\n    const textCoordAttribute = `TEXCOORD_${textureAttributeIndex}`;\n    const textureCoordinates = attributes[textCoordAttribute].value;\n    return generateBatchIdsFromTexture(featureIdTexture, textureCoordinates, images);\n  }\n\n  // Take only first extension texture to get batchIds from the root EXT_feature_metadata object.\n  const featureTexture =\n    extFeatureMetadata?.featureTextures && extFeatureMetadata?.featureTextures[0];\n\n  /**\n   * TODO need to get batchIds from root extension\n   */\n  if (featureTexture) {\n    console.warn(\"EXT_feature_metadata doesn't yet support featureTextures in primitive\");\n    return [];\n  }\n\n  return [];\n}\n\n/**\n * Generates implicit feature ids\n * Spec - https://github.com/CesiumGS/glTF/tree/3d-tiles-next/extensions/2.0/Vendor/EXT_feature_metadata#implicit-feature-ids\n * @param featuresCount\n * @param constant\n * @param devisor\n */\nfunction generateImplicitFeatureIds(\n  featuresCount: number,\n  constant: number = 0,\n  divisor: number = 0\n): number[] {\n  let featureIds: number[] = [];\n\n  if (divisor > 0) {\n    let currentValue = constant;\n    let devisorCounter = divisor;\n\n    for (let index = 0; index < featuresCount; index++) {\n      featureIds.push(currentValue);\n\n      devisorCounter -= 1;\n\n      if (devisorCounter === 0) {\n        currentValue++;\n        devisorCounter = divisor;\n      }\n    }\n  } else {\n    featureIds = Array<number>(featuresCount).fill(constant, 0, featuresCount);\n  }\n\n  return featureIds;\n}\n\n/**\n * Get batchIds from texture.\n * @param primitive\n * @param featureIdTextures\n */\nfunction generateBatchIdsFromTexture(\n  featureIdTexture: GLTF_EXT_feature_metadata_attribute,\n  textureCoordinates: TypedArray,\n  images: (TextureImageProperties | null)[]\n) {\n  if (!images?.length) {\n    return [];\n  }\n\n  const CHANNELS_MAP = {\n    r: 0,\n    g: 1,\n    b: 2,\n    a: 3\n  };\n\n  const textureIndex = featureIdTexture?.featureIds?.texture?.index;\n  const featureChannel = featureIdTexture?.featureIds?.channels;\n\n  if (!featureChannel || textureIndex === undefined) {\n    return [];\n  }\n\n  const image = images[textureIndex];\n  const batchIds: number[] = [];\n  const channels = CHANNELS_MAP[featureChannel];\n\n  if (image && image?.width && image?.height && image?.components) {\n    for (let index = 0; index < textureCoordinates.length; index += 2) {\n      const u = textureCoordinates[index];\n      const v = textureCoordinates[index + 1];\n\n      const tx = Math.min((emod(u) * image.width) | 0, image.width - 1);\n      const ty = Math.min((emod(v) * image.height) | 0, image.height - 1);\n\n      const offset = (ty * image.width + tx) * image.components + channels;\n      const batchId = new Uint8Array(image.data)[offset];\n\n      batchIds.push(batchId);\n    }\n  } else {\n    console.warn(`Can't get batch Ids from ${image?.mimeType || ''} compressed texture`);\n  }\n\n  return batchIds;\n}\n\n/**\n * Handle UVs if they are out of range [0,1].\n * @param n\n * @param m\n */\nfunction emod(n: number): number {\n  return ((n % 1) + 1) % 1;\n}\n"],"mappings":"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"}