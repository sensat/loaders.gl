{"version":3,"file":"load-3d-tiles.js","names":["load","loadNestedTileset","sourceTileset","sourceTile","tilesetLoadOptions","isTileset","type","contentUrl","loadOptions","loader","id","assetGltfUpAxis","asset","gltfUpAxis","tileContent","root","children","loadTile3DContent"],"sources":["../../../../src/i3s-converter/helpers/load-3d-tiles.ts"],"sourcesContent":["import type {\n  Tiles3DLoaderOptions,\n  Tiles3DTileContent,\n  Tiles3DTileJSONPostprocessed,\n  Tiles3DTilesetJSONPostprocessed\n} from '@loaders.gl/3d-tiles';\nimport {load} from '@loaders.gl/core';\n\n/**\n * Load nested 3DTiles tileset. If the sourceTile is not nested tileset - do nothing\n * @param sourceTileset - source root tileset JSON\n * @param sourceTile - source tile JSON that is supposed to has link to nested tileset\n * @param tilesetLoadOptions - load options for Tiles3DLoader\n * @returns nothing\n */\nexport const loadNestedTileset = async (\n  sourceTileset: Tiles3DTilesetJSONPostprocessed | null,\n  sourceTile: Tiles3DTileJSONPostprocessed,\n  tilesetLoadOptions: Tiles3DLoaderOptions\n): Promise<void> => {\n  const isTileset = sourceTile.type === 'json';\n  if (!sourceTileset || !sourceTile.contentUrl || !isTileset) {\n    return;\n  }\n\n  const loadOptions = {\n    ...tilesetLoadOptions,\n    [sourceTileset.loader.id]: {\n      isTileset,\n      assetGltfUpAxis: (sourceTileset.asset && sourceTileset.asset.gltfUpAxis) || 'Y'\n    }\n  };\n  const tileContent = await load(sourceTile.contentUrl, sourceTileset.loader, loadOptions);\n\n  if (tileContent.root) {\n    sourceTile.children = [tileContent.root];\n  }\n};\n\n/**\n * Load 3DTiles tile content, that includes glTF object\n * @param sourceTileset - source root tileset JSON\n * @param sourceTile - source tile JSON that has link to content data\n * @param tilesetLoadOptions - load options for Tiles3DLoader\n * @returns - 3DTiles tile content or null\n */\nexport const loadTile3DContent = async (\n  sourceTileset: Tiles3DTilesetJSONPostprocessed | null,\n  sourceTile: Tiles3DTileJSONPostprocessed,\n  tilesetLoadOptions: Tiles3DLoaderOptions\n): Promise<Tiles3DTileContent | null> => {\n  const isTileset = sourceTile.type === 'json';\n  if (!sourceTileset || !sourceTile.contentUrl || isTileset) {\n    return null;\n  }\n\n  const loadOptions = {\n    ...tilesetLoadOptions,\n    [sourceTileset.loader.id]: {\n      ...(tilesetLoadOptions[sourceTileset.loader.id] || {}),\n      isTileset,\n      assetGltfUpAxis: (sourceTileset.asset && sourceTileset.asset.gltfUpAxis) || 'Y'\n    }\n  };\n  const tileContent = await load(sourceTile.contentUrl, sourceTileset.loader, loadOptions);\n\n  return tileContent;\n};\n"],"mappings":"AAMA,SAAQA,IAAI,QAAO,kBAAkB;AASrC,OAAO,MAAMC,iBAAiB,GAAG,MAAAA,CAC/BC,aAAqD,EACrDC,UAAwC,EACxCC,kBAAwC,KACtB;EAClB,MAAMC,SAAS,GAAGF,UAAU,CAACG,IAAI,KAAK,MAAM;EAC5C,IAAI,CAACJ,aAAa,IAAI,CAACC,UAAU,CAACI,UAAU,IAAI,CAACF,SAAS,EAAE;IAC1D;EACF;EAEA,MAAMG,WAAW,GAAG;IAClB,GAAGJ,kBAAkB;IACrB,CAACF,aAAa,CAACO,MAAM,CAACC,EAAE,GAAG;MACzBL,SAAS;MACTM,eAAe,EAAGT,aAAa,CAACU,KAAK,IAAIV,aAAa,CAACU,KAAK,CAACC,UAAU,IAAK;IAC9E;EACF,CAAC;EACD,MAAMC,WAAW,GAAG,MAAMd,IAAI,CAACG,UAAU,CAACI,UAAU,EAAEL,aAAa,CAACO,MAAM,EAAED,WAAW,CAAC;EAExF,IAAIM,WAAW,CAACC,IAAI,EAAE;IACpBZ,UAAU,CAACa,QAAQ,GAAG,CAACF,WAAW,CAACC,IAAI,CAAC;EAC1C;AACF,CAAC;AASD,OAAO,MAAME,iBAAiB,GAAG,MAAAA,CAC/Bf,aAAqD,EACrDC,UAAwC,EACxCC,kBAAwC,KACD;EACvC,MAAMC,SAAS,GAAGF,UAAU,CAACG,IAAI,KAAK,MAAM;EAC5C,IAAI,CAACJ,aAAa,IAAI,CAACC,UAAU,CAACI,UAAU,IAAIF,SAAS,EAAE;IACzD,OAAO,IAAI;EACb;EAEA,MAAMG,WAAW,GAAG;IAClB,GAAGJ,kBAAkB;IACrB,CAACF,aAAa,CAACO,MAAM,CAACC,EAAE,GAAG;MACzB,IAAIN,kBAAkB,CAACF,aAAa,CAACO,MAAM,CAACC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;MACtDL,SAAS;MACTM,eAAe,EAAGT,aAAa,CAACU,KAAK,IAAIV,aAAa,CAACU,KAAK,CAACC,UAAU,IAAK;IAC9E;EACF,CAAC;EACD,MAAMC,WAAW,GAAG,MAAMd,IAAI,CAACG,UAAU,CAACI,UAAU,EAAEL,aAAa,CAACO,MAAM,EAAED,WAAW,CAAC;EAExF,OAAOM,WAAW;AACpB,CAAC"}