{"version":3,"file":"geometry-definitions.js","names":["transform","PLAIN_GEOMETRY_DEFINITION","offset","default","position","type","component","normal","uv0","path","val","omitValues","color","uvRegion","featureId","binding","faceRange","COMPRESSED_GEOMETRY_DEFINITION","result","hasTexture","push","hasUvRegions","GEOMETRY_DEFINITION","geometryBuffers","draco","geometryConfig"],"sources":["../../../../src/i3s-converter/json-templates/geometry-definitions.ts"],"sourcesContent":["import transform from 'json-map-transform';\n\nconst PLAIN_GEOMETRY_DEFINITION = () => ({\n  offset: {\n    default: 8\n  },\n  position: {\n    default: {\n      type: 'Float32',\n      component: 3\n    }\n  },\n  normal: {\n    default: {\n      type: 'Float32',\n      component: 3\n    }\n  },\n  uv0: {\n    path: 'hasTexture',\n    transform: (val) => (val && {type: 'Float32', component: 2}) || false,\n    omitValues: [false]\n  },\n  color: {\n    default: {\n      type: 'UInt8',\n      component: 4\n    }\n  },\n  uvRegion: {\n    path: 'hasUvRegions',\n    transform: (val) => (val && {type: 'UInt16', component: 4}) || false,\n    omitValues: [false]\n  },\n  featureId: {\n    default: {\n      binding: 'per-feature',\n      type: 'UInt64',\n      component: 1\n    }\n  },\n  faceRange: {\n    default: {\n      binding: 'per-feature',\n      type: 'UInt32',\n      component: 2\n    }\n  }\n});\n\nconst COMPRESSED_GEOMETRY_DEFINITION = () => ({\n  'compressedAttributes.encoding': {\n    default: 'draco'\n  },\n  'compressedAttributes.attributes': {\n    path: 'geometryConfig',\n    transform: (val) => {\n      const result = ['position', 'normal'];\n      if (val.hasTexture) {\n        result.push('uv0');\n      }\n      result.push('color');\n      if (val.hasUvRegions) {\n        result.push('uv-region');\n      }\n      result.push('feature-index');\n      return result;\n    }\n  }\n});\n\nexport const GEOMETRY_DEFINITION = () => ({\n  geometryBuffers: {\n    path: 'geometryConfig',\n    transform: (val) => {\n      const result = [transform(val, PLAIN_GEOMETRY_DEFINITION())];\n      if (val.draco) {\n        result.push(transform({geometryConfig: val}, COMPRESSED_GEOMETRY_DEFINITION()));\n      }\n      return result;\n    }\n  }\n});\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,oBAAoB;AAE1C,MAAMC,yBAAyB,GAAGA,CAAA,MAAO;EACvCC,MAAM,EAAE;IACNC,OAAO,EAAE;EACX,CAAC;EACDC,QAAQ,EAAE;IACRD,OAAO,EAAE;MACPE,IAAI,EAAE,SAAS;MACfC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,MAAM,EAAE;IACNJ,OAAO,EAAE;MACPE,IAAI,EAAE,SAAS;MACfC,SAAS,EAAE;IACb;EACF,CAAC;EACDE,GAAG,EAAE;IACHC,IAAI,EAAE,YAAY;IAClBT,SAAS,EAAGU,GAAG,IAAMA,GAAG,IAAI;MAACL,IAAI,EAAE,SAAS;MAAEC,SAAS,EAAE;IAAC,CAAC,IAAK,KAAK;IACrEK,UAAU,EAAE,CAAC,KAAK;EACpB,CAAC;EACDC,KAAK,EAAE;IACLT,OAAO,EAAE;MACPE,IAAI,EAAE,OAAO;MACbC,SAAS,EAAE;IACb;EACF,CAAC;EACDO,QAAQ,EAAE;IACRJ,IAAI,EAAE,cAAc;IACpBT,SAAS,EAAGU,GAAG,IAAMA,GAAG,IAAI;MAACL,IAAI,EAAE,QAAQ;MAAEC,SAAS,EAAE;IAAC,CAAC,IAAK,KAAK;IACpEK,UAAU,EAAE,CAAC,KAAK;EACpB,CAAC;EACDG,SAAS,EAAE;IACTX,OAAO,EAAE;MACPY,OAAO,EAAE,aAAa;MACtBV,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAE;IACb;EACF,CAAC;EACDU,SAAS,EAAE;IACTb,OAAO,EAAE;MACPY,OAAO,EAAE,aAAa;MACtBV,IAAI,EAAE,QAAQ;MACdC,SAAS,EAAE;IACb;EACF;AACF,CAAC,CAAC;AAEF,MAAMW,8BAA8B,GAAGA,CAAA,MAAO;EAC5C,+BAA+B,EAAE;IAC/Bd,OAAO,EAAE;EACX,CAAC;EACD,iCAAiC,EAAE;IACjCM,IAAI,EAAE,gBAAgB;IACtBT,SAAS,EAAGU,GAAG,IAAK;MAClB,MAAMQ,MAAM,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC;MACrC,IAAIR,GAAG,CAACS,UAAU,EAAE;QAClBD,MAAM,CAACE,IAAI,CAAC,KAAK,CAAC;MACpB;MACAF,MAAM,CAACE,IAAI,CAAC,OAAO,CAAC;MACpB,IAAIV,GAAG,CAACW,YAAY,EAAE;QACpBH,MAAM,CAACE,IAAI,CAAC,WAAW,CAAC;MAC1B;MACAF,MAAM,CAACE,IAAI,CAAC,eAAe,CAAC;MAC5B,OAAOF,MAAM;IACf;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAMI,mBAAmB,GAAGA,CAAA,MAAO;EACxCC,eAAe,EAAE;IACfd,IAAI,EAAE,gBAAgB;IACtBT,SAAS,EAAGU,GAAG,IAAK;MAClB,MAAMQ,MAAM,GAAG,CAAClB,SAAS,CAACU,GAAG,EAAET,yBAAyB,CAAC,CAAC,CAAC,CAAC;MAC5D,IAAIS,GAAG,CAACc,KAAK,EAAE;QACbN,MAAM,CAACE,IAAI,CAACpB,SAAS,CAAC;UAACyB,cAAc,EAAEf;QAAG,CAAC,EAAEO,8BAA8B,CAAC,CAAC,CAAC,CAAC;MACjF;MACA,OAAOC,MAAM;IACf;EACF;AACF,CAAC,CAAC"}