{"version":3,"file":"write-queue.js","names":["Queue","process","MEMORY_LIMIT","WriteQueue","constructor","listeningInterval","arguments","length","undefined","writeConcurrency","_defineProperty","enqueue","val","writeImmediately","archiveKey","writePromise","result","fileMap","memoryUsage","rss","startWrite","startListening","intervalId","setInterval","bind","stopListening","clearInterval","doWrite","finalize","promises","archiveKeys","i","item","dequeue","push","promise","writeResults","Promise","allSettled","updateFileMap","value"],"sources":["../../../../src/lib/utils/write-queue.ts"],"sourcesContent":["import {Queue} from './queue';\nimport process from 'process';\n\n/** Memory limit size is based on testing */\nconst MEMORY_LIMIT = 4 * 1024 * 1024 * 1024; // 4GB\n\nexport type WriteQueueItem = {\n  archiveKey?: string;\n  /**\n   * writePromise() returns a Promise that will be awaited in Promise.allSettled(promises);\n   * Arguments for this call are specified in writeQueue.enqueue call like this:\n   * await writeQueue.enqueue({\n   *     archiveKey: `nodePages/xxx.json.gz`,\n   *     writePromise: () => writeFileForSlpk(slpkPath, data, `xxx.json`)\n   * });\n   * Note, a function like writeFileForSlpk should NOT be called when initializing the object for enqueue().\n   * If he function is called, the promise will be created\n   * and the function will allocate resources (file descriptors) for file writing.\n   * It will be done for ALL items in the queue, which is not supposed to happen.\n   * That's why the function should be passed as\n   *   writePromise: () => writeFileForSlpk(slpkPath, content, `xxx.json`)\n   * instead of\n   *  writePromise: writeFileForSlpk(slpkPath, content, `xxx.json`) // INCORRECT !\n   */\n  writePromise: () => Promise<string | null>;\n};\n\nexport default class WriteQueue<T extends WriteQueueItem> extends Queue<T> {\n  private intervalId?: NodeJS.Timeout;\n  public writePromise: Promise<void> | null = null;\n  public fileMap: {[key: string]: string} = {};\n  public listeningInterval: number;\n  public writeConcurrency: number;\n\n  constructor(listeningInterval: number = 2000, writeConcurrency: number = 400) {\n    super();\n    this.listeningInterval = listeningInterval;\n    this.writeConcurrency = writeConcurrency;\n  }\n\n  async enqueue(val: T, writeImmediately: boolean = false) {\n    if (writeImmediately) {\n      const {archiveKey, writePromise} = val as WriteQueueItem;\n      const result = await writePromise();\n      if (archiveKey && result) {\n        this.fileMap[archiveKey] = result;\n      }\n    } else {\n      super.enqueue(val);\n      /** https://nodejs.org/docs/latest-v14.x/api/process.html#process_process_memoryusage */\n      if (process.memoryUsage().rss > MEMORY_LIMIT) {\n        await this.startWrite();\n      }\n    }\n  }\n\n  startListening() {\n    this.intervalId = setInterval(this.startWrite.bind(this), this.listeningInterval);\n  }\n\n  stopListening() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  async startWrite(): Promise<void> {\n    if (!this.writePromise) {\n      this.writePromise = this.doWrite();\n    }\n    await this.writePromise;\n    this.writePromise = null;\n  }\n\n  async finalize(): Promise<void> {\n    this.stopListening();\n    await this.startWrite();\n  }\n\n  private async doWrite(): Promise<void> {\n    while (this.length) {\n      const promises: Promise<string | null>[] = [];\n      const archiveKeys: (string | undefined)[] = [];\n      for (let i = 0; i < this.writeConcurrency; i++) {\n        const item = this.dequeue();\n        if (!item) {\n          break;\n        }\n        const {archiveKey, writePromise} = item as WriteQueueItem;\n        archiveKeys.push(archiveKey);\n        const promise = writePromise();\n        promises.push(promise);\n      }\n      const writeResults = await Promise.allSettled(promises);\n      this.updateFileMap(archiveKeys, writeResults);\n    }\n  }\n\n  private updateFileMap(\n    archiveKeys: (string | undefined)[],\n    writeResults: PromiseSettledResult<string | null>[]\n  ) {\n    for (let i = 0; i < archiveKeys.length; i++) {\n      const archiveKey = archiveKeys[i];\n      if (archiveKey && 'value' in writeResults[i]) {\n        this.fileMap[archiveKey] = (writeResults[i] as PromiseFulfilledResult<string>).value;\n      }\n    }\n  }\n}\n"],"mappings":"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"}