{"version":3,"file":"tar.js","names":["clean","pad","stringToUint8","format","blockSize","headerLength","inputLength","recordSize","Tar","constructor","recordsPerBlock","_defineProperty","written","out","blocks","length","save","bind","clear","append","filepath","input","opts","checksum","Uint8Array","prototype","errorInputMatch","exec","toString","errorInput","errorMessage","concat","mode","parseInt","mtime","Math","floor","Number","Date","uid","gid","data","fileName","fileMode","fileSize","type","ustar","owner","group","Object","keys","forEach","key","i","value","charCodeAt","headerArr","ceil","push","header","buffers","chunks","Array","max","pow","chunk","b","arguments","undefined","c","buffer","set","Blob"],"sources":["../../../../src/lib/tar/tar.ts"],"sourcesContent":["// This file is derived from the tar-js code base under MIT license\n// See https://github.com/beatgammit/tar-js/blob/master/LICENSE\n/*\n * tar-js\n * MIT (c) 2011 T. Jameson Little\n */\n\nimport {clean, pad, stringToUint8} from './utils';\nimport {format} from './header';\nimport type {TarBlocks, TarOptions, TarChunks, TarChunk} from './types';\n\nlet blockSize: number;\nlet headerLength: number;\nlet inputLength: number;\n\nconst recordSize = 512;\n\nclass Tar {\n  written: number;\n  out: Uint8Array;\n  blocks: TarBlocks = [];\n  length: number;\n\n  /**\n   * @param [recordsPerBlock]\n   */\n  constructor(recordsPerBlock: number | undefined) {\n    this.written = 0;\n    blockSize = (recordsPerBlock || 20) * recordSize;\n    this.out = clean(blockSize);\n\n    this.blocks = [];\n    this.length = 0;\n    this.save = this.save.bind(this);\n    this.clear = this.clear.bind(this);\n    this.append = this.append.bind(this);\n  }\n\n  /**\n   * Append a file to the tar archive\n   * @param filepath\n   * @param input\n   * @param [opts]\n   */\n  // eslint-disable-next-line complexity\n  append(filepath: string, input: string | Uint8Array, opts?: TarOptions | undefined) {\n    let checksum: string | any;\n\n    if (typeof input === 'string') {\n      input = stringToUint8(input);\n    } else if (input.constructor && input.constructor !== Uint8Array.prototype.constructor) {\n      // @ts-ignore\n      const errorInputMatch = /function\\s*([$A-Za-z_][0-9A-Za-z_]*)\\s*\\(/.exec(\n        input.constructor.toString()\n      );\n      const errorInput = errorInputMatch && errorInputMatch[1];\n      const errorMessage = `Invalid input type. You gave me: ${errorInput}`;\n      throw errorMessage;\n    }\n\n    opts = opts || {};\n\n    const mode = opts.mode || parseInt('777', 8) & 0xfff;\n    const mtime = opts.mtime || Math.floor(Number(new Date()) / 1000);\n    const uid = opts.uid || 0;\n    const gid = opts.gid || 0;\n\n    const data: Record<string, string> = {\n      fileName: filepath,\n      fileMode: pad(mode, 7),\n      uid: pad(uid, 7),\n      gid: pad(gid, 7),\n      fileSize: pad(input.length, 11),\n      mtime: pad(mtime, 11),\n      checksum: '        ',\n      // 0 = just a file\n      type: '0',\n      ustar: 'ustar  ',\n      owner: opts.owner || '',\n      group: opts.group || ''\n    };\n\n    // calculate the checksum\n    checksum = 0;\n    Object.keys(data).forEach((key) => {\n      let i: number;\n      const value = data[key];\n      let length: number;\n\n      for (i = 0, length = value.length; i < length; i += 1) {\n        checksum += value.charCodeAt(i);\n      }\n    });\n\n    data.checksum = `${pad(checksum, 6)}\\u0000 `;\n\n    const headerArr = format(data);\n\n    headerLength = Math.ceil(headerArr.length / recordSize) * recordSize;\n    inputLength = Math.ceil(input.length / recordSize) * recordSize;\n\n    this.blocks.push({\n      header: headerArr,\n      input,\n      headerLength,\n      inputLength\n    });\n  }\n  /**\n   * Compiling data to a Blob object\n   * @returns {Blob}\n   */\n  save(): Blob {\n    const buffers: any = [];\n    const chunks = new Array<TarChunks>();\n    let length = 0;\n    const max = Math.pow(2, 20);\n\n    let chunk = new Array<TarChunk>();\n    this.blocks.forEach((b: any = []) => {\n      if (length + b.headerLength + b.inputLength > max) {\n        chunks.push({blocks: chunk, length});\n        chunk = [];\n        length = 0;\n      }\n      chunk.push(b);\n      length += b.headerLength + b.inputLength;\n    });\n    chunks.push({blocks: chunk, length});\n\n    chunks.forEach((c: any = []) => {\n      const buffer = new Uint8Array(c.length);\n      let written = 0;\n      c.blocks.forEach((b: any = []) => {\n        buffer.set(b.header, written);\n        written += b.headerLength;\n        buffer.set(b.input, written);\n        written += b.inputLength;\n      });\n      buffers.push(buffer);\n    });\n\n    buffers.push(new Uint8Array(2 * recordSize));\n\n    return new Blob(buffers, {type: 'octet/stream'});\n  }\n  /**\n   * Clear the data by its blocksize\n   */\n  clear() {\n    this.written = 0;\n    this.out = clean(blockSize);\n  }\n}\n\nexport default Tar;\n"],"mappings":"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"}