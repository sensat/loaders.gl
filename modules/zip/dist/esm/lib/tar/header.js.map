{"version":3,"file":"header.js","names":["utils","structure","fileName","fileMode","uid","gid","fileSize","mtime","checksum","type","linkName","ustar","owner","group","majorNumber","minorNumber","filenamePrefix","padding","format","data","cb","buffer","clean","offset","Object","entries","forEach","_ref","field","length","str","i","fieldLength","charCodeAt"],"sources":["../../../../src/lib/tar/header.ts"],"sourcesContent":["// This file is derived from the tar-js code base under MIT license\n// See https://github.com/beatgammit/tar-js/blob/master/LICENSE\n/*\n * tar-js\n * MIT (c) 2011 T. Jameson Little\n */\n/* eslint-disable */\nimport * as utils from './utils';\nimport type {TarStructure, TarData} from './types';\n/*\nstruct posix_header {             // byte offset\n\tchar name[100];               //   0\n\tchar mode[8];                 // 100\n\tchar uid[8];                  // 108\n\tchar gid[8];                  // 116\n\tchar size[12];                // 124\n\tchar mtime[12];               // 136\n\tchar chksum[8];               // 148\n\tchar typeflag;                // 156\n\tchar linkname[100];           // 157\n\tchar magic[6];                // 257\n\tchar version[2];              // 263\n\tchar uname[32];               // 265\n\tchar gname[32];               // 297\n\tchar devmajor[8];             // 329\n\tchar devminor[8];             // 337\n\tchar prefix[155];             // 345\n                                  // 500\n};\n*/\n\nconst structure: TarStructure = {\n  fileName: 100,\n  fileMode: 8,\n  uid: 8,\n  gid: 8,\n  fileSize: 12,\n  mtime: 12,\n  checksum: 8,\n  type: 1,\n  linkName: 100,\n  ustar: 8,\n  owner: 32,\n  group: 32,\n  majorNumber: 8,\n  minorNumber: 8,\n  filenamePrefix: 155,\n  padding: 12\n};\n/**\n * Getting the header\n * @param data\n * @param [cb]\n * @returns {Uint8Array} | Array\n */\nexport function format(data: TarData, cb?: any): [string, number][] | Uint8Array {\n  const buffer = utils.clean(512);\n  let offset = 0;\n\n  Object.entries(structure).forEach(([field, length]) => {\n    const str = data[field] || '';\n    let i: number;\n    let fieldLength: number;\n\n    for (i = 0, fieldLength = str.length; i < fieldLength; i += 1) {\n      buffer[offset] = str.charCodeAt(i);\n      offset += 1;\n    }\n\n    // space it out with nulls\n    offset += length - i;\n  });\n\n  if (typeof cb === 'function') {\n    return cb(buffer, offset);\n  }\n  return buffer;\n}\n"],"mappings":"AAOA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAwBhC,MAAMC,SAAuB,GAAG;EAC9BC,QAAQ,EAAE,GAAG;EACbC,QAAQ,EAAE,CAAC;EACXC,GAAG,EAAE,CAAC;EACNC,GAAG,EAAE,CAAC;EACNC,QAAQ,EAAE,EAAE;EACZC,KAAK,EAAE,EAAE;EACTC,QAAQ,EAAE,CAAC;EACXC,IAAI,EAAE,CAAC;EACPC,QAAQ,EAAE,GAAG;EACbC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE,CAAC;EACdC,WAAW,EAAE,CAAC;EACdC,cAAc,EAAE,GAAG;EACnBC,OAAO,EAAE;AACX,CAAC;AAOD,OAAO,SAASC,MAAMA,CAACC,IAAa,EAAEC,EAAQ,EAAmC;EAC/E,MAAMC,MAAM,GAAGrB,KAAK,CAACsB,KAAK,CAAC,GAAG,CAAC;EAC/B,IAAIC,MAAM,GAAG,CAAC;EAEdC,MAAM,CAACC,OAAO,CAACxB,SAAS,CAAC,CAACyB,OAAO,CAACC,IAAA,IAAqB;IAAA,IAApB,CAACC,KAAK,EAAEC,MAAM,CAAC,GAAAF,IAAA;IAChD,MAAMG,GAAG,GAAGX,IAAI,CAACS,KAAK,CAAC,IAAI,EAAE;IAC7B,IAAIG,CAAS;IACb,IAAIC,WAAmB;IAEvB,KAAKD,CAAC,GAAG,CAAC,EAAEC,WAAW,GAAGF,GAAG,CAACD,MAAM,EAAEE,CAAC,GAAGC,WAAW,EAAED,CAAC,IAAI,CAAC,EAAE;MAC7DV,MAAM,CAACE,MAAM,CAAC,GAAGO,GAAG,CAACG,UAAU,CAACF,CAAC,CAAC;MAClCR,MAAM,IAAI,CAAC;IACb;IAGAA,MAAM,IAAIM,MAAM,GAAGE,CAAC;EACtB,CAAC,CAAC;EAEF,IAAI,OAAOX,EAAE,KAAK,UAAU,EAAE;IAC5B,OAAOA,EAAE,CAACC,MAAM,EAAEE,MAAM,CAAC;EAC3B;EACA,OAAOF,MAAM;AACf"}