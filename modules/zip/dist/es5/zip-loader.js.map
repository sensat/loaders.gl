{"version":3,"file":"zip-loader.js","names":["_jszip","_interopRequireDefault","require","VERSION","ZipLoader","id","module","name","version","extensions","mimeTypes","category","tests","options","parse","parseZipAsync","exports","_x","_parseZipAsync","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","data","promises","fileMap","jsZip","zip","_args","wrap","_callee$","_context","prev","next","length","undefined","JSZip","loadAsync","sent","forEach","relativePath","zipEntry","subFilename","promise","loadZipEntry","then","arrayBufferOrError","push","Promise","all","abrupt","t0","log","error","concat","stop","_x2","_x3","_loadZipEntry","_callee2","arrayBuffer","_args2","_callee2$","_context2","file","async","dataType","_typecheckZipLoader"],"sources":["../../src/zip-loader.ts"],"sourcesContent":["// Zip loader\nimport type {LoaderWithParser, LoaderOptions} from '@loaders.gl/loader-utils';\nimport JSZip from 'jszip';\n\n// __VERSION__ is injected by babel-plugin-version-inline\n// @ts-ignore TS2304: Cannot find name '__VERSION__'.\nconst VERSION = typeof __VERSION__ !== 'undefined' ? __VERSION__ : 'latest';\n\ntype FileMap = Record<string, ArrayBuffer>;\n\nexport const ZipLoader: LoaderWithParser<FileMap, never, LoaderOptions> = {\n  id: 'zip',\n  module: 'zip',\n  name: 'Zip Archive',\n  version: VERSION,\n  extensions: ['zip'],\n  mimeTypes: ['application/zip'],\n  category: 'archive',\n  tests: ['PK'],\n  options: {},\n  parse: parseZipAsync\n};\n\n// TODO - Could return a map of promises, perhaps as an option...\nasync function parseZipAsync(data: any, options = {}): Promise<FileMap> {\n  const promises: Promise<any>[] = [];\n  const fileMap: Record<string, ArrayBuffer> = {};\n\n  try {\n    const jsZip = new JSZip();\n\n    const zip = await jsZip.loadAsync(data, options);\n\n    // start to load each file in this zip\n    zip.forEach((relativePath, zipEntry) => {\n      const subFilename = zipEntry.name;\n\n      const promise = loadZipEntry(jsZip, subFilename, options).then((arrayBufferOrError) => {\n        fileMap[relativePath] = arrayBufferOrError;\n      });\n\n      // Ensure Promise.all doesn't ignore rejected promises.\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return fileMap;\n  } catch (error) {\n    // @ts-ignore\n    options.log.error(`Unable to read zip archive: ${error}`);\n    throw error;\n  }\n}\n\nasync function loadZipEntry(jsZip: any, subFilename: string, options: any = {}) {\n  // jszip supports both arraybuffer and text, the main loaders.gl types\n  // https://stuk.github.io/jszip/documentation/api_zipobject/async.html\n  try {\n    const arrayBuffer = await jsZip.file(subFilename).async(options.dataType || 'arraybuffer');\n    return arrayBuffer;\n  } catch (error) {\n    options.log.error(`Unable to read ${subFilename} from zip archive: ${error}`);\n    // Store error in place of data in map\n    return error;\n  }\n}\n\nexport const _typecheckZipLoader: LoaderWithParser = ZipLoader;\n"],"mappings":"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"}