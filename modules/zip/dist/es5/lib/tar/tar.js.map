{"version":3,"file":"tar.js","names":["_utils","require","_header","blockSize","headerLength","inputLength","recordSize","Tar","recordsPerBlock","_classCallCheck2","default","_defineProperty2","written","out","clean","blocks","length","save","bind","clear","append","_createClass2","key","value","filepath","input","opts","checksum","stringToUint8","constructor","Uint8Array","prototype","errorInputMatch","exec","toString","errorInput","errorMessage","concat","mode","parseInt","mtime","Math","floor","Number","Date","uid","gid","data","fileName","fileMode","pad","fileSize","type","ustar","owner","group","Object","keys","forEach","i","charCodeAt","headerArr","format","ceil","push","header","buffers","chunks","Array","max","pow","chunk","b","arguments","undefined","c","buffer","set","Blob","_default","exports"],"sources":["../../../../src/lib/tar/tar.ts"],"sourcesContent":["// This file is derived from the tar-js code base under MIT license\n// See https://github.com/beatgammit/tar-js/blob/master/LICENSE\n/*\n * tar-js\n * MIT (c) 2011 T. Jameson Little\n */\n\nimport {clean, pad, stringToUint8} from './utils';\nimport {format} from './header';\nimport type {TarBlocks, TarOptions, TarChunks, TarChunk} from './types';\n\nlet blockSize: number;\nlet headerLength: number;\nlet inputLength: number;\n\nconst recordSize = 512;\n\nclass Tar {\n  written: number;\n  out: Uint8Array;\n  blocks: TarBlocks = [];\n  length: number;\n\n  /**\n   * @param [recordsPerBlock]\n   */\n  constructor(recordsPerBlock: number | undefined) {\n    this.written = 0;\n    blockSize = (recordsPerBlock || 20) * recordSize;\n    this.out = clean(blockSize);\n\n    this.blocks = [];\n    this.length = 0;\n    this.save = this.save.bind(this);\n    this.clear = this.clear.bind(this);\n    this.append = this.append.bind(this);\n  }\n\n  /**\n   * Append a file to the tar archive\n   * @param filepath\n   * @param input\n   * @param [opts]\n   */\n  // eslint-disable-next-line complexity\n  append(filepath: string, input: string | Uint8Array, opts?: TarOptions | undefined) {\n    let checksum: string | any;\n\n    if (typeof input === 'string') {\n      input = stringToUint8(input);\n    } else if (input.constructor && input.constructor !== Uint8Array.prototype.constructor) {\n      // @ts-ignore\n      const errorInputMatch = /function\\s*([$A-Za-z_][0-9A-Za-z_]*)\\s*\\(/.exec(\n        input.constructor.toString()\n      );\n      const errorInput = errorInputMatch && errorInputMatch[1];\n      const errorMessage = `Invalid input type. You gave me: ${errorInput}`;\n      throw errorMessage;\n    }\n\n    opts = opts || {};\n\n    const mode = opts.mode || parseInt('777', 8) & 0xfff;\n    const mtime = opts.mtime || Math.floor(Number(new Date()) / 1000);\n    const uid = opts.uid || 0;\n    const gid = opts.gid || 0;\n\n    const data: Record<string, string> = {\n      fileName: filepath,\n      fileMode: pad(mode, 7),\n      uid: pad(uid, 7),\n      gid: pad(gid, 7),\n      fileSize: pad(input.length, 11),\n      mtime: pad(mtime, 11),\n      checksum: '        ',\n      // 0 = just a file\n      type: '0',\n      ustar: 'ustar  ',\n      owner: opts.owner || '',\n      group: opts.group || ''\n    };\n\n    // calculate the checksum\n    checksum = 0;\n    Object.keys(data).forEach((key) => {\n      let i: number;\n      const value = data[key];\n      let length: number;\n\n      for (i = 0, length = value.length; i < length; i += 1) {\n        checksum += value.charCodeAt(i);\n      }\n    });\n\n    data.checksum = `${pad(checksum, 6)}\\u0000 `;\n\n    const headerArr = format(data);\n\n    headerLength = Math.ceil(headerArr.length / recordSize) * recordSize;\n    inputLength = Math.ceil(input.length / recordSize) * recordSize;\n\n    this.blocks.push({\n      header: headerArr,\n      input,\n      headerLength,\n      inputLength\n    });\n  }\n  /**\n   * Compiling data to a Blob object\n   * @returns {Blob}\n   */\n  save(): Blob {\n    const buffers: any = [];\n    const chunks = new Array<TarChunks>();\n    let length = 0;\n    const max = Math.pow(2, 20);\n\n    let chunk = new Array<TarChunk>();\n    this.blocks.forEach((b: any = []) => {\n      if (length + b.headerLength + b.inputLength > max) {\n        chunks.push({blocks: chunk, length});\n        chunk = [];\n        length = 0;\n      }\n      chunk.push(b);\n      length += b.headerLength + b.inputLength;\n    });\n    chunks.push({blocks: chunk, length});\n\n    chunks.forEach((c: any = []) => {\n      const buffer = new Uint8Array(c.length);\n      let written = 0;\n      c.blocks.forEach((b: any = []) => {\n        buffer.set(b.header, written);\n        written += b.headerLength;\n        buffer.set(b.input, written);\n        written += b.inputLength;\n      });\n      buffers.push(buffer);\n    });\n\n    buffers.push(new Uint8Array(2 * recordSize));\n\n    return new Blob(buffers, {type: 'octet/stream'});\n  }\n  /**\n   * Clear the data by its blocksize\n   */\n  clear() {\n    this.written = 0;\n    this.out = clean(blockSize);\n  }\n}\n\nexport default Tar;\n"],"mappings":"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"}