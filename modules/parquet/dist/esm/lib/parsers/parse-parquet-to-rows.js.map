{"version":3,"file":"parse-parquet-to-rows.js","names":["makeReadableFile","ParquetReader","parseParquet","arrayBuffer","options","blob","Blob","rows","batch","parseParquetFileInBatches","row","data","push","shape","file","reader","rowBatches","rowBatchIterator","parquet","batchType","length"],"sources":["../../../../src/lib/parsers/parse-parquet-to-rows.ts"],"sourcesContent":["// import type {LoaderWithParser, Loader, LoaderOptions} from '@loaders.gl/loader-utils';\n// import {ColumnarTableBatch} from '@loaders.gl/schema';\nimport {makeReadableFile} from '@loaders.gl/loader-utils';\nimport {ObjectRowTable, ObjectRowTableBatch} from '@loaders.gl/schema';\nimport type {ParquetLoaderOptions} from '../../parquet-loader';\nimport type {ParquetRow} from '../../parquetjs/schema/declare';\nimport {ParquetReader} from '../../parquetjs/parser/parquet-reader';\n\nexport async function parseParquet(\n  arrayBuffer: ArrayBuffer,\n  options?: ParquetLoaderOptions\n): Promise<ObjectRowTable> {\n  const blob = new Blob([arrayBuffer]);\n\n  const rows: ParquetRow[] = [];\n  for await (const batch of parseParquetFileInBatches(blob, options)) {\n    // we have only one input batch so return\n    for (const row of batch.data) {\n      rows.push(row);\n    }\n  }\n\n  return {\n    shape: 'object-row-table',\n    // TODO - spread can fail for very large number of batches\n    data: rows\n  };\n}\n\nexport async function* parseParquetFileInBatches(\n  blob: Blob,\n  options?: ParquetLoaderOptions\n): AsyncIterable<ObjectRowTableBatch> {\n  const file = makeReadableFile(blob);\n  const reader = new ParquetReader(file);\n  const rowBatches = reader.rowBatchIterator(options?.parquet);\n  for await (const rows of rowBatches) {\n    yield {\n      shape: 'object-row-table',\n      data: rows,\n      batchType: 'data',\n      length: rows.length\n    };\n  }\n}\n"],"mappings":"AAEA,SAAQA,gBAAgB,QAAO,0BAA0B;AAIzD,SAAQC,aAAa,QAAO,uCAAuC;AAEnE,OAAO,eAAeC,YAAYA,CAChCC,WAAwB,EACxBC,OAA8B,EACL;EACzB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACH,WAAW,CAAC,CAAC;EAEpC,MAAMI,IAAkB,GAAG,EAAE;EAC7B,WAAW,MAAMC,KAAK,IAAIC,yBAAyB,CAACJ,IAAI,EAAED,OAAO,CAAC,EAAE;IAElE,KAAK,MAAMM,GAAG,IAAIF,KAAK,CAACG,IAAI,EAAE;MAC5BJ,IAAI,CAACK,IAAI,CAACF,GAAG,CAAC;IAChB;EACF;EAEA,OAAO;IACLG,KAAK,EAAE,kBAAkB;IAEzBF,IAAI,EAAEJ;EACR,CAAC;AACH;AAEA,OAAO,gBAAgBE,yBAAyBA,CAC9CJ,IAAU,EACVD,OAA8B,EACM;EACpC,MAAMU,IAAI,GAAGd,gBAAgB,CAACK,IAAI,CAAC;EACnC,MAAMU,MAAM,GAAG,IAAId,aAAa,CAACa,IAAI,CAAC;EACtC,MAAME,UAAU,GAAGD,MAAM,CAACE,gBAAgB,CAACb,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEc,OAAO,CAAC;EAC5D,WAAW,MAAMX,IAAI,IAAIS,UAAU,EAAE;IACnC,MAAM;MACJH,KAAK,EAAE,kBAAkB;MACzBF,IAAI,EAAEJ,IAAI;MACVY,SAAS,EAAE,MAAM;MACjBC,MAAM,EAAEb,IAAI,CAACa;IACf,CAAC;EACH;AACF"}