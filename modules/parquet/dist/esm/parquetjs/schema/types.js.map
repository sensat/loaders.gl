{"version":3,"file":"types.js","names":["BSONLoader","BSONWriter","PARQUET_LOGICAL_TYPES","BOOLEAN","primitiveType","toPrimitive","toPrimitive_BOOLEAN","fromPrimitive","fromPrimitive_BOOLEAN","INT32","toPrimitive_INT32","INT64","toPrimitive_INT64","INT96","toPrimitive_INT96","FLOAT","toPrimitive_FLOAT","DOUBLE","toPrimitive_DOUBLE","BYTE_ARRAY","toPrimitive_BYTE_ARRAY","FIXED_LEN_BYTE_ARRAY","UTF8","originalType","toPrimitive_UTF8","fromPrimitive_UTF8","TIME_MILLIS","toPrimitive_TIME_MILLIS","TIME_MICROS","toPrimitive_TIME_MICROS","DATE","toPrimitive_DATE","fromPrimitive_DATE","TIMESTAMP_MILLIS","toPrimitive_TIMESTAMP_MILLIS","fromPrimitive_TIMESTAMP_MILLIS","TIMESTAMP_MICROS","toPrimitive_TIMESTAMP_MICROS","fromPrimitive_TIMESTAMP_MICROS","UINT_8","toPrimitive_UINT8","UINT_16","toPrimitive_UINT16","UINT_32","toPrimitive_UINT32","UINT_64","toPrimitive_UINT64","INT_8","toPrimitive_INT8","INT_16","toPrimitive_INT16","INT_32","INT_64","JSON","toPrimitive_JSON","fromPrimitive_JSON","BSON","toPrimitive_BSON","fromPrimitive_BSON","INTERVAL","typeLength","toPrimitive_INTERVAL","fromPrimitive_INTERVAL","DECIMAL_INT32","decimalToPrimitive_INT32","decimalFromPrimitive_INT","DECIMAL_INT64","decimalToPrimitive_INT64","DECIMAL_BYTE_ARRAY","decimalToPrimitive_BYTE_ARRAY","decimalFromPrimitive_BYTE_ARRAY","DECIMAL_FIXED_LEN_BYTE_ARRAY","type","value","field","Error","concat","_PARQUET_LOGICAL_TYPE","_PARQUET_LOGICAL_TYPE2","call","Boolean","v","parseFloat","isNaN","parseInt","primitiveValue","scale","Math","round","presision","Buffer","from","toString","stringify","parse","_BSONWriter$encodeSyn","arrayBuffer","encodeSync","_BSONLoader$parseSync","parseSync","kMillisPerDay","Date","getTime","months","days","milliseconds","buf","alloc","writeUInt32LE","readUInt32LE","millis","presisionInt","number","length","i","component"],"sources":["../../../../src/parquetjs/schema/types.ts"],"sourcesContent":["// Forked from https://github.com/kbajalc/parquets under MIT license (Copyright (c) 2017 ironSource Ltd.)\n/* eslint-disable camelcase */\nimport {BSONLoader, BSONWriter} from '@loaders.gl/bson';\nimport {OriginalType, ParquetField, ParquetType, PrimitiveType} from './declare';\n\nexport interface ParquetTypeKit {\n  primitiveType: PrimitiveType;\n  originalType?: OriginalType;\n  typeLength?: number;\n  toPrimitive: Function;\n  fromPrimitive?: Function;\n}\n\nexport const PARQUET_LOGICAL_TYPES: Record<ParquetType, ParquetTypeKit> = {\n  BOOLEAN: {\n    primitiveType: 'BOOLEAN',\n    toPrimitive: toPrimitive_BOOLEAN,\n    fromPrimitive: fromPrimitive_BOOLEAN\n  },\n  INT32: {\n    primitiveType: 'INT32',\n    toPrimitive: toPrimitive_INT32\n  },\n  INT64: {\n    primitiveType: 'INT64',\n    toPrimitive: toPrimitive_INT64\n  },\n  INT96: {\n    primitiveType: 'INT96',\n    toPrimitive: toPrimitive_INT96\n  },\n  FLOAT: {\n    primitiveType: 'FLOAT',\n    toPrimitive: toPrimitive_FLOAT\n  },\n  DOUBLE: {\n    primitiveType: 'DOUBLE',\n    toPrimitive: toPrimitive_DOUBLE\n  },\n  BYTE_ARRAY: {\n    primitiveType: 'BYTE_ARRAY',\n    toPrimitive: toPrimitive_BYTE_ARRAY\n  },\n  FIXED_LEN_BYTE_ARRAY: {\n    primitiveType: 'FIXED_LEN_BYTE_ARRAY',\n    toPrimitive: toPrimitive_BYTE_ARRAY\n  },\n  UTF8: {\n    primitiveType: 'BYTE_ARRAY',\n    originalType: 'UTF8',\n    toPrimitive: toPrimitive_UTF8,\n    fromPrimitive: fromPrimitive_UTF8\n  },\n  TIME_MILLIS: {\n    primitiveType: 'INT32',\n    originalType: 'TIME_MILLIS',\n    toPrimitive: toPrimitive_TIME_MILLIS\n  },\n  TIME_MICROS: {\n    primitiveType: 'INT64',\n    originalType: 'TIME_MICROS',\n    toPrimitive: toPrimitive_TIME_MICROS\n  },\n  DATE: {\n    primitiveType: 'INT32',\n    originalType: 'DATE',\n    toPrimitive: toPrimitive_DATE,\n    fromPrimitive: fromPrimitive_DATE\n  },\n  TIMESTAMP_MILLIS: {\n    primitiveType: 'INT64',\n    originalType: 'TIMESTAMP_MILLIS',\n    toPrimitive: toPrimitive_TIMESTAMP_MILLIS,\n    fromPrimitive: fromPrimitive_TIMESTAMP_MILLIS\n  },\n  TIMESTAMP_MICROS: {\n    primitiveType: 'INT64',\n    originalType: 'TIMESTAMP_MICROS',\n    toPrimitive: toPrimitive_TIMESTAMP_MICROS,\n    fromPrimitive: fromPrimitive_TIMESTAMP_MICROS\n  },\n  UINT_8: {\n    primitiveType: 'INT32',\n    originalType: 'UINT_8',\n    toPrimitive: toPrimitive_UINT8\n  },\n  UINT_16: {\n    primitiveType: 'INT32',\n    originalType: 'UINT_16',\n    toPrimitive: toPrimitive_UINT16\n  },\n  UINT_32: {\n    primitiveType: 'INT32',\n    originalType: 'UINT_32',\n    toPrimitive: toPrimitive_UINT32\n  },\n  UINT_64: {\n    primitiveType: 'INT64',\n    originalType: 'UINT_64',\n    toPrimitive: toPrimitive_UINT64\n  },\n  INT_8: {\n    primitiveType: 'INT32',\n    originalType: 'INT_8',\n    toPrimitive: toPrimitive_INT8\n  },\n  INT_16: {\n    primitiveType: 'INT32',\n    originalType: 'INT_16',\n    toPrimitive: toPrimitive_INT16\n  },\n  INT_32: {\n    primitiveType: 'INT32',\n    originalType: 'INT_32',\n    toPrimitive: toPrimitive_INT32\n  },\n  INT_64: {\n    primitiveType: 'INT64',\n    originalType: 'INT_64',\n    toPrimitive: toPrimitive_INT64\n  },\n  JSON: {\n    primitiveType: 'BYTE_ARRAY',\n    originalType: 'JSON',\n    toPrimitive: toPrimitive_JSON,\n    fromPrimitive: fromPrimitive_JSON\n  },\n  BSON: {\n    primitiveType: 'BYTE_ARRAY',\n    originalType: 'BSON',\n    toPrimitive: toPrimitive_BSON,\n    fromPrimitive: fromPrimitive_BSON\n  },\n  INTERVAL: {\n    primitiveType: 'FIXED_LEN_BYTE_ARRAY',\n    originalType: 'INTERVAL',\n    typeLength: 12,\n    toPrimitive: toPrimitive_INTERVAL,\n    fromPrimitive: fromPrimitive_INTERVAL\n  },\n  DECIMAL_INT32: {\n    primitiveType: 'INT32',\n    originalType: 'DECIMAL_INT32',\n    toPrimitive: decimalToPrimitive_INT32,\n    fromPrimitive: decimalFromPrimitive_INT\n  },\n  DECIMAL_INT64: {\n    primitiveType: 'INT64',\n    originalType: 'DECIMAL_INT64',\n    toPrimitive: decimalToPrimitive_INT64,\n    fromPrimitive: decimalFromPrimitive_INT\n  },\n  DECIMAL_BYTE_ARRAY: {\n    primitiveType: 'BYTE_ARRAY',\n    originalType: 'DECIMAL_BYTE_ARRAY',\n    toPrimitive: decimalToPrimitive_BYTE_ARRAY,\n    fromPrimitive: decimalFromPrimitive_BYTE_ARRAY\n  },\n  DECIMAL_FIXED_LEN_BYTE_ARRAY: {\n    primitiveType: 'FIXED_LEN_BYTE_ARRAY',\n    originalType: 'DECIMAL_FIXED_LEN_BYTE_ARRAY',\n    toPrimitive: decimalToPrimitive_BYTE_ARRAY,\n    fromPrimitive: decimalFromPrimitive_BYTE_ARRAY\n  }\n};\n\n/**\n * Convert a value from it's native representation to the internal/underlying\n * primitive type\n */\nexport function toPrimitive(type: ParquetType, value: unknown, field?: ParquetField): unknown {\n  if (!(type in PARQUET_LOGICAL_TYPES)) {\n    throw new Error(`invalid type: ${type}`);\n  }\n\n  return PARQUET_LOGICAL_TYPES[type].toPrimitive(value, field);\n}\n\n/**\n * Convert a value from it's internal/underlying primitive representation to\n * the native representation\n */\nexport function fromPrimitive(type: ParquetType, value: unknown, field?: ParquetField) {\n  if (!(type in PARQUET_LOGICAL_TYPES)) {\n    throw new Error(`invalid type: ${type}`);\n  }\n\n  if ('fromPrimitive' in PARQUET_LOGICAL_TYPES[type]) {\n    return PARQUET_LOGICAL_TYPES[type].fromPrimitive?.(value, field);\n    // tslint:disable-next-line:no-else-after-return\n  }\n  return value;\n}\n\nfunction toPrimitive_BOOLEAN(value: unknown): boolean {\n  return Boolean(value);\n}\n\nfunction fromPrimitive_BOOLEAN(value: any): boolean {\n  return Boolean(value);\n}\n\nfunction toPrimitive_FLOAT(value: any): number {\n  const v = parseFloat(value);\n  if (isNaN(v)) {\n    throw new Error(`invalid value for FLOAT: ${value}`);\n  }\n  return v;\n}\n\nfunction toPrimitive_DOUBLE(value: any): number {\n  const v = parseFloat(value);\n  if (isNaN(v)) {\n    throw new Error(`invalid value for DOUBLE: ${value}`);\n  }\n  return v;\n}\n\nfunction toPrimitive_INT8(value: any) {\n  const v = parseInt(value, 10);\n  if (v < -0x80 || v > 0x7f || isNaN(v)) {\n    throw new Error(`invalid value for INT8: ${value}`);\n  }\n\n  return v;\n}\n\nfunction toPrimitive_UINT8(value: any) {\n  const v = parseInt(value, 10);\n  if (v < 0 || v > 0xff || isNaN(v)) {\n    throw new Error(`invalid value for UINT8: ${value}`);\n  }\n\n  return v;\n}\n\nfunction toPrimitive_INT16(value: any) {\n  const v = parseInt(value, 10);\n  if (v < -0x8000 || v > 0x7fff || isNaN(v)) {\n    throw new Error(`invalid value for INT16: ${value}`);\n  }\n\n  return v;\n}\n\nfunction toPrimitive_UINT16(value: any) {\n  const v = parseInt(value, 10);\n  if (v < 0 || v > 0xffff || isNaN(v)) {\n    throw new Error(`invalid value for UINT16: ${value}`);\n  }\n\n  return v;\n}\n\nfunction toPrimitive_INT32(value: any) {\n  const v = parseInt(value, 10);\n  if (v < -0x80000000 || v > 0x7fffffff || isNaN(v)) {\n    throw new Error(`invalid value for INT32: ${value}`);\n  }\n\n  return v;\n}\n\nfunction decimalToPrimitive_INT32(value: number, field: ParquetField): number {\n  const primitiveValue = value * 10 ** (field.scale || 0);\n  const v = Math.round(((primitiveValue * 10 ** -field.presision!) % 1) * 10 ** field.presision!);\n  if (v < -0x80000000 || v > 0x7fffffff || isNaN(v)) {\n    throw new Error(`invalid value for INT32: ${value}`);\n  }\n  return v;\n}\n\nfunction toPrimitive_UINT32(value: any): number {\n  const v = parseInt(value, 10);\n  if (v < 0 || v > 0xffffffffffff || isNaN(v)) {\n    throw new Error(`invalid value for UINT32: ${value}`);\n  }\n  return v;\n}\n\nfunction toPrimitive_INT64(value: any): number {\n  const v = parseInt(value, 10);\n  if (isNaN(v)) {\n    throw new Error(`invalid value for INT64: ${value}`);\n  }\n  return v;\n}\n\nfunction decimalToPrimitive_INT64(value: number, field: ParquetField) {\n  const primitiveValue = value * 10 ** (field.scale || 0);\n  const v = Math.round(((primitiveValue * 10 ** -field.presision!) % 1) * 10 ** field.presision!);\n  if (isNaN(v)) {\n    throw new Error(`invalid value for INT64: ${value}`);\n  }\n\n  return v;\n}\n\nfunction toPrimitive_UINT64(value: any) {\n  const v = parseInt(value, 10);\n  if (v < 0 || isNaN(v)) {\n    throw new Error(`invalid value for UINT64: ${value}`);\n  }\n\n  return v;\n}\n\nfunction toPrimitive_INT96(value: any) {\n  const v = parseInt(value, 10);\n  if (isNaN(v)) {\n    throw new Error(`invalid value for INT96: ${value}`);\n  }\n\n  return v;\n}\n\nfunction toPrimitive_BYTE_ARRAY(value: any): Buffer {\n  return Buffer.from(value);\n}\n\nfunction decimalToPrimitive_BYTE_ARRAY(value: any): Buffer {\n  // TBD\n  return Buffer.from(value);\n}\n\nfunction toPrimitive_UTF8(value: any): Buffer {\n  return Buffer.from(value, 'utf8');\n}\n\nfunction fromPrimitive_UTF8(value: any): string {\n  return value.toString();\n}\n\nfunction toPrimitive_JSON(value: any): Buffer {\n  return Buffer.from(JSON.stringify(value));\n}\n\nfunction fromPrimitive_JSON(value: any): unknown {\n  return JSON.parse(value);\n}\n\nfunction toPrimitive_BSON(value: any): Buffer {\n  const arrayBuffer = BSONWriter.encodeSync?.(value) as ArrayBuffer;\n  return Buffer.from(arrayBuffer);\n}\n\nfunction fromPrimitive_BSON(value: any) {\n  return BSONLoader.parseSync?.(value);\n}\n\nfunction toPrimitive_TIME_MILLIS(value: any) {\n  const v = parseInt(value, 10);\n  if (v < 0 || v > 0xffffffffffffffff || isNaN(v)) {\n    throw new Error(`invalid value for TIME_MILLIS: ${value}`);\n  }\n\n  return v;\n}\n\nfunction toPrimitive_TIME_MICROS(value: any): number {\n  const v = parseInt(value, 10);\n  if (v < 0 || isNaN(v)) {\n    throw new Error(`invalid value for TIME_MICROS: ${value}`);\n  }\n  return v;\n}\n\nconst kMillisPerDay = 86400000;\n\nfunction toPrimitive_DATE(value: any): number {\n  /* convert from date */\n  if (value instanceof Date) {\n    return value.getTime() / kMillisPerDay;\n  }\n\n  /* convert from integer */\n  {\n    const v = parseInt(value, 10);\n    if (v < 0 || isNaN(v)) {\n      throw new Error(`invalid value for DATE: ${value}`);\n    }\n\n    return v;\n  }\n}\n\nfunction fromPrimitive_DATE(value: any): Date {\n  return new Date(value * kMillisPerDay);\n}\n\nfunction toPrimitive_TIMESTAMP_MILLIS(value: any): number {\n  /* convert from date */\n  if (value instanceof Date) {\n    return value.getTime();\n  }\n\n  /* convert from integer */\n  {\n    const v = parseInt(value, 10);\n    if (v < 0 || isNaN(v)) {\n      throw new Error(`invalid value for TIMESTAMP_MILLIS: ${value}`);\n    }\n\n    return v;\n  }\n}\n\nfunction fromPrimitive_TIMESTAMP_MILLIS(value: any): Date {\n  return new Date(value);\n}\n\nfunction toPrimitive_TIMESTAMP_MICROS(value: any) {\n  /* convert from date */\n  if (value instanceof Date) {\n    return value.getTime() * 1000;\n  }\n\n  /* convert from integer */\n  {\n    const v = parseInt(value, 10);\n    if (v < 0 || isNaN(v)) {\n      throw new Error(`invalid value for TIMESTAMP_MICROS: ${value}`);\n    }\n\n    return v;\n  }\n}\n\nfunction fromPrimitive_TIMESTAMP_MICROS(value: any) {\n  return new Date(value / 1000);\n}\n\nfunction toPrimitive_INTERVAL(value: any) {\n  if (!value.months || !value.days || !value.milliseconds) {\n    throw new Error(\n      'value for INTERVAL must be object { months: ..., days: ..., milliseconds: ... }'\n    );\n  }\n\n  const buf = Buffer.alloc(12);\n\n  buf.writeUInt32LE(value.months, 0);\n  buf.writeUInt32LE(value.days, 4);\n  buf.writeUInt32LE(value.milliseconds, 8);\n  return buf;\n}\n\nfunction fromPrimitive_INTERVAL(value: any) {\n  const buf = Buffer.from(value);\n  const months = buf.readUInt32LE(0);\n  const days = buf.readUInt32LE(4);\n  const millis = buf.readUInt32LE(8);\n\n  return {months, days, milliseconds: millis};\n}\n\nfunction decimalFromPrimitive_INT(value: any, field: ParquetField) {\n  const presisionInt = Math.round(((value * 10 ** -field.presision!) % 1) * 10 ** field.presision!);\n  return presisionInt * 10 ** -(field.scale || 0);\n}\n\nfunction decimalFromPrimitive_BYTE_ARRAY(value: any, field: ParquetField) {\n  let number = 0;\n  if (value.length <= 4) {\n    // Bytewise operators faster. Use them if it is possible\n    for (let i = 0; i < value.length; i++) {\n      // `value.length - i - 1` bytes have reverse order (big-endian)\n      const component = value[i] << (8 * (value.length - i - 1));\n      number += component;\n    }\n  } else {\n    for (let i = 0; i < value.length; i++) {\n      // `value.length - i - 1` bytes have reverse order (big-endian)\n      const component = value[i] * 2 ** (8 * (value.length - 1 - i));\n      number += component;\n    }\n  }\n\n  const presisionInt = Math.round(\n    ((number * 10 ** -field.presision!) % 1) * 10 ** field.presision!\n  );\n  return presisionInt * 10 ** -(field.scale || 0);\n}\n"],"mappings":"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"}