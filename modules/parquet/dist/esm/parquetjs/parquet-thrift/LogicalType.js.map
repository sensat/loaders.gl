{"version":3,"file":"LogicalType.js","names":["thrift","BsonType","DateType","DecimalType","EnumType","IntType","JsonType","ListType","MapType","NullType","StringType","TimestampType","TimeType","UUIDType","LogicalType","constructor","args","_defineProperty","_fieldsSet","STRING","MAP","LIST","ENUM","DECIMAL","DATE","TIME","TIMESTAMP","INTEGER","UNKNOWN","JSON","BSON","UUID","Thrift","TProtocolException","TProtocolExceptionType","INVALID_DATA","fromSTRING","fromMAP","fromLIST","fromENUM","fromDECIMAL","fromDATE","fromTIME","fromTIMESTAMP","fromINTEGER","fromUNKNOWN","fromJSON","fromBSON","fromUUID","write","output","writeStructBegin","writeFieldBegin","Type","STRUCT","writeFieldEnd","writeFieldStop","writeStructEnd","read","input","_returnValue","readStructBegin","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_1","skip","value_2","value_3","value_4","value_5","value_6","value_7","value_8","value_9","value_10","value_11","value_12","value_13","readFieldEnd","readStructEnd"],"sources":["../../../../src/parquetjs/parquet-thrift/LogicalType.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport * as thrift from 'thrift';\nimport * as BsonType from './BsonType';\nimport * as DateType from './DateType';\nimport * as DecimalType from './DecimalType';\nimport * as EnumType from './EnumType';\nimport * as IntType from './IntType';\nimport * as JsonType from './JsonType';\nimport * as ListType from './ListType';\nimport * as MapType from './MapType';\nimport * as NullType from './NullType';\nimport * as StringType from './StringType';\nimport * as TimestampType from './TimestampType';\nimport * as TimeType from './TimeType';\nimport * as UUIDType from './UUIDType';\nexport interface ILogicalTypeArgs {\n  STRING?: StringType.StringType;\n  MAP?: MapType.MapType;\n  LIST?: ListType.ListType;\n  ENUM?: EnumType.EnumType;\n  DECIMAL?: DecimalType.DecimalType;\n  DATE?: DateType.DateType;\n  TIME?: TimeType.TimeType;\n  TIMESTAMP?: TimestampType.TimestampType;\n  INTEGER?: IntType.IntType;\n  UNKNOWN?: NullType.NullType;\n  JSON?: JsonType.JsonType;\n  BSON?: BsonType.BsonType;\n  UUID?: UUIDType.UUIDType;\n}\nexport class LogicalType {\n  public STRING?: StringType.StringType;\n  public MAP?: MapType.MapType;\n  public LIST?: ListType.ListType;\n  public ENUM?: EnumType.EnumType;\n  public DECIMAL?: DecimalType.DecimalType;\n  public DATE?: DateType.DateType;\n  public TIME?: TimeType.TimeType;\n  public TIMESTAMP?: TimestampType.TimestampType;\n  public INTEGER?: IntType.IntType;\n  public UNKNOWN?: NullType.NullType;\n  public JSON?: JsonType.JsonType;\n  public BSON?: BsonType.BsonType;\n  public UUID?: UUIDType.UUIDType;\n  constructor(args?: ILogicalTypeArgs) {\n    let _fieldsSet: number = 0;\n    if (args != null) {\n      if (args.STRING != null) {\n        _fieldsSet++;\n        this.STRING = args.STRING;\n      }\n      if (args.MAP != null) {\n        _fieldsSet++;\n        this.MAP = args.MAP;\n      }\n      if (args.LIST != null) {\n        _fieldsSet++;\n        this.LIST = args.LIST;\n      }\n      if (args.ENUM != null) {\n        _fieldsSet++;\n        this.ENUM = args.ENUM;\n      }\n      if (args.DECIMAL != null) {\n        _fieldsSet++;\n        this.DECIMAL = args.DECIMAL;\n      }\n      if (args.DATE != null) {\n        _fieldsSet++;\n        this.DATE = args.DATE;\n      }\n      if (args.TIME != null) {\n        _fieldsSet++;\n        this.TIME = args.TIME;\n      }\n      if (args.TIMESTAMP != null) {\n        _fieldsSet++;\n        this.TIMESTAMP = args.TIMESTAMP;\n      }\n      if (args.INTEGER != null) {\n        _fieldsSet++;\n        this.INTEGER = args.INTEGER;\n      }\n      if (args.UNKNOWN != null) {\n        _fieldsSet++;\n        this.UNKNOWN = args.UNKNOWN;\n      }\n      if (args.JSON != null) {\n        _fieldsSet++;\n        this.JSON = args.JSON;\n      }\n      if (args.BSON != null) {\n        _fieldsSet++;\n        this.BSON = args.BSON;\n      }\n      if (args.UUID != null) {\n        _fieldsSet++;\n        this.UUID = args.UUID;\n      }\n      if (_fieldsSet > 1) {\n        throw new thrift.Thrift.TProtocolException(\n          thrift.Thrift.TProtocolExceptionType.INVALID_DATA,\n          'Cannot read a TUnion with more than one set value!'\n        );\n      } else if (_fieldsSet < 1) {\n        throw new thrift.Thrift.TProtocolException(\n          thrift.Thrift.TProtocolExceptionType.INVALID_DATA,\n          'Cannot read a TUnion with no set value!'\n        );\n      }\n    }\n  }\n  public static fromSTRING(STRING: StringType.StringType): LogicalType {\n    return new LogicalType({STRING});\n  }\n  public static fromMAP(MAP: MapType.MapType): LogicalType {\n    return new LogicalType({MAP});\n  }\n  public static fromLIST(LIST: ListType.ListType): LogicalType {\n    return new LogicalType({LIST});\n  }\n  public static fromENUM(ENUM: EnumType.EnumType): LogicalType {\n    return new LogicalType({ENUM});\n  }\n  public static fromDECIMAL(DECIMAL: DecimalType.DecimalType): LogicalType {\n    return new LogicalType({DECIMAL});\n  }\n  public static fromDATE(DATE: DateType.DateType): LogicalType {\n    return new LogicalType({DATE});\n  }\n  public static fromTIME(TIME: TimeType.TimeType): LogicalType {\n    return new LogicalType({TIME});\n  }\n  public static fromTIMESTAMP(TIMESTAMP: TimestampType.TimestampType): LogicalType {\n    return new LogicalType({TIMESTAMP});\n  }\n  public static fromINTEGER(INTEGER: IntType.IntType): LogicalType {\n    return new LogicalType({INTEGER});\n  }\n  public static fromUNKNOWN(UNKNOWN: NullType.NullType): LogicalType {\n    return new LogicalType({UNKNOWN});\n  }\n  public static fromJSON(JSON: JsonType.JsonType): LogicalType {\n    return new LogicalType({JSON});\n  }\n  public static fromBSON(BSON: BsonType.BsonType): LogicalType {\n    return new LogicalType({BSON});\n  }\n  public static fromUUID(UUID: UUIDType.UUIDType): LogicalType {\n    return new LogicalType({UUID});\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('LogicalType');\n    if (this.STRING != null) {\n      output.writeFieldBegin('STRING', thrift.Thrift.Type.STRUCT, 1);\n      this.STRING.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.MAP != null) {\n      output.writeFieldBegin('MAP', thrift.Thrift.Type.STRUCT, 2);\n      this.MAP.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.LIST != null) {\n      output.writeFieldBegin('LIST', thrift.Thrift.Type.STRUCT, 3);\n      this.LIST.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.ENUM != null) {\n      output.writeFieldBegin('ENUM', thrift.Thrift.Type.STRUCT, 4);\n      this.ENUM.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.DECIMAL != null) {\n      output.writeFieldBegin('DECIMAL', thrift.Thrift.Type.STRUCT, 5);\n      this.DECIMAL.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.DATE != null) {\n      output.writeFieldBegin('DATE', thrift.Thrift.Type.STRUCT, 6);\n      this.DATE.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.TIME != null) {\n      output.writeFieldBegin('TIME', thrift.Thrift.Type.STRUCT, 7);\n      this.TIME.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.TIMESTAMP != null) {\n      output.writeFieldBegin('TIMESTAMP', thrift.Thrift.Type.STRUCT, 8);\n      this.TIMESTAMP.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.INTEGER != null) {\n      output.writeFieldBegin('INTEGER', thrift.Thrift.Type.STRUCT, 10);\n      this.INTEGER.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.UNKNOWN != null) {\n      output.writeFieldBegin('UNKNOWN', thrift.Thrift.Type.STRUCT, 11);\n      this.UNKNOWN.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.JSON != null) {\n      output.writeFieldBegin('JSON', thrift.Thrift.Type.STRUCT, 12);\n      this.JSON.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.BSON != null) {\n      output.writeFieldBegin('BSON', thrift.Thrift.Type.STRUCT, 13);\n      this.BSON.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.UUID != null) {\n      output.writeFieldBegin('UUID', thrift.Thrift.Type.STRUCT, 14);\n      this.UUID.write(output);\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): LogicalType {\n    let _fieldsSet: number = 0;\n    let _returnValue: LogicalType | null = null;\n    input.readStructBegin();\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_1: StringType.StringType = StringType.StringType.read(input);\n            _returnValue = LogicalType.fromSTRING(value_1);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_2: MapType.MapType = MapType.MapType.read(input);\n            _returnValue = LogicalType.fromMAP(value_2);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_3: ListType.ListType = ListType.ListType.read(input);\n            _returnValue = LogicalType.fromLIST(value_3);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_4: EnumType.EnumType = EnumType.EnumType.read(input);\n            _returnValue = LogicalType.fromENUM(value_4);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 5:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_5: DecimalType.DecimalType = DecimalType.DecimalType.read(input);\n            _returnValue = LogicalType.fromDECIMAL(value_5);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 6:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_6: DateType.DateType = DateType.DateType.read(input);\n            _returnValue = LogicalType.fromDATE(value_6);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 7:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_7: TimeType.TimeType = TimeType.TimeType.read(input);\n            _returnValue = LogicalType.fromTIME(value_7);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 8:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_8: TimestampType.TimestampType = TimestampType.TimestampType.read(input);\n            _returnValue = LogicalType.fromTIMESTAMP(value_8);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 10:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_9: IntType.IntType = IntType.IntType.read(input);\n            _returnValue = LogicalType.fromINTEGER(value_9);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 11:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_10: NullType.NullType = NullType.NullType.read(input);\n            _returnValue = LogicalType.fromUNKNOWN(value_10);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 12:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_11: JsonType.JsonType = JsonType.JsonType.read(input);\n            _returnValue = LogicalType.fromJSON(value_11);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 13:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_12: BsonType.BsonType = BsonType.BsonType.read(input);\n            _returnValue = LogicalType.fromBSON(value_12);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 14:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            _fieldsSet++;\n            const value_13: UUIDType.UUIDType = UUIDType.UUIDType.read(input);\n            _returnValue = LogicalType.fromUUID(value_13);\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (_fieldsSet > 1) {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.INVALID_DATA,\n        'Cannot read a TUnion with more than one set value!'\n      );\n    } else if (_fieldsSet < 1) {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.INVALID_DATA,\n        'Cannot read a TUnion with no set value!'\n      );\n    }\n    if (_returnValue !== null) {\n      return _returnValue;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read data for TUnion'\n      );\n    }\n  }\n}\n"],"mappings":"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"}