{"version":3,"file":"ColumnMetaData.js","names":["Int64","thrift","KeyValue","PageEncodingStats","Statistics","ColumnMetaData","constructor","args","_defineProperty","type","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","encodings","path_in_schema","codec","num_values","total_uncompressed_size","total_compressed_size","key_value_metadata","data_page_offset","index_page_offset","dictionary_page_offset","statistics","encoding_stats","write","output","writeStructBegin","writeFieldBegin","Type","I32","writeI32","writeFieldEnd","LIST","writeListBegin","length","forEach","value_1","writeListEnd","STRING","value_2","writeString","I64","writeI64","STRUCT","value_3","value_4","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_5","readI32","skip","value_6","Array","metadata_1","readListBegin","size_1","size","i_1","value_7","push","readListEnd","value_8","metadata_2","size_2","i_2","value_9","readString","value_10","value_11","readI64","value_12","value_13","value_14","metadata_3","size_3","i_3","value_15","value_16","value_17","value_18","value_19","value_20","metadata_4","size_4","i_4","value_21","readFieldEnd","readStructEnd","undefined"],"sources":["../../../../src/parquetjs/parquet-thrift/ColumnMetaData.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport Int64 from 'node-int64';\nimport * as thrift from 'thrift';\nimport * as CompressionCodec from './CompressionCodec';\nimport * as Encoding from './Encoding';\nimport * as KeyValue from './KeyValue';\nimport * as PageEncodingStats from './PageEncodingStats';\nimport * as Statistics from './Statistics';\nimport * as Type from './Type';\nexport interface IColumnMetaDataArgs {\n  type: Type.Type;\n  encodings: Array<Encoding.Encoding>;\n  path_in_schema: Array<string>;\n  codec: CompressionCodec.CompressionCodec;\n  num_values: number | Int64;\n  total_uncompressed_size: number | Int64;\n  total_compressed_size: number | Int64;\n  key_value_metadata?: Array<KeyValue.KeyValue>;\n  data_page_offset: number | Int64;\n  index_page_offset?: number | Int64;\n  dictionary_page_offset?: number | Int64;\n  statistics?: Statistics.Statistics;\n  encoding_stats?: Array<PageEncodingStats.PageEncodingStats>;\n}\nexport class ColumnMetaData {\n  public type: Type.Type;\n  public encodings: Array<Encoding.Encoding>;\n  public path_in_schema: Array<string>;\n  public codec: CompressionCodec.CompressionCodec;\n  public num_values: Int64;\n  public total_uncompressed_size: Int64;\n  public total_compressed_size: Int64;\n  public key_value_metadata?: Array<KeyValue.KeyValue>;\n  public data_page_offset: Int64;\n  public index_page_offset?: Int64;\n  public dictionary_page_offset?: Int64;\n  public statistics?: Statistics.Statistics;\n  public encoding_stats?: Array<PageEncodingStats.PageEncodingStats>;\n  constructor(args: IColumnMetaDataArgs) {\n    if (args != null && args.type != null) {\n      this.type = args.type;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[type] is unset!'\n      );\n    }\n    if (args != null && args.encodings != null) {\n      this.encodings = args.encodings;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[encodings] is unset!'\n      );\n    }\n    if (args != null && args.path_in_schema != null) {\n      this.path_in_schema = args.path_in_schema;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[path_in_schema] is unset!'\n      );\n    }\n    if (args != null && args.codec != null) {\n      this.codec = args.codec;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[codec] is unset!'\n      );\n    }\n    if (args != null && args.num_values != null) {\n      if (typeof args.num_values === 'number') {\n        this.num_values = new Int64(args.num_values);\n      } else {\n        this.num_values = args.num_values;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[num_values] is unset!'\n      );\n    }\n    if (args != null && args.total_uncompressed_size != null) {\n      if (typeof args.total_uncompressed_size === 'number') {\n        this.total_uncompressed_size = new Int64(args.total_uncompressed_size);\n      } else {\n        this.total_uncompressed_size = args.total_uncompressed_size;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[total_uncompressed_size] is unset!'\n      );\n    }\n    if (args != null && args.total_compressed_size != null) {\n      if (typeof args.total_compressed_size === 'number') {\n        this.total_compressed_size = new Int64(args.total_compressed_size);\n      } else {\n        this.total_compressed_size = args.total_compressed_size;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[total_compressed_size] is unset!'\n      );\n    }\n    if (args != null && args.key_value_metadata != null) {\n      this.key_value_metadata = args.key_value_metadata;\n    }\n    if (args != null && args.data_page_offset != null) {\n      if (typeof args.data_page_offset === 'number') {\n        this.data_page_offset = new Int64(args.data_page_offset);\n      } else {\n        this.data_page_offset = args.data_page_offset;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[data_page_offset] is unset!'\n      );\n    }\n    if (args != null && args.index_page_offset != null) {\n      if (typeof args.index_page_offset === 'number') {\n        this.index_page_offset = new Int64(args.index_page_offset);\n      } else {\n        this.index_page_offset = args.index_page_offset;\n      }\n    }\n    if (args != null && args.dictionary_page_offset != null) {\n      if (typeof args.dictionary_page_offset === 'number') {\n        this.dictionary_page_offset = new Int64(args.dictionary_page_offset);\n      } else {\n        this.dictionary_page_offset = args.dictionary_page_offset;\n      }\n    }\n    if (args != null && args.statistics != null) {\n      this.statistics = args.statistics;\n    }\n    if (args != null && args.encoding_stats != null) {\n      this.encoding_stats = args.encoding_stats;\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('ColumnMetaData');\n    if (this.type != null) {\n      output.writeFieldBegin('type', thrift.Thrift.Type.I32, 1);\n      output.writeI32(this.type);\n      output.writeFieldEnd();\n    }\n    if (this.encodings != null) {\n      output.writeFieldBegin('encodings', thrift.Thrift.Type.LIST, 2);\n      output.writeListBegin(thrift.Thrift.Type.I32, this.encodings.length);\n      this.encodings.forEach((value_1: Encoding.Encoding): void => {\n        output.writeI32(value_1);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.path_in_schema != null) {\n      output.writeFieldBegin('path_in_schema', thrift.Thrift.Type.LIST, 3);\n      output.writeListBegin(thrift.Thrift.Type.STRING, this.path_in_schema.length);\n      this.path_in_schema.forEach((value_2: string): void => {\n        output.writeString(value_2);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.codec != null) {\n      output.writeFieldBegin('codec', thrift.Thrift.Type.I32, 4);\n      output.writeI32(this.codec);\n      output.writeFieldEnd();\n    }\n    if (this.num_values != null) {\n      output.writeFieldBegin('num_values', thrift.Thrift.Type.I64, 5);\n      output.writeI64(this.num_values);\n      output.writeFieldEnd();\n    }\n    if (this.total_uncompressed_size != null) {\n      output.writeFieldBegin('total_uncompressed_size', thrift.Thrift.Type.I64, 6);\n      output.writeI64(this.total_uncompressed_size);\n      output.writeFieldEnd();\n    }\n    if (this.total_compressed_size != null) {\n      output.writeFieldBegin('total_compressed_size', thrift.Thrift.Type.I64, 7);\n      output.writeI64(this.total_compressed_size);\n      output.writeFieldEnd();\n    }\n    if (this.key_value_metadata != null) {\n      output.writeFieldBegin('key_value_metadata', thrift.Thrift.Type.LIST, 8);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.key_value_metadata.length);\n      this.key_value_metadata.forEach((value_3: KeyValue.KeyValue): void => {\n        value_3.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.data_page_offset != null) {\n      output.writeFieldBegin('data_page_offset', thrift.Thrift.Type.I64, 9);\n      output.writeI64(this.data_page_offset);\n      output.writeFieldEnd();\n    }\n    if (this.index_page_offset != null) {\n      output.writeFieldBegin('index_page_offset', thrift.Thrift.Type.I64, 10);\n      output.writeI64(this.index_page_offset);\n      output.writeFieldEnd();\n    }\n    if (this.dictionary_page_offset != null) {\n      output.writeFieldBegin('dictionary_page_offset', thrift.Thrift.Type.I64, 11);\n      output.writeI64(this.dictionary_page_offset);\n      output.writeFieldEnd();\n    }\n    if (this.statistics != null) {\n      output.writeFieldBegin('statistics', thrift.Thrift.Type.STRUCT, 12);\n      this.statistics.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.encoding_stats != null) {\n      output.writeFieldBegin('encoding_stats', thrift.Thrift.Type.LIST, 13);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.encoding_stats.length);\n      this.encoding_stats.forEach((value_4: PageEncodingStats.PageEncodingStats): void => {\n        value_4.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): ColumnMetaData {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_5: Type.Type = input.readI32();\n            _args.type = value_5;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_6: Array<Encoding.Encoding> = new Array<Encoding.Encoding>();\n            const metadata_1: thrift.TList = input.readListBegin();\n            const size_1: number = metadata_1.size;\n            for (let i_1: number = 0; i_1 < size_1; i_1++) {\n              const value_7: Encoding.Encoding = input.readI32();\n              value_6.push(value_7);\n            }\n            input.readListEnd();\n            _args.encodings = value_6;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_8: Array<string> = new Array<string>();\n            const metadata_2: thrift.TList = input.readListBegin();\n            const size_2: number = metadata_2.size;\n            for (let i_2: number = 0; i_2 < size_2; i_2++) {\n              const value_9: string = input.readString();\n              value_8.push(value_9);\n            }\n            input.readListEnd();\n            _args.path_in_schema = value_8;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_10: CompressionCodec.CompressionCodec = input.readI32();\n            _args.codec = value_10;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 5:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_11: Int64 = input.readI64();\n            _args.num_values = value_11;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 6:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_12: Int64 = input.readI64();\n            _args.total_uncompressed_size = value_12;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 7:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_13: Int64 = input.readI64();\n            _args.total_compressed_size = value_13;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 8:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_14: Array<KeyValue.KeyValue> = new Array<KeyValue.KeyValue>();\n            const metadata_3: thrift.TList = input.readListBegin();\n            const size_3: number = metadata_3.size;\n            for (let i_3: number = 0; i_3 < size_3; i_3++) {\n              const value_15: KeyValue.KeyValue = KeyValue.KeyValue.read(input);\n              value_14.push(value_15);\n            }\n            input.readListEnd();\n            _args.key_value_metadata = value_14;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 9:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_16: Int64 = input.readI64();\n            _args.data_page_offset = value_16;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 10:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_17: Int64 = input.readI64();\n            _args.index_page_offset = value_17;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 11:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_18: Int64 = input.readI64();\n            _args.dictionary_page_offset = value_18;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 12:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            const value_19: Statistics.Statistics = Statistics.Statistics.read(input);\n            _args.statistics = value_19;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 13:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_20: Array<PageEncodingStats.PageEncodingStats> =\n              new Array<PageEncodingStats.PageEncodingStats>();\n            const metadata_4: thrift.TList = input.readListBegin();\n            const size_4: number = metadata_4.size;\n            for (let i_4: number = 0; i_4 < size_4; i_4++) {\n              const value_21: PageEncodingStats.PageEncodingStats =\n                PageEncodingStats.PageEncodingStats.read(input);\n              value_20.push(value_21);\n            }\n            input.readListEnd();\n            _args.encoding_stats = value_20;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (\n      _args.type !== undefined &&\n      _args.encodings !== undefined &&\n      _args.path_in_schema !== undefined &&\n      _args.codec !== undefined &&\n      _args.num_values !== undefined &&\n      _args.total_uncompressed_size !== undefined &&\n      _args.total_compressed_size !== undefined &&\n      _args.data_page_offset !== undefined\n    ) {\n      return new ColumnMetaData(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read ColumnMetaData from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}