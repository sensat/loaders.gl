{"version":3,"file":"RowGroup.js","names":["Int64","thrift","ColumnChunk","SortingColumn","RowGroup","constructor","args","_defineProperty","columns","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","total_byte_size","num_rows","sorting_columns","write","output","writeStructBegin","writeFieldBegin","Type","LIST","writeListBegin","STRUCT","length","forEach","value_1","writeListEnd","writeFieldEnd","I64","writeI64","value_2","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_3","Array","metadata_1","readListBegin","size_1","size","i_1","value_4","push","readListEnd","skip","value_5","readI64","value_6","value_7","metadata_2","size_2","i_2","value_8","readFieldEnd","readStructEnd","undefined"],"sources":["../../../../src/parquetjs/parquet-thrift/RowGroup.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport Int64 from 'node-int64';\nimport * as thrift from 'thrift';\nimport * as ColumnChunk from './ColumnChunk';\nimport * as SortingColumn from './SortingColumn';\nexport interface IRowGroupArgs {\n  columns: Array<ColumnChunk.ColumnChunk>;\n  total_byte_size: number | Int64;\n  num_rows: number | Int64;\n  sorting_columns?: Array<SortingColumn.SortingColumn>;\n}\nexport class RowGroup {\n  public columns: Array<ColumnChunk.ColumnChunk>;\n  public total_byte_size: Int64;\n  public num_rows: Int64;\n  public sorting_columns?: Array<SortingColumn.SortingColumn>;\n  constructor(args: IRowGroupArgs) {\n    if (args != null && args.columns != null) {\n      this.columns = args.columns;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[columns] is unset!'\n      );\n    }\n    if (args != null && args.total_byte_size != null) {\n      if (typeof args.total_byte_size === 'number') {\n        this.total_byte_size = new Int64(args.total_byte_size);\n      } else {\n        this.total_byte_size = args.total_byte_size;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[total_byte_size] is unset!'\n      );\n    }\n    if (args != null && args.num_rows != null) {\n      if (typeof args.num_rows === 'number') {\n        this.num_rows = new Int64(args.num_rows);\n      } else {\n        this.num_rows = args.num_rows;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[num_rows] is unset!'\n      );\n    }\n    if (args != null && args.sorting_columns != null) {\n      this.sorting_columns = args.sorting_columns;\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('RowGroup');\n    if (this.columns != null) {\n      output.writeFieldBegin('columns', thrift.Thrift.Type.LIST, 1);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.columns.length);\n      this.columns.forEach((value_1: ColumnChunk.ColumnChunk): void => {\n        value_1.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.total_byte_size != null) {\n      output.writeFieldBegin('total_byte_size', thrift.Thrift.Type.I64, 2);\n      output.writeI64(this.total_byte_size);\n      output.writeFieldEnd();\n    }\n    if (this.num_rows != null) {\n      output.writeFieldBegin('num_rows', thrift.Thrift.Type.I64, 3);\n      output.writeI64(this.num_rows);\n      output.writeFieldEnd();\n    }\n    if (this.sorting_columns != null) {\n      output.writeFieldBegin('sorting_columns', thrift.Thrift.Type.LIST, 4);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.sorting_columns.length);\n      this.sorting_columns.forEach((value_2: SortingColumn.SortingColumn): void => {\n        value_2.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): RowGroup {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_3: Array<ColumnChunk.ColumnChunk> = new Array<ColumnChunk.ColumnChunk>();\n            const metadata_1: thrift.TList = input.readListBegin();\n            const size_1: number = metadata_1.size;\n            for (let i_1: number = 0; i_1 < size_1; i_1++) {\n              const value_4: ColumnChunk.ColumnChunk = ColumnChunk.ColumnChunk.read(input);\n              value_3.push(value_4);\n            }\n            input.readListEnd();\n            _args.columns = value_3;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_5: Int64 = input.readI64();\n            _args.total_byte_size = value_5;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_6: Int64 = input.readI64();\n            _args.num_rows = value_6;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_7: Array<SortingColumn.SortingColumn> =\n              new Array<SortingColumn.SortingColumn>();\n            const metadata_2: thrift.TList = input.readListBegin();\n            const size_2: number = metadata_2.size;\n            for (let i_2: number = 0; i_2 < size_2; i_2++) {\n              const value_8: SortingColumn.SortingColumn = SortingColumn.SortingColumn.read(input);\n              value_7.push(value_8);\n            }\n            input.readListEnd();\n            _args.sorting_columns = value_7;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (\n      _args.columns !== undefined &&\n      _args.total_byte_size !== undefined &&\n      _args.num_rows !== undefined\n    ) {\n      return new RowGroup(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read RowGroup from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}