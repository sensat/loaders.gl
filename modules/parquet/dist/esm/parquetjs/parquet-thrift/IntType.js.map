{"version":3,"file":"IntType.js","names":["thrift","IntType","constructor","args","_defineProperty","bitWidth","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","isSigned","write","output","writeStructBegin","writeFieldBegin","Type","BYTE","writeByte","writeFieldEnd","BOOL","writeBool","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_1","readByte","skip","value_2","readBool","readFieldEnd","readStructEnd","undefined"],"sources":["../../../../src/parquetjs/parquet-thrift/IntType.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport * as thrift from 'thrift';\nexport interface IIntTypeArgs {\n  bitWidth: number;\n  isSigned: boolean;\n}\nexport class IntType {\n  public bitWidth: number;\n  public isSigned: boolean;\n  constructor(args: IIntTypeArgs) {\n    if (args != null && args.bitWidth != null) {\n      this.bitWidth = args.bitWidth;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[bitWidth] is unset!'\n      );\n    }\n    if (args != null && args.isSigned != null) {\n      this.isSigned = args.isSigned;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[isSigned] is unset!'\n      );\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('IntType');\n    if (this.bitWidth != null) {\n      output.writeFieldBegin('bitWidth', thrift.Thrift.Type.BYTE, 1);\n      output.writeByte(this.bitWidth);\n      output.writeFieldEnd();\n    }\n    if (this.isSigned != null) {\n      output.writeFieldBegin('isSigned', thrift.Thrift.Type.BOOL, 2);\n      output.writeBool(this.isSigned);\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): IntType {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.BYTE) {\n            const value_1: number = input.readByte();\n            _args.bitWidth = value_1;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.BOOL) {\n            const value_2: boolean = input.readBool();\n            _args.isSigned = value_2;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (_args.bitWidth !== undefined && _args.isSigned !== undefined) {\n      return new IntType(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read IntType from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}