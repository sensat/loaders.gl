{"version":3,"file":"SchemaElement.js","names":["thrift","LogicalType","SchemaElement","constructor","args","_defineProperty","type","type_length","repetition_type","name","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","num_children","converted_type","scale","precision","field_id","logicalType","write","output","writeStructBegin","writeFieldBegin","Type","I32","writeI32","writeFieldEnd","STRING","writeString","STRUCT","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_1","readI32","skip","value_2","value_3","value_4","readString","value_5","value_6","value_7","value_8","value_9","value_10","readFieldEnd","readStructEnd","undefined"],"sources":["../../../../src/parquetjs/parquet-thrift/SchemaElement.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport * as thrift from 'thrift';\nimport * as ConvertedType from './ConvertedType';\nimport * as FieldRepetitionType from './FieldRepetitionType';\nimport * as LogicalType from './LogicalType';\nimport * as Type from './Type';\nexport interface ISchemaElementArgs {\n  type?: Type.Type;\n  type_length?: number;\n  repetition_type?: FieldRepetitionType.FieldRepetitionType;\n  name: string;\n  num_children?: number;\n  converted_type?: ConvertedType.ConvertedType;\n  scale?: number;\n  precision?: number;\n  field_id?: number;\n  logicalType?: LogicalType.LogicalType;\n}\nexport class SchemaElement {\n  public type?: Type.Type;\n  public type_length?: number;\n  public repetition_type?: FieldRepetitionType.FieldRepetitionType;\n  public name: string;\n  public num_children?: number;\n  public converted_type?: ConvertedType.ConvertedType;\n  public scale?: number;\n  public precision?: number;\n  public field_id?: number;\n  public logicalType?: LogicalType.LogicalType;\n  constructor(args: ISchemaElementArgs) {\n    if (args != null && args.type != null) {\n      this.type = args.type;\n    }\n    if (args != null && args.type_length != null) {\n      this.type_length = args.type_length;\n    }\n    if (args != null && args.repetition_type != null) {\n      this.repetition_type = args.repetition_type;\n    }\n    if (args != null && args.name != null) {\n      this.name = args.name;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[name] is unset!'\n      );\n    }\n    if (args != null && args.num_children != null) {\n      this.num_children = args.num_children;\n    }\n    if (args != null && args.converted_type != null) {\n      this.converted_type = args.converted_type;\n    }\n    if (args != null && args.scale != null) {\n      this.scale = args.scale;\n    }\n    if (args != null && args.precision != null) {\n      this.precision = args.precision;\n    }\n    if (args != null && args.field_id != null) {\n      this.field_id = args.field_id;\n    }\n    if (args != null && args.logicalType != null) {\n      this.logicalType = args.logicalType;\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('SchemaElement');\n    if (this.type != null) {\n      output.writeFieldBegin('type', thrift.Thrift.Type.I32, 1);\n      output.writeI32(this.type);\n      output.writeFieldEnd();\n    }\n    if (this.type_length != null) {\n      output.writeFieldBegin('type_length', thrift.Thrift.Type.I32, 2);\n      output.writeI32(this.type_length);\n      output.writeFieldEnd();\n    }\n    if (this.repetition_type != null) {\n      output.writeFieldBegin('repetition_type', thrift.Thrift.Type.I32, 3);\n      output.writeI32(this.repetition_type);\n      output.writeFieldEnd();\n    }\n    if (this.name != null) {\n      output.writeFieldBegin('name', thrift.Thrift.Type.STRING, 4);\n      output.writeString(this.name);\n      output.writeFieldEnd();\n    }\n    if (this.num_children != null) {\n      output.writeFieldBegin('num_children', thrift.Thrift.Type.I32, 5);\n      output.writeI32(this.num_children);\n      output.writeFieldEnd();\n    }\n    if (this.converted_type != null) {\n      output.writeFieldBegin('converted_type', thrift.Thrift.Type.I32, 6);\n      output.writeI32(this.converted_type);\n      output.writeFieldEnd();\n    }\n    if (this.scale != null) {\n      output.writeFieldBegin('scale', thrift.Thrift.Type.I32, 7);\n      output.writeI32(this.scale);\n      output.writeFieldEnd();\n    }\n    if (this.precision != null) {\n      output.writeFieldBegin('precision', thrift.Thrift.Type.I32, 8);\n      output.writeI32(this.precision);\n      output.writeFieldEnd();\n    }\n    if (this.field_id != null) {\n      output.writeFieldBegin('field_id', thrift.Thrift.Type.I32, 9);\n      output.writeI32(this.field_id);\n      output.writeFieldEnd();\n    }\n    if (this.logicalType != null) {\n      output.writeFieldBegin('logicalType', thrift.Thrift.Type.STRUCT, 10);\n      this.logicalType.write(output);\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): SchemaElement {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_1: Type.Type = input.readI32();\n            _args.type = value_1;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_2: number = input.readI32();\n            _args.type_length = value_2;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_3: FieldRepetitionType.FieldRepetitionType = input.readI32();\n            _args.repetition_type = value_3;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.STRING) {\n            const value_4: string = input.readString();\n            _args.name = value_4;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 5:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_5: number = input.readI32();\n            _args.num_children = value_5;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 6:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_6: ConvertedType.ConvertedType = input.readI32();\n            _args.converted_type = value_6;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 7:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_7: number = input.readI32();\n            _args.scale = value_7;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 8:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_8: number = input.readI32();\n            _args.precision = value_8;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 9:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_9: number = input.readI32();\n            _args.field_id = value_9;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 10:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            const value_10: LogicalType.LogicalType = LogicalType.LogicalType.read(input);\n            _args.logicalType = value_10;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (_args.name !== undefined) {\n      return new SchemaElement(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read SchemaElement from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}