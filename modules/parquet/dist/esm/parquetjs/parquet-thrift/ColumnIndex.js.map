{"version":3,"file":"ColumnIndex.js","names":["Int64","thrift","ColumnIndex","constructor","args","_defineProperty","null_pages","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","min_values","max_values","boundary_order","null_counts","map","c","write","output","writeStructBegin","writeFieldBegin","Type","LIST","writeListBegin","BOOL","length","forEach","value_1","writeBool","writeListEnd","writeFieldEnd","STRING","value_2","writeBinary","value_3","I32","writeI32","I64","value_4","writeI64","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_5","Array","metadata_1","readListBegin","size_1","size","i_1","value_6","readBool","push","readListEnd","skip","value_7","metadata_2","size_2","i_2","value_8","readBinary","value_9","metadata_3","size_3","i_3","value_10","value_11","readI32","value_12","metadata_4","size_4","i_4","value_13","readI64","readFieldEnd","readStructEnd","undefined"],"sources":["../../../../src/parquetjs/parquet-thrift/ColumnIndex.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport Int64 from 'node-int64';\nimport * as thrift from 'thrift';\nimport * as BoundaryOrder from './BoundaryOrder';\nexport interface IColumnIndexArgs {\n  null_pages: Array<boolean>;\n  min_values: Array<Buffer>;\n  max_values: Array<Buffer>;\n  boundary_order: BoundaryOrder.BoundaryOrder;\n  null_counts?: Array<number | Int64>;\n}\nexport class ColumnIndex {\n  public null_pages: Array<boolean>;\n  public min_values: Array<Buffer>;\n  public max_values: Array<Buffer>;\n  public boundary_order: BoundaryOrder.BoundaryOrder;\n  public null_counts?: Array<Int64>;\n  constructor(args: IColumnIndexArgs) {\n    if (args != null && args.null_pages != null) {\n      this.null_pages = args.null_pages;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[null_pages] is unset!'\n      );\n    }\n    if (args != null && args.min_values != null) {\n      this.min_values = args.min_values;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[min_values] is unset!'\n      );\n    }\n    if (args != null && args.max_values != null) {\n      this.max_values = args.max_values;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[max_values] is unset!'\n      );\n    }\n    if (args != null && args.boundary_order != null) {\n      this.boundary_order = args.boundary_order;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[boundary_order] is unset!'\n      );\n    }\n    if (args != null && args.null_counts != null) {\n      this.null_counts = args.null_counts.map((c) => new Int64(+c));\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('ColumnIndex');\n    if (this.null_pages != null) {\n      output.writeFieldBegin('null_pages', thrift.Thrift.Type.LIST, 1);\n      output.writeListBegin(thrift.Thrift.Type.BOOL, this.null_pages.length);\n      this.null_pages.forEach((value_1: boolean): void => {\n        output.writeBool(value_1);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.min_values != null) {\n      output.writeFieldBegin('min_values', thrift.Thrift.Type.LIST, 2);\n      output.writeListBegin(thrift.Thrift.Type.STRING, this.min_values.length);\n      this.min_values.forEach((value_2: Buffer): void => {\n        output.writeBinary(value_2);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.max_values != null) {\n      output.writeFieldBegin('max_values', thrift.Thrift.Type.LIST, 3);\n      output.writeListBegin(thrift.Thrift.Type.STRING, this.max_values.length);\n      this.max_values.forEach((value_3: Buffer): void => {\n        output.writeBinary(value_3);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.boundary_order != null) {\n      output.writeFieldBegin('boundary_order', thrift.Thrift.Type.I32, 4);\n      output.writeI32(this.boundary_order);\n      output.writeFieldEnd();\n    }\n    if (this.null_counts != null) {\n      output.writeFieldBegin('null_counts', thrift.Thrift.Type.LIST, 5);\n      output.writeListBegin(thrift.Thrift.Type.I64, this.null_counts.length);\n      this.null_counts.forEach((value_4: Int64): void => {\n        output.writeI64(value_4);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): ColumnIndex {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_5: Array<boolean> = new Array<boolean>();\n            const metadata_1: thrift.TList = input.readListBegin();\n            const size_1: number = metadata_1.size;\n            for (let i_1: number = 0; i_1 < size_1; i_1++) {\n              const value_6: boolean = input.readBool();\n              value_5.push(value_6);\n            }\n            input.readListEnd();\n            _args.null_pages = value_5;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_7: Array<Buffer> = new Array<Buffer>();\n            const metadata_2: thrift.TList = input.readListBegin();\n            const size_2: number = metadata_2.size;\n            for (let i_2: number = 0; i_2 < size_2; i_2++) {\n              const value_8: Buffer = input.readBinary();\n              value_7.push(value_8);\n            }\n            input.readListEnd();\n            _args.min_values = value_7;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_9: Array<Buffer> = new Array<Buffer>();\n            const metadata_3: thrift.TList = input.readListBegin();\n            const size_3: number = metadata_3.size;\n            for (let i_3: number = 0; i_3 < size_3; i_3++) {\n              const value_10: Buffer = input.readBinary();\n              value_9.push(value_10);\n            }\n            input.readListEnd();\n            _args.max_values = value_9;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_11: BoundaryOrder.BoundaryOrder = input.readI32();\n            _args.boundary_order = value_11;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 5:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_12: Array<Int64> = new Array<Int64>();\n            const metadata_4: thrift.TList = input.readListBegin();\n            const size_4: number = metadata_4.size;\n            for (let i_4: number = 0; i_4 < size_4; i_4++) {\n              const value_13: Int64 = input.readI64();\n              value_12.push(value_13);\n            }\n            input.readListEnd();\n            _args.null_counts = value_12;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (\n      _args.null_pages !== undefined &&\n      _args.min_values !== undefined &&\n      _args.max_values !== undefined &&\n      _args.boundary_order !== undefined\n    ) {\n      return new ColumnIndex(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read ColumnIndex from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}