"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PageLocation = void 0;
/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
const node_int64_1 = __importDefault(require("node-int64"));
const thrift = __importStar(require("thrift"));
class PageLocation {
    constructor(args) {
        if (args != null && args.offset != null) {
            if (typeof args.offset === 'number') {
                this.offset = new node_int64_1.default(args.offset);
            }
            else {
                this.offset = args.offset;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Required field[offset] is unset!');
        }
        if (args != null && args.compressed_page_size != null) {
            this.compressed_page_size = args.compressed_page_size;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Required field[compressed_page_size] is unset!');
        }
        if (args != null && args.first_row_index != null) {
            if (typeof args.first_row_index === 'number') {
                this.first_row_index = new node_int64_1.default(args.first_row_index);
            }
            else {
                this.first_row_index = args.first_row_index;
            }
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Required field[first_row_index] is unset!');
        }
    }
    write(output) {
        output.writeStructBegin('PageLocation');
        if (this.offset != null) {
            output.writeFieldBegin('offset', thrift.Thrift.Type.I64, 1);
            output.writeI64(this.offset);
            output.writeFieldEnd();
        }
        if (this.compressed_page_size != null) {
            output.writeFieldBegin('compressed_page_size', thrift.Thrift.Type.I32, 2);
            output.writeI32(this.compressed_page_size);
            output.writeFieldEnd();
        }
        if (this.first_row_index != null) {
            output.writeFieldBegin('first_row_index', thrift.Thrift.Type.I64, 3);
            output.writeI64(this.first_row_index);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    static read(input) {
        input.readStructBegin();
        let _args = {};
        while (true) {
            const ret = input.readFieldBegin();
            const fieldType = ret.ftype;
            const fieldId = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_1 = input.readI64();
                        _args.offset = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_2 = input.readI32();
                        _args.compressed_page_size = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3 = input.readI64();
                        _args.first_row_index = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.offset !== undefined &&
            _args.compressed_page_size !== undefined &&
            _args.first_row_index !== undefined) {
            return new PageLocation(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Unable to read PageLocation from input');
        }
    }
}
exports.PageLocation = PageLocation;
