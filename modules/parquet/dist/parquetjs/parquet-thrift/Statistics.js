"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Statistics = void 0;
/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
const node_int64_1 = __importDefault(require("node-int64"));
const thrift = __importStar(require("thrift"));
class Statistics {
    constructor(args) {
        if (args != null && args.max != null) {
            this.max = args.max;
        }
        if (args != null && args.min != null) {
            this.min = args.min;
        }
        if (args != null && args.null_count != null) {
            if (typeof args.null_count === 'number') {
                this.null_count = new node_int64_1.default(args.null_count);
            }
            else {
                this.null_count = args.null_count;
            }
        }
        if (args != null && args.distinct_count != null) {
            if (typeof args.distinct_count === 'number') {
                this.distinct_count = new node_int64_1.default(args.distinct_count);
            }
            else {
                this.distinct_count = args.distinct_count;
            }
        }
        if (args != null && args.max_value != null) {
            this.max_value = args.max_value;
        }
        if (args != null && args.min_value != null) {
            this.min_value = args.min_value;
        }
    }
    write(output) {
        output.writeStructBegin('Statistics');
        if (this.max != null) {
            output.writeFieldBegin('max', thrift.Thrift.Type.STRING, 1);
            output.writeBinary(this.max);
            output.writeFieldEnd();
        }
        if (this.min != null) {
            output.writeFieldBegin('min', thrift.Thrift.Type.STRING, 2);
            output.writeBinary(this.min);
            output.writeFieldEnd();
        }
        if (this.null_count != null) {
            output.writeFieldBegin('null_count', thrift.Thrift.Type.I64, 3);
            output.writeI64(this.null_count);
            output.writeFieldEnd();
        }
        if (this.distinct_count != null) {
            output.writeFieldBegin('distinct_count', thrift.Thrift.Type.I64, 4);
            output.writeI64(this.distinct_count);
            output.writeFieldEnd();
        }
        if (this.max_value != null) {
            output.writeFieldBegin('max_value', thrift.Thrift.Type.STRING, 5);
            output.writeBinary(this.max_value);
            output.writeFieldEnd();
        }
        if (this.min_value != null) {
            output.writeFieldBegin('min_value', thrift.Thrift.Type.STRING, 6);
            output.writeBinary(this.min_value);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    static read(input) {
        input.readStructBegin();
        let _args = {};
        while (true) {
            const ret = input.readFieldBegin();
            const fieldType = ret.ftype;
            const fieldId = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_1 = input.readBinary();
                        _args.max = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_2 = input.readBinary();
                        _args.min = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_3 = input.readI64();
                        _args.null_count = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I64) {
                        const value_4 = input.readI64();
                        _args.distinct_count = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_5 = input.readBinary();
                        _args.max_value = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.Thrift.Type.STRING) {
                        const value_6 = input.readBinary();
                        _args.min_value = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Statistics(_args);
    }
}
exports.Statistics = Statistics;
