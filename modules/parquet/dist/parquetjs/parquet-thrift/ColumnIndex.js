"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ColumnIndex = void 0;
/* tslint:disable */
/* eslint-disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v3.7.2
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
const node_int64_1 = __importDefault(require("node-int64"));
const thrift = __importStar(require("thrift"));
class ColumnIndex {
    constructor(args) {
        if (args != null && args.null_pages != null) {
            this.null_pages = args.null_pages;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Required field[null_pages] is unset!');
        }
        if (args != null && args.min_values != null) {
            this.min_values = args.min_values;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Required field[min_values] is unset!');
        }
        if (args != null && args.max_values != null) {
            this.max_values = args.max_values;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Required field[max_values] is unset!');
        }
        if (args != null && args.boundary_order != null) {
            this.boundary_order = args.boundary_order;
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Required field[boundary_order] is unset!');
        }
        if (args != null && args.null_counts != null) {
            this.null_counts = args.null_counts.map((c) => new node_int64_1.default(+c));
        }
    }
    write(output) {
        output.writeStructBegin('ColumnIndex');
        if (this.null_pages != null) {
            output.writeFieldBegin('null_pages', thrift.Thrift.Type.LIST, 1);
            output.writeListBegin(thrift.Thrift.Type.BOOL, this.null_pages.length);
            this.null_pages.forEach((value_1) => {
                output.writeBool(value_1);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.min_values != null) {
            output.writeFieldBegin('min_values', thrift.Thrift.Type.LIST, 2);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.min_values.length);
            this.min_values.forEach((value_2) => {
                output.writeBinary(value_2);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.max_values != null) {
            output.writeFieldBegin('max_values', thrift.Thrift.Type.LIST, 3);
            output.writeListBegin(thrift.Thrift.Type.STRING, this.max_values.length);
            this.max_values.forEach((value_3) => {
                output.writeBinary(value_3);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.boundary_order != null) {
            output.writeFieldBegin('boundary_order', thrift.Thrift.Type.I32, 4);
            output.writeI32(this.boundary_order);
            output.writeFieldEnd();
        }
        if (this.null_counts != null) {
            output.writeFieldBegin('null_counts', thrift.Thrift.Type.LIST, 5);
            output.writeListBegin(thrift.Thrift.Type.I64, this.null_counts.length);
            this.null_counts.forEach((value_4) => {
                output.writeI64(value_4);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    static read(input) {
        input.readStructBegin();
        let _args = {};
        while (true) {
            const ret = input.readFieldBegin();
            const fieldType = ret.ftype;
            const fieldId = ret.fid;
            if (fieldType === thrift.Thrift.Type.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_5 = new Array();
                        const metadata_1 = input.readListBegin();
                        const size_1 = metadata_1.size;
                        for (let i_1 = 0; i_1 < size_1; i_1++) {
                            const value_6 = input.readBool();
                            value_5.push(value_6);
                        }
                        input.readListEnd();
                        _args.null_pages = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_7 = new Array();
                        const metadata_2 = input.readListBegin();
                        const size_2 = metadata_2.size;
                        for (let i_2 = 0; i_2 < size_2; i_2++) {
                            const value_8 = input.readBinary();
                            value_7.push(value_8);
                        }
                        input.readListEnd();
                        _args.min_values = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_9 = new Array();
                        const metadata_3 = input.readListBegin();
                        const size_3 = metadata_3.size;
                        for (let i_3 = 0; i_3 < size_3; i_3++) {
                            const value_10 = input.readBinary();
                            value_9.push(value_10);
                        }
                        input.readListEnd();
                        _args.max_values = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.Thrift.Type.I32) {
                        const value_11 = input.readI32();
                        _args.boundary_order = value_11;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.Thrift.Type.LIST) {
                        const value_12 = new Array();
                        const metadata_4 = input.readListBegin();
                        const size_4 = metadata_4.size;
                        for (let i_4 = 0; i_4 < size_4; i_4++) {
                            const value_13 = input.readI64();
                            value_12.push(value_13);
                        }
                        input.readListEnd();
                        _args.null_counts = value_12;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        if (_args.null_pages !== undefined &&
            _args.min_values !== undefined &&
            _args.max_values !== undefined &&
            _args.boundary_order !== undefined) {
            return new ColumnIndex(_args);
        }
        else {
            throw new thrift.Thrift.TProtocolException(thrift.Thrift.TProtocolExceptionType.UNKNOWN, 'Unable to read ColumnIndex from input');
        }
    }
}
exports.ColumnIndex = ColumnIndex;
