{"version":3,"file":"encode-parquet-wasm.js","names":["_apacheArrow","require","_loadWasm","encode","_x","_x2","_encode","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","table","options","_options$parquet","wasmUrl","wasm","arrowIPCBytes","writerProperties","parquetBytes","wrap","_callee$","_context","prev","next","parquet","loadWasm","sent","tableToIPC","WriterPropertiesBuilder","build","writeParquet","abrupt","buffer","slice","byteOffset","byteLength","stop","RecordBatchStreamWriter","writeAll","toUint8Array"],"sources":["../../../../src/lib/wasm/encode-parquet-wasm.ts"],"sourcesContent":["import type {Table} from 'apache-arrow';\nimport type {WriterOptions} from '@loaders.gl/loader-utils';\n\nimport {RecordBatchStreamWriter} from 'apache-arrow';\nimport {loadWasm} from './load-wasm';\n\nexport type ParquetWriterOptions = WriterOptions & {\n  parquet?: {\n    wasmUrl?: string;\n  };\n};\n\n/**\n * Encode Arrow Table to Parquet buffer\n */\nexport async function encode(table: Table, options?: ParquetWriterOptions): Promise<ArrayBuffer> {\n  const wasmUrl = options?.parquet?.wasmUrl;\n  const wasm = await loadWasm(wasmUrl);\n\n  const arrowIPCBytes = tableToIPC(table);\n  // TODO: provide options for how to write table.\n  const writerProperties = new wasm.WriterPropertiesBuilder().build();\n  const parquetBytes = wasm.writeParquet(arrowIPCBytes, writerProperties);\n  return parquetBytes.buffer.slice(\n    parquetBytes.byteOffset,\n    parquetBytes.byteLength + parquetBytes.byteOffset\n  );\n}\n\n/**\n * Serialize a {@link Table} to the IPC format. This function is a convenience\n * wrapper for {@link RecordBatchStreamWriter} and {@link RecordBatchFileWriter}.\n * Opposite of {@link tableFromIPC}.\n *\n * @param table The Table to serialize.\n * @param type Whether to serialize the Table as a file or a stream.\n */\nexport function tableToIPC(table: Table): Uint8Array {\n  return RecordBatchStreamWriter.writeAll(table).toUint8Array(true);\n}\n"],"mappings":";;;;;;;;;;AAGA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,SAAA,GAAAD,OAAA;AAAqC,SAWfE,MAAMA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,OAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,QAAA;EAAAA,OAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAAC,YAAA,CAAAD,OAAA,CAAAE,IAAA,CAArB,SAAAC,QAAsBC,KAAY,EAAEC,OAA8B;IAAA,IAAAC,gBAAA;IAAA,IAAAC,OAAA,EAAAC,IAAA,EAAAC,aAAA,EAAAC,gBAAA,EAAAC,YAAA;IAAA,OAAAV,YAAA,CAAAD,OAAA,CAAAY,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACjET,OAAO,GAAGF,OAAO,aAAPA,OAAO,wBAAAC,gBAAA,GAAPD,OAAO,CAAEY,OAAO,cAAAX,gBAAA,uBAAhBA,gBAAA,CAAkBC,OAAO;UAAAO,QAAA,CAAAE,IAAA;UAAA,OACtB,IAAAE,kBAAQ,EAACX,OAAO,CAAC;QAAA;UAA9BC,IAAI,GAAAM,QAAA,CAAAK,IAAA;UAEJV,aAAa,GAAGW,UAAU,CAAChB,KAAK,CAAC;UAEjCM,gBAAgB,GAAG,IAAIF,IAAI,CAACa,uBAAuB,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC;UAC7DX,YAAY,GAAGH,IAAI,CAACe,YAAY,CAACd,aAAa,EAAEC,gBAAgB,CAAC;UAAA,OAAAI,QAAA,CAAAU,MAAA,WAChEb,YAAY,CAACc,MAAM,CAACC,KAAK,CAC9Bf,YAAY,CAACgB,UAAU,EACvBhB,YAAY,CAACiB,UAAU,GAAGjB,YAAY,CAACgB,UACzC,CAAC;QAAA;QAAA;UAAA,OAAAb,QAAA,CAAAe,IAAA;MAAA;IAAA,GAAA1B,OAAA;EAAA,CACF;EAAA,OAAAP,OAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAUM,SAASsB,UAAUA,CAAChB,KAAY,EAAc;EACnD,OAAO0B,oCAAuB,CAACC,QAAQ,CAAC3B,KAAK,CAAC,CAAC4B,YAAY,CAAC,IAAI,CAAC;AACnE"}