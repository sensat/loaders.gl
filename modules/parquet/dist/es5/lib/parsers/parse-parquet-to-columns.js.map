{"version":3,"file":"parse-parquet-to-columns.js","names":["_loaderUtils","require","_parquetReader","_convertSchemaFromParquet","_shred","_decodeGeoMetadata","_asyncIterator","iterable","method","async","sync","retry","Symbol","asyncIterator","iterator","call","AsyncFromSyncIterator","TypeError","s","AsyncFromSyncIteratorContinuation","r","Object","Promise","reject","done","resolve","value","then","n","next","prototype","apply","arguments","return","_return","ret","throw","_throw","thr","parseParquetInColumns","_x3","_x4","_parseParquetInColumns","_asyncToGenerator2","default","_regenerator","mark","_callee2","arrayBuffer","options","blob","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","batch","wrap","_callee2$","_context2","prev","Blob","parseParquetFileInColumnarBatches","sent","abrupt","shape","schema","data","t0","finish","Error","stop","_x","_x2","_parseParquetFileInColumnarBatches","_wrapAsyncGenerator2","_callee","file","reader","parquetSchema","parquetMetadata","rowGroups","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","rowGroup","_callee$","_context","makeReadableFile","ParquetReader","_awaitAsyncGenerator2","getSchema","getFileMetadata","convertParquetSchema","unpackGeoMetadata","rowGroupIterator","parquet","convertRowGroupToTableBatch","materializeColumns","batchType","length","rowCount"],"sources":["../../../../src/lib/parsers/parse-parquet-to-columns.ts"],"sourcesContent":["// loaders.gl, MIT license\n\n// import type {LoaderWithParser, Loader, LoaderOptions} from '@loaders.gl/loader-utils';\nimport {ColumnarTable, ColumnarTableBatch, Schema} from '@loaders.gl/schema';\nimport {makeReadableFile} from '@loaders.gl/loader-utils';\nimport type {ParquetLoaderOptions} from '../../parquet-loader';\nimport {ParquetReader} from '../../parquetjs/parser/parquet-reader';\nimport {ParquetRowGroup} from '../../parquetjs/schema/declare';\nimport {ParquetSchema} from '../../parquetjs/schema/schema';\nimport {convertParquetSchema} from '../arrow/convert-schema-from-parquet';\nimport {materializeColumns} from '../../parquetjs/schema/shred';\n// import {convertParquetRowGroupToColumns} from '../arrow/convert-row-group-to-columns';\nimport {unpackGeoMetadata} from '../geo/decode-geo-metadata';\n\nexport async function parseParquetInColumns(\n  arrayBuffer: ArrayBuffer,\n  options?: ParquetLoaderOptions\n): Promise<ColumnarTable> {\n  const blob = new Blob([arrayBuffer]);\n  for await (const batch of parseParquetFileInColumnarBatches(blob, options)) {\n    return {\n      shape: 'columnar-table',\n      schema: batch.schema,\n      data: batch.data\n    };\n  }\n  throw new Error('empty table');\n}\n\nexport async function* parseParquetFileInColumnarBatches(\n  blob: Blob,\n  options?: ParquetLoaderOptions\n): AsyncIterable<ColumnarTableBatch> {\n  const file = makeReadableFile(blob);\n  const reader = new ParquetReader(file);\n  const parquetSchema = await reader.getSchema();\n  const parquetMetadata = await reader.getFileMetadata();\n  const schema = convertParquetSchema(parquetSchema, parquetMetadata);\n  unpackGeoMetadata(schema);\n  const rowGroups = reader.rowGroupIterator(options?.parquet);\n  for await (const rowGroup of rowGroups) {\n    yield convertRowGroupToTableBatch(parquetSchema, rowGroup, schema);\n  }\n}\n\nfunction convertRowGroupToTableBatch(\n  parquetSchema: ParquetSchema,\n  rowGroup: ParquetRowGroup,\n  schema: Schema\n): ColumnarTableBatch {\n  // const data = convertParquetRowGroupToColumns(schema, rowGroup);\n  const data = materializeColumns(parquetSchema, rowGroup);\n  return {\n    shape: 'columnar-table',\n    batchType: 'data',\n    schema,\n    data,\n    length: rowGroup.rowCount\n  };\n}\n"],"mappings":"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"}