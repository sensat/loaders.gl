{"version":3,"file":"parse-parquet-to-rows.js","names":["_loaderUtils","require","_parquetReader","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","normalCompletion","didErr","err","call","step","next","_e2","return","minLen","_arrayLikeToArray","Object","prototype","toString","slice","constructor","name","from","test","arr","len","arr2","_asyncIterator","iterable","method","async","sync","retry","asyncIterator","AsyncFromSyncIterator","AsyncFromSyncIteratorContinuation","r","Promise","reject","resolve","then","apply","arguments","_return","ret","throw","_throw","thr","parseParquet","_x3","_x4","_parseParquet","_asyncToGenerator2","default","_regenerator","mark","_callee2","arrayBuffer","options","blob","rows","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","batch","_iterator3","_step3","row","wrap","_callee2$","_context2","prev","Blob","parseParquetFileInBatches","sent","data","push","t0","finish","abrupt","shape","stop","_x","_x2","_parseParquetFileInBatches","_wrapAsyncGenerator2","_callee","file","reader","rowBatches","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_callee$","_context","makeReadableFile","ParquetReader","rowBatchIterator","parquet","_awaitAsyncGenerator2","batchType"],"sources":["../../../../src/lib/parsers/parse-parquet-to-rows.ts"],"sourcesContent":["// import type {LoaderWithParser, Loader, LoaderOptions} from '@loaders.gl/loader-utils';\n// import {ColumnarTableBatch} from '@loaders.gl/schema';\nimport {makeReadableFile} from '@loaders.gl/loader-utils';\nimport {ObjectRowTable, ObjectRowTableBatch} from '@loaders.gl/schema';\nimport type {ParquetLoaderOptions} from '../../parquet-loader';\nimport type {ParquetRow} from '../../parquetjs/schema/declare';\nimport {ParquetReader} from '../../parquetjs/parser/parquet-reader';\n\nexport async function parseParquet(\n  arrayBuffer: ArrayBuffer,\n  options?: ParquetLoaderOptions\n): Promise<ObjectRowTable> {\n  const blob = new Blob([arrayBuffer]);\n\n  const rows: ParquetRow[] = [];\n  for await (const batch of parseParquetFileInBatches(blob, options)) {\n    // we have only one input batch so return\n    for (const row of batch.data) {\n      rows.push(row);\n    }\n  }\n\n  return {\n    shape: 'object-row-table',\n    // TODO - spread can fail for very large number of batches\n    data: rows\n  };\n}\n\nexport async function* parseParquetFileInBatches(\n  blob: Blob,\n  options?: ParquetLoaderOptions\n): AsyncIterable<ObjectRowTableBatch> {\n  const file = makeReadableFile(blob);\n  const reader = new ParquetReader(file);\n  const rowBatches = reader.rowBatchIterator(options?.parquet);\n  for await (const rows of rowBatches) {\n    yield {\n      shape: 'object-row-table',\n      data: rows,\n      batchType: 'data',\n      length: rows.length\n    };\n  }\n}\n"],"mappings":"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"}