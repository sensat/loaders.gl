{"version":3,"file":"BsonType.js","names":["thrift","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","BsonType","_classCallCheck2","_createClass2","value","write","output","writeStructBegin","writeFieldStop","writeStructEnd","read","input","readStructBegin","ret","readFieldBegin","fieldType","ftype","fieldId","fid","Thrift","Type","STOP","skip","readFieldEnd","readStructEnd","exports"],"sources":["../../../../src/parquetjs/parquet-thrift/BsonType.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport * as thrift from 'thrift';\nexport interface IBsonTypeArgs {}\nexport class BsonType {\n  constructor() {}\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('BsonType');\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): BsonType {\n    input.readStructBegin();\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    return new BsonType();\n  }\n}\n"],"mappings":";;;;;;;;;;AAMA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AAAiC,SAAAC,yBAAAC,WAAA,eAAAC,OAAA,kCAAAC,iBAAA,OAAAD,OAAA,QAAAE,gBAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,yBAAAC,WAAA,WAAAA,WAAA,GAAAG,gBAAA,GAAAD,iBAAA,KAAAF,WAAA;AAAA,SAAAH,wBAAAO,GAAA,EAAAJ,WAAA,SAAAA,WAAA,IAAAI,GAAA,IAAAA,GAAA,CAAAC,UAAA,WAAAD,GAAA,QAAAA,GAAA,aAAAE,OAAA,CAAAF,GAAA,yBAAAA,GAAA,4BAAAG,OAAA,EAAAH,GAAA,UAAAI,KAAA,GAAAT,wBAAA,CAAAC,WAAA,OAAAQ,KAAA,IAAAA,KAAA,CAAAC,GAAA,CAAAL,GAAA,YAAAI,KAAA,CAAAE,GAAA,CAAAN,GAAA,SAAAO,MAAA,WAAAC,qBAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,GAAA,IAAAZ,GAAA,QAAAY,GAAA,kBAAAH,MAAA,CAAAI,SAAA,CAAAC,cAAA,CAAAC,IAAA,CAAAf,GAAA,EAAAY,GAAA,SAAAI,IAAA,GAAAR,qBAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAX,GAAA,EAAAY,GAAA,cAAAI,IAAA,KAAAA,IAAA,CAAAV,GAAA,IAAAU,IAAA,CAAAC,GAAA,KAAAR,MAAA,CAAAC,cAAA,CAAAH,MAAA,EAAAK,GAAA,EAAAI,IAAA,YAAAT,MAAA,CAAAK,GAAA,IAAAZ,GAAA,CAAAY,GAAA,SAAAL,MAAA,CAAAJ,OAAA,GAAAH,GAAA,MAAAI,KAAA,IAAAA,KAAA,CAAAa,GAAA,CAAAjB,GAAA,EAAAO,MAAA,YAAAA,MAAA;AAAA,IAEpBW,QAAQ;EACnB,SAAAA,SAAA,EAAc;IAAA,IAAAC,gBAAA,CAAAhB,OAAA,QAAAe,QAAA;EAAC;EAAC,IAAAE,aAAA,CAAAjB,OAAA,EAAAe,QAAA;IAAAN,GAAA;IAAAS,KAAA,EAChB,SAAAC,MAAaC,MAAwB,EAAQ;MAC3CA,MAAM,CAACC,gBAAgB,CAAC,UAAU,CAAC;MACnCD,MAAM,CAACE,cAAc,CAAC,CAAC;MACvBF,MAAM,CAACG,cAAc,CAAC,CAAC;MACvB;IACF;EAAC;IAAAd,GAAA;IAAAS,KAAA,EACD,SAAAM,KAAmBC,KAAuB,EAAY;MACpDA,KAAK,CAACC,eAAe,CAAC,CAAC;MACvB,OAAO,IAAI,EAAE;QACX,IAAMC,GAAkB,GAAGF,KAAK,CAACG,cAAc,CAAC,CAAC;QACjD,IAAMC,SAA6B,GAAGF,GAAG,CAACG,KAAK;QAC/C,IAAMC,OAAe,GAAGJ,GAAG,CAACK,GAAG;QAC/B,IAAIH,SAAS,KAAKxC,MAAM,CAAC4C,MAAM,CAACC,IAAI,CAACC,IAAI,EAAE;UACzC;QACF;QACA,QAAQJ,OAAO;UACb;YAAS;cACPN,KAAK,CAACW,IAAI,CAACP,SAAS,CAAC;YACvB;QACF;QACAJ,KAAK,CAACY,YAAY,CAAC,CAAC;MACtB;MACAZ,KAAK,CAACa,aAAa,CAAC,CAAC;MACrB,OAAO,IAAIvB,QAAQ,CAAC,CAAC;IACvB;EAAC;EAAA,OAAAA,QAAA;AAAA;AAAAwB,OAAA,CAAAxB,QAAA,GAAAA,QAAA"}