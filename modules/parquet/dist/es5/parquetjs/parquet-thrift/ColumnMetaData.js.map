{"version":3,"file":"ColumnMetaData.js","names":["_nodeInt","_interopRequireDefault","require","thrift","_interopRequireWildcard","KeyValue","PageEncodingStats","Statistics","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","ColumnMetaData","args","_classCallCheck2","_defineProperty2","type","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","encodings","path_in_schema","codec","num_values","Int64","total_uncompressed_size","total_compressed_size","key_value_metadata","data_page_offset","index_page_offset","dictionary_page_offset","statistics","encoding_stats","_createClass2","value","write","output","writeStructBegin","writeFieldBegin","Type","I32","writeI32","writeFieldEnd","LIST","writeListBegin","length","forEach","value_1","writeListEnd","STRING","value_2","writeString","I64","writeI64","STRUCT","value_3","value_4","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_5","readI32","skip","value_6","Array","metadata_1","readListBegin","size_1","size","i_1","value_7","push","readListEnd","value_8","metadata_2","size_2","i_2","value_9","readString","value_10","value_11","readI64","value_12","value_13","value_14","metadata_3","size_3","i_3","value_15","value_16","value_17","value_18","value_19","value_20","metadata_4","size_4","i_4","value_21","readFieldEnd","readStructEnd","undefined","exports"],"sources":["../../../../src/parquetjs/parquet-thrift/ColumnMetaData.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport Int64 from 'node-int64';\nimport * as thrift from 'thrift';\nimport * as CompressionCodec from './CompressionCodec';\nimport * as Encoding from './Encoding';\nimport * as KeyValue from './KeyValue';\nimport * as PageEncodingStats from './PageEncodingStats';\nimport * as Statistics from './Statistics';\nimport * as Type from './Type';\nexport interface IColumnMetaDataArgs {\n  type: Type.Type;\n  encodings: Array<Encoding.Encoding>;\n  path_in_schema: Array<string>;\n  codec: CompressionCodec.CompressionCodec;\n  num_values: number | Int64;\n  total_uncompressed_size: number | Int64;\n  total_compressed_size: number | Int64;\n  key_value_metadata?: Array<KeyValue.KeyValue>;\n  data_page_offset: number | Int64;\n  index_page_offset?: number | Int64;\n  dictionary_page_offset?: number | Int64;\n  statistics?: Statistics.Statistics;\n  encoding_stats?: Array<PageEncodingStats.PageEncodingStats>;\n}\nexport class ColumnMetaData {\n  public type: Type.Type;\n  public encodings: Array<Encoding.Encoding>;\n  public path_in_schema: Array<string>;\n  public codec: CompressionCodec.CompressionCodec;\n  public num_values: Int64;\n  public total_uncompressed_size: Int64;\n  public total_compressed_size: Int64;\n  public key_value_metadata?: Array<KeyValue.KeyValue>;\n  public data_page_offset: Int64;\n  public index_page_offset?: Int64;\n  public dictionary_page_offset?: Int64;\n  public statistics?: Statistics.Statistics;\n  public encoding_stats?: Array<PageEncodingStats.PageEncodingStats>;\n  constructor(args: IColumnMetaDataArgs) {\n    if (args != null && args.type != null) {\n      this.type = args.type;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[type] is unset!'\n      );\n    }\n    if (args != null && args.encodings != null) {\n      this.encodings = args.encodings;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[encodings] is unset!'\n      );\n    }\n    if (args != null && args.path_in_schema != null) {\n      this.path_in_schema = args.path_in_schema;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[path_in_schema] is unset!'\n      );\n    }\n    if (args != null && args.codec != null) {\n      this.codec = args.codec;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[codec] is unset!'\n      );\n    }\n    if (args != null && args.num_values != null) {\n      if (typeof args.num_values === 'number') {\n        this.num_values = new Int64(args.num_values);\n      } else {\n        this.num_values = args.num_values;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[num_values] is unset!'\n      );\n    }\n    if (args != null && args.total_uncompressed_size != null) {\n      if (typeof args.total_uncompressed_size === 'number') {\n        this.total_uncompressed_size = new Int64(args.total_uncompressed_size);\n      } else {\n        this.total_uncompressed_size = args.total_uncompressed_size;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[total_uncompressed_size] is unset!'\n      );\n    }\n    if (args != null && args.total_compressed_size != null) {\n      if (typeof args.total_compressed_size === 'number') {\n        this.total_compressed_size = new Int64(args.total_compressed_size);\n      } else {\n        this.total_compressed_size = args.total_compressed_size;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[total_compressed_size] is unset!'\n      );\n    }\n    if (args != null && args.key_value_metadata != null) {\n      this.key_value_metadata = args.key_value_metadata;\n    }\n    if (args != null && args.data_page_offset != null) {\n      if (typeof args.data_page_offset === 'number') {\n        this.data_page_offset = new Int64(args.data_page_offset);\n      } else {\n        this.data_page_offset = args.data_page_offset;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[data_page_offset] is unset!'\n      );\n    }\n    if (args != null && args.index_page_offset != null) {\n      if (typeof args.index_page_offset === 'number') {\n        this.index_page_offset = new Int64(args.index_page_offset);\n      } else {\n        this.index_page_offset = args.index_page_offset;\n      }\n    }\n    if (args != null && args.dictionary_page_offset != null) {\n      if (typeof args.dictionary_page_offset === 'number') {\n        this.dictionary_page_offset = new Int64(args.dictionary_page_offset);\n      } else {\n        this.dictionary_page_offset = args.dictionary_page_offset;\n      }\n    }\n    if (args != null && args.statistics != null) {\n      this.statistics = args.statistics;\n    }\n    if (args != null && args.encoding_stats != null) {\n      this.encoding_stats = args.encoding_stats;\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('ColumnMetaData');\n    if (this.type != null) {\n      output.writeFieldBegin('type', thrift.Thrift.Type.I32, 1);\n      output.writeI32(this.type);\n      output.writeFieldEnd();\n    }\n    if (this.encodings != null) {\n      output.writeFieldBegin('encodings', thrift.Thrift.Type.LIST, 2);\n      output.writeListBegin(thrift.Thrift.Type.I32, this.encodings.length);\n      this.encodings.forEach((value_1: Encoding.Encoding): void => {\n        output.writeI32(value_1);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.path_in_schema != null) {\n      output.writeFieldBegin('path_in_schema', thrift.Thrift.Type.LIST, 3);\n      output.writeListBegin(thrift.Thrift.Type.STRING, this.path_in_schema.length);\n      this.path_in_schema.forEach((value_2: string): void => {\n        output.writeString(value_2);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.codec != null) {\n      output.writeFieldBegin('codec', thrift.Thrift.Type.I32, 4);\n      output.writeI32(this.codec);\n      output.writeFieldEnd();\n    }\n    if (this.num_values != null) {\n      output.writeFieldBegin('num_values', thrift.Thrift.Type.I64, 5);\n      output.writeI64(this.num_values);\n      output.writeFieldEnd();\n    }\n    if (this.total_uncompressed_size != null) {\n      output.writeFieldBegin('total_uncompressed_size', thrift.Thrift.Type.I64, 6);\n      output.writeI64(this.total_uncompressed_size);\n      output.writeFieldEnd();\n    }\n    if (this.total_compressed_size != null) {\n      output.writeFieldBegin('total_compressed_size', thrift.Thrift.Type.I64, 7);\n      output.writeI64(this.total_compressed_size);\n      output.writeFieldEnd();\n    }\n    if (this.key_value_metadata != null) {\n      output.writeFieldBegin('key_value_metadata', thrift.Thrift.Type.LIST, 8);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.key_value_metadata.length);\n      this.key_value_metadata.forEach((value_3: KeyValue.KeyValue): void => {\n        value_3.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.data_page_offset != null) {\n      output.writeFieldBegin('data_page_offset', thrift.Thrift.Type.I64, 9);\n      output.writeI64(this.data_page_offset);\n      output.writeFieldEnd();\n    }\n    if (this.index_page_offset != null) {\n      output.writeFieldBegin('index_page_offset', thrift.Thrift.Type.I64, 10);\n      output.writeI64(this.index_page_offset);\n      output.writeFieldEnd();\n    }\n    if (this.dictionary_page_offset != null) {\n      output.writeFieldBegin('dictionary_page_offset', thrift.Thrift.Type.I64, 11);\n      output.writeI64(this.dictionary_page_offset);\n      output.writeFieldEnd();\n    }\n    if (this.statistics != null) {\n      output.writeFieldBegin('statistics', thrift.Thrift.Type.STRUCT, 12);\n      this.statistics.write(output);\n      output.writeFieldEnd();\n    }\n    if (this.encoding_stats != null) {\n      output.writeFieldBegin('encoding_stats', thrift.Thrift.Type.LIST, 13);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.encoding_stats.length);\n      this.encoding_stats.forEach((value_4: PageEncodingStats.PageEncodingStats): void => {\n        value_4.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): ColumnMetaData {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_5: Type.Type = input.readI32();\n            _args.type = value_5;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_6: Array<Encoding.Encoding> = new Array<Encoding.Encoding>();\n            const metadata_1: thrift.TList = input.readListBegin();\n            const size_1: number = metadata_1.size;\n            for (let i_1: number = 0; i_1 < size_1; i_1++) {\n              const value_7: Encoding.Encoding = input.readI32();\n              value_6.push(value_7);\n            }\n            input.readListEnd();\n            _args.encodings = value_6;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_8: Array<string> = new Array<string>();\n            const metadata_2: thrift.TList = input.readListBegin();\n            const size_2: number = metadata_2.size;\n            for (let i_2: number = 0; i_2 < size_2; i_2++) {\n              const value_9: string = input.readString();\n              value_8.push(value_9);\n            }\n            input.readListEnd();\n            _args.path_in_schema = value_8;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_10: CompressionCodec.CompressionCodec = input.readI32();\n            _args.codec = value_10;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 5:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_11: Int64 = input.readI64();\n            _args.num_values = value_11;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 6:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_12: Int64 = input.readI64();\n            _args.total_uncompressed_size = value_12;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 7:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_13: Int64 = input.readI64();\n            _args.total_compressed_size = value_13;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 8:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_14: Array<KeyValue.KeyValue> = new Array<KeyValue.KeyValue>();\n            const metadata_3: thrift.TList = input.readListBegin();\n            const size_3: number = metadata_3.size;\n            for (let i_3: number = 0; i_3 < size_3; i_3++) {\n              const value_15: KeyValue.KeyValue = KeyValue.KeyValue.read(input);\n              value_14.push(value_15);\n            }\n            input.readListEnd();\n            _args.key_value_metadata = value_14;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 9:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_16: Int64 = input.readI64();\n            _args.data_page_offset = value_16;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 10:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_17: Int64 = input.readI64();\n            _args.index_page_offset = value_17;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 11:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_18: Int64 = input.readI64();\n            _args.dictionary_page_offset = value_18;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 12:\n          if (fieldType === thrift.Thrift.Type.STRUCT) {\n            const value_19: Statistics.Statistics = Statistics.Statistics.read(input);\n            _args.statistics = value_19;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 13:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_20: Array<PageEncodingStats.PageEncodingStats> =\n              new Array<PageEncodingStats.PageEncodingStats>();\n            const metadata_4: thrift.TList = input.readListBegin();\n            const size_4: number = metadata_4.size;\n            for (let i_4: number = 0; i_4 < size_4; i_4++) {\n              const value_21: PageEncodingStats.PageEncodingStats =\n                PageEncodingStats.PageEncodingStats.read(input);\n              value_20.push(value_21);\n            }\n            input.readListEnd();\n            _args.encoding_stats = value_20;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (\n      _args.type !== undefined &&\n      _args.encodings !== undefined &&\n      _args.path_in_schema !== undefined &&\n      _args.codec !== undefined &&\n      _args.num_values !== undefined &&\n      _args.total_uncompressed_size !== undefined &&\n      _args.total_compressed_size !== undefined &&\n      _args.data_page_offset !== undefined\n    ) {\n      return new ColumnMetaData(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read ColumnMetaData from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}