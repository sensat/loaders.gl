{"version":3,"file":"FileMetaData.js","names":["_nodeInt","_interopRequireDefault","require","thrift","_interopRequireWildcard","ColumnOrder","KeyValue","RowGroup","SchemaElement","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","FileMetaData","args","arguments","length","undefined","_classCallCheck2","_defineProperty2","version","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","schema","num_rows","Int64","row_groups","key_value_metadata","created_by","column_orders","_createClass2","value","write","output","writeStructBegin","writeFieldBegin","Type","I32","writeI32","writeFieldEnd","LIST","writeListBegin","STRUCT","forEach","value_1","writeListEnd","I64","writeI64","value_2","value_3","STRING","writeString","value_4","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_5","readI32","skip","value_6","Array","metadata_1","readListBegin","size_1","size","i_1","value_7","push","readListEnd","value_8","readI64","value_9","metadata_2","size_2","i_2","value_10","value_11","metadata_3","size_3","i_3","value_12","value_13","readString","value_14","metadata_4","size_4","i_4","value_15","readFieldEnd","readStructEnd","exports"],"sources":["../../../../src/parquetjs/parquet-thrift/FileMetaData.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport Int64 from 'node-int64';\nimport * as thrift from 'thrift';\nimport * as ColumnOrder from './ColumnOrder';\nimport * as KeyValue from './KeyValue';\nimport * as RowGroup from './RowGroup';\nimport * as SchemaElement from './SchemaElement';\nexport interface IFileMetaDataArgs {\n  version: number;\n  schema: Array<SchemaElement.SchemaElement>;\n  num_rows: number | Int64;\n  row_groups: Array<RowGroup.RowGroup>;\n  key_value_metadata?: Array<KeyValue.KeyValue>;\n  created_by?: string;\n  column_orders?: Array<ColumnOrder.ColumnOrder>;\n}\nexport class FileMetaData {\n  public version: number;\n  public schema: Array<SchemaElement.SchemaElement>;\n  public num_rows: Int64;\n  public row_groups: Array<RowGroup.RowGroup>;\n  public key_value_metadata?: Array<KeyValue.KeyValue>;\n  public created_by?: string;\n  public column_orders?: Array<ColumnOrder.ColumnOrder>;\n  constructor(args: IFileMetaDataArgs | null = null) {\n    if (args != null && args.version != null) {\n      this.version = args.version;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[version] is unset!'\n      );\n    }\n    if (args != null && args.schema != null) {\n      this.schema = args.schema;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[schema] is unset!'\n      );\n    }\n    if (args != null && args.num_rows != null) {\n      if (typeof args.num_rows === 'number') {\n        this.num_rows = new Int64(args.num_rows);\n      } else {\n        this.num_rows = args.num_rows;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[num_rows] is unset!'\n      );\n    }\n    if (args != null && args.row_groups != null) {\n      this.row_groups = args.row_groups;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[row_groups] is unset!'\n      );\n    }\n    if (args != null && args.key_value_metadata != null) {\n      this.key_value_metadata = args.key_value_metadata;\n    }\n    if (args != null && args.created_by != null) {\n      this.created_by = args.created_by;\n    }\n    if (args != null && args.column_orders != null) {\n      this.column_orders = args.column_orders;\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('FileMetaData');\n    if (this.version != null) {\n      output.writeFieldBegin('version', thrift.Thrift.Type.I32, 1);\n      output.writeI32(this.version);\n      output.writeFieldEnd();\n    }\n    if (this.schema != null) {\n      output.writeFieldBegin('schema', thrift.Thrift.Type.LIST, 2);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.schema.length);\n      this.schema.forEach((value_1: SchemaElement.SchemaElement): void => {\n        value_1.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.num_rows != null) {\n      output.writeFieldBegin('num_rows', thrift.Thrift.Type.I64, 3);\n      output.writeI64(this.num_rows);\n      output.writeFieldEnd();\n    }\n    if (this.row_groups != null) {\n      output.writeFieldBegin('row_groups', thrift.Thrift.Type.LIST, 4);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.row_groups.length);\n      this.row_groups.forEach((value_2: RowGroup.RowGroup): void => {\n        value_2.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.key_value_metadata != null) {\n      output.writeFieldBegin('key_value_metadata', thrift.Thrift.Type.LIST, 5);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.key_value_metadata.length);\n      this.key_value_metadata.forEach((value_3: KeyValue.KeyValue): void => {\n        value_3.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.created_by != null) {\n      output.writeFieldBegin('created_by', thrift.Thrift.Type.STRING, 6);\n      output.writeString(this.created_by);\n      output.writeFieldEnd();\n    }\n    if (this.column_orders != null) {\n      output.writeFieldBegin('column_orders', thrift.Thrift.Type.LIST, 7);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.column_orders.length);\n      this.column_orders.forEach((value_4: ColumnOrder.ColumnOrder): void => {\n        value_4.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): FileMetaData {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.I32) {\n            const value_5: number = input.readI32();\n            _args.version = value_5;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_6: Array<SchemaElement.SchemaElement> =\n              new Array<SchemaElement.SchemaElement>();\n            const metadata_1: thrift.TList = input.readListBegin();\n            const size_1: number = metadata_1.size;\n            for (let i_1: number = 0; i_1 < size_1; i_1++) {\n              const value_7: SchemaElement.SchemaElement = SchemaElement.SchemaElement.read(input);\n              value_6.push(value_7);\n            }\n            input.readListEnd();\n            _args.schema = value_6;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_8: Int64 = input.readI64();\n            _args.num_rows = value_8;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_9: Array<RowGroup.RowGroup> = new Array<RowGroup.RowGroup>();\n            const metadata_2: thrift.TList = input.readListBegin();\n            const size_2: number = metadata_2.size;\n            for (let i_2: number = 0; i_2 < size_2; i_2++) {\n              const value_10: RowGroup.RowGroup = RowGroup.RowGroup.read(input);\n              value_9.push(value_10);\n            }\n            input.readListEnd();\n            _args.row_groups = value_9;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 5:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_11: Array<KeyValue.KeyValue> = new Array<KeyValue.KeyValue>();\n            const metadata_3: thrift.TList = input.readListBegin();\n            const size_3: number = metadata_3.size;\n            for (let i_3: number = 0; i_3 < size_3; i_3++) {\n              const value_12: KeyValue.KeyValue = KeyValue.KeyValue.read(input);\n              value_11.push(value_12);\n            }\n            input.readListEnd();\n            _args.key_value_metadata = value_11;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 6:\n          if (fieldType === thrift.Thrift.Type.STRING) {\n            const value_13: string = input.readString();\n            _args.created_by = value_13;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 7:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_14: Array<ColumnOrder.ColumnOrder> = new Array<ColumnOrder.ColumnOrder>();\n            const metadata_4: thrift.TList = input.readListBegin();\n            const size_4: number = metadata_4.size;\n            for (let i_4: number = 0; i_4 < size_4; i_4++) {\n              const value_15: ColumnOrder.ColumnOrder = ColumnOrder.ColumnOrder.read(input);\n              value_14.push(value_15);\n            }\n            input.readListEnd();\n            _args.column_orders = value_14;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (\n      _args.version !== undefined &&\n      _args.schema !== undefined &&\n      _args.num_rows !== undefined &&\n      _args.row_groups !== undefined\n    ) {\n      return new FileMetaData(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read FileMetaData from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}