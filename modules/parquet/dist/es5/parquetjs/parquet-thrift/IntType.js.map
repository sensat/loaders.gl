{"version":3,"file":"IntType.js","names":["thrift","_interopRequireWildcard","require","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","IntType","args","_classCallCheck2","_defineProperty2","bitWidth","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","isSigned","_createClass2","value","write","output","writeStructBegin","writeFieldBegin","Type","BYTE","writeByte","writeFieldEnd","BOOL","writeBool","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_1","readByte","skip","value_2","readBool","readFieldEnd","readStructEnd","undefined","exports"],"sources":["../../../../src/parquetjs/parquet-thrift/IntType.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport * as thrift from 'thrift';\nexport interface IIntTypeArgs {\n  bitWidth: number;\n  isSigned: boolean;\n}\nexport class IntType {\n  public bitWidth: number;\n  public isSigned: boolean;\n  constructor(args: IIntTypeArgs) {\n    if (args != null && args.bitWidth != null) {\n      this.bitWidth = args.bitWidth;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[bitWidth] is unset!'\n      );\n    }\n    if (args != null && args.isSigned != null) {\n      this.isSigned = args.isSigned;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[isSigned] is unset!'\n      );\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('IntType');\n    if (this.bitWidth != null) {\n      output.writeFieldBegin('bitWidth', thrift.Thrift.Type.BYTE, 1);\n      output.writeByte(this.bitWidth);\n      output.writeFieldEnd();\n    }\n    if (this.isSigned != null) {\n      output.writeFieldBegin('isSigned', thrift.Thrift.Type.BOOL, 2);\n      output.writeBool(this.isSigned);\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): IntType {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.BYTE) {\n            const value_1: number = input.readByte();\n            _args.bitWidth = value_1;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.BOOL) {\n            const value_2: boolean = input.readBool();\n            _args.isSigned = value_2;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (_args.bitWidth !== undefined && _args.isSigned !== undefined) {\n      return new IntType(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read IntType from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}