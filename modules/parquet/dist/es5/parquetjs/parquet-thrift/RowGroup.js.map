{"version":3,"file":"RowGroup.js","names":["_nodeInt","_interopRequireDefault","require","thrift","_interopRequireWildcard","ColumnChunk","SortingColumn","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","RowGroup","args","_classCallCheck2","_defineProperty2","columns","Thrift","TProtocolException","TProtocolExceptionType","UNKNOWN","total_byte_size","Int64","num_rows","sorting_columns","_createClass2","value","write","output","writeStructBegin","writeFieldBegin","Type","LIST","writeListBegin","STRUCT","length","forEach","value_1","writeListEnd","writeFieldEnd","I64","writeI64","value_2","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_3","Array","metadata_1","readListBegin","size_1","size","i_1","value_4","push","readListEnd","skip","value_5","readI64","value_6","value_7","metadata_2","size_2","i_2","value_8","readFieldEnd","readStructEnd","undefined","exports"],"sources":["../../../../src/parquetjs/parquet-thrift/RowGroup.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport Int64 from 'node-int64';\nimport * as thrift from 'thrift';\nimport * as ColumnChunk from './ColumnChunk';\nimport * as SortingColumn from './SortingColumn';\nexport interface IRowGroupArgs {\n  columns: Array<ColumnChunk.ColumnChunk>;\n  total_byte_size: number | Int64;\n  num_rows: number | Int64;\n  sorting_columns?: Array<SortingColumn.SortingColumn>;\n}\nexport class RowGroup {\n  public columns: Array<ColumnChunk.ColumnChunk>;\n  public total_byte_size: Int64;\n  public num_rows: Int64;\n  public sorting_columns?: Array<SortingColumn.SortingColumn>;\n  constructor(args: IRowGroupArgs) {\n    if (args != null && args.columns != null) {\n      this.columns = args.columns;\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[columns] is unset!'\n      );\n    }\n    if (args != null && args.total_byte_size != null) {\n      if (typeof args.total_byte_size === 'number') {\n        this.total_byte_size = new Int64(args.total_byte_size);\n      } else {\n        this.total_byte_size = args.total_byte_size;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[total_byte_size] is unset!'\n      );\n    }\n    if (args != null && args.num_rows != null) {\n      if (typeof args.num_rows === 'number') {\n        this.num_rows = new Int64(args.num_rows);\n      } else {\n        this.num_rows = args.num_rows;\n      }\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Required field[num_rows] is unset!'\n      );\n    }\n    if (args != null && args.sorting_columns != null) {\n      this.sorting_columns = args.sorting_columns;\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('RowGroup');\n    if (this.columns != null) {\n      output.writeFieldBegin('columns', thrift.Thrift.Type.LIST, 1);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.columns.length);\n      this.columns.forEach((value_1: ColumnChunk.ColumnChunk): void => {\n        value_1.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    if (this.total_byte_size != null) {\n      output.writeFieldBegin('total_byte_size', thrift.Thrift.Type.I64, 2);\n      output.writeI64(this.total_byte_size);\n      output.writeFieldEnd();\n    }\n    if (this.num_rows != null) {\n      output.writeFieldBegin('num_rows', thrift.Thrift.Type.I64, 3);\n      output.writeI64(this.num_rows);\n      output.writeFieldEnd();\n    }\n    if (this.sorting_columns != null) {\n      output.writeFieldBegin('sorting_columns', thrift.Thrift.Type.LIST, 4);\n      output.writeListBegin(thrift.Thrift.Type.STRUCT, this.sorting_columns.length);\n      this.sorting_columns.forEach((value_2: SortingColumn.SortingColumn): void => {\n        value_2.write(output);\n      });\n      output.writeListEnd();\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): RowGroup {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_3: Array<ColumnChunk.ColumnChunk> = new Array<ColumnChunk.ColumnChunk>();\n            const metadata_1: thrift.TList = input.readListBegin();\n            const size_1: number = metadata_1.size;\n            for (let i_1: number = 0; i_1 < size_1; i_1++) {\n              const value_4: ColumnChunk.ColumnChunk = ColumnChunk.ColumnChunk.read(input);\n              value_3.push(value_4);\n            }\n            input.readListEnd();\n            _args.columns = value_3;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_5: Int64 = input.readI64();\n            _args.total_byte_size = value_5;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_6: Int64 = input.readI64();\n            _args.num_rows = value_6;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.LIST) {\n            const value_7: Array<SortingColumn.SortingColumn> =\n              new Array<SortingColumn.SortingColumn>();\n            const metadata_2: thrift.TList = input.readListBegin();\n            const size_2: number = metadata_2.size;\n            for (let i_2: number = 0; i_2 < size_2; i_2++) {\n              const value_8: SortingColumn.SortingColumn = SortingColumn.SortingColumn.read(input);\n              value_7.push(value_8);\n            }\n            input.readListEnd();\n            _args.sorting_columns = value_7;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    if (\n      _args.columns !== undefined &&\n      _args.total_byte_size !== undefined &&\n      _args.num_rows !== undefined\n    ) {\n      return new RowGroup(_args);\n    } else {\n      throw new thrift.Thrift.TProtocolException(\n        thrift.Thrift.TProtocolExceptionType.UNKNOWN,\n        'Unable to read RowGroup from input'\n      );\n    }\n  }\n}\n"],"mappings":"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"}