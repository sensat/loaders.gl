{"version":3,"file":"Statistics.js","names":["_nodeInt","_interopRequireDefault","require","thrift","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","_typeof","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","Statistics","args","_classCallCheck2","_defineProperty2","max","min","null_count","Int64","distinct_count","max_value","min_value","_createClass2","value","write","output","writeStructBegin","writeFieldBegin","Thrift","Type","STRING","writeBinary","writeFieldEnd","I64","writeI64","writeFieldStop","writeStructEnd","read","input","readStructBegin","_args","ret","readFieldBegin","fieldType","ftype","fieldId","fid","STOP","value_1","readBinary","skip","value_2","value_3","readI64","value_4","value_5","value_6","readFieldEnd","readStructEnd","exports"],"sources":["../../../../src/parquetjs/parquet-thrift/Statistics.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/*\n * Autogenerated by @creditkarma/thrift-typescript v3.7.2\n * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING\n */\nimport Int64 from 'node-int64';\nimport * as thrift from 'thrift';\nexport interface IStatisticsArgs {\n  max?: Buffer;\n  min?: Buffer;\n  null_count?: number | Int64;\n  distinct_count?: number | Int64;\n  max_value?: Buffer;\n  min_value?: Buffer;\n}\nexport class Statistics {\n  public max?: Buffer;\n  public min?: Buffer;\n  public null_count?: Int64;\n  public distinct_count?: Int64;\n  public max_value?: Buffer;\n  public min_value?: Buffer;\n  constructor(args?: IStatisticsArgs) {\n    if (args != null && args.max != null) {\n      this.max = args.max;\n    }\n    if (args != null && args.min != null) {\n      this.min = args.min;\n    }\n    if (args != null && args.null_count != null) {\n      if (typeof args.null_count === 'number') {\n        this.null_count = new Int64(args.null_count);\n      } else {\n        this.null_count = args.null_count;\n      }\n    }\n    if (args != null && args.distinct_count != null) {\n      if (typeof args.distinct_count === 'number') {\n        this.distinct_count = new Int64(args.distinct_count);\n      } else {\n        this.distinct_count = args.distinct_count;\n      }\n    }\n    if (args != null && args.max_value != null) {\n      this.max_value = args.max_value;\n    }\n    if (args != null && args.min_value != null) {\n      this.min_value = args.min_value;\n    }\n  }\n  public write(output: thrift.TProtocol): void {\n    output.writeStructBegin('Statistics');\n    if (this.max != null) {\n      output.writeFieldBegin('max', thrift.Thrift.Type.STRING, 1);\n      output.writeBinary(this.max);\n      output.writeFieldEnd();\n    }\n    if (this.min != null) {\n      output.writeFieldBegin('min', thrift.Thrift.Type.STRING, 2);\n      output.writeBinary(this.min);\n      output.writeFieldEnd();\n    }\n    if (this.null_count != null) {\n      output.writeFieldBegin('null_count', thrift.Thrift.Type.I64, 3);\n      output.writeI64(this.null_count);\n      output.writeFieldEnd();\n    }\n    if (this.distinct_count != null) {\n      output.writeFieldBegin('distinct_count', thrift.Thrift.Type.I64, 4);\n      output.writeI64(this.distinct_count);\n      output.writeFieldEnd();\n    }\n    if (this.max_value != null) {\n      output.writeFieldBegin('max_value', thrift.Thrift.Type.STRING, 5);\n      output.writeBinary(this.max_value);\n      output.writeFieldEnd();\n    }\n    if (this.min_value != null) {\n      output.writeFieldBegin('min_value', thrift.Thrift.Type.STRING, 6);\n      output.writeBinary(this.min_value);\n      output.writeFieldEnd();\n    }\n    output.writeFieldStop();\n    output.writeStructEnd();\n    return;\n  }\n  public static read(input: thrift.TProtocol): Statistics {\n    input.readStructBegin();\n    let _args: any = {};\n    while (true) {\n      const ret: thrift.TField = input.readFieldBegin();\n      const fieldType: thrift.Thrift.Type = ret.ftype;\n      const fieldId: number = ret.fid;\n      if (fieldType === thrift.Thrift.Type.STOP) {\n        break;\n      }\n      switch (fieldId) {\n        case 1:\n          if (fieldType === thrift.Thrift.Type.STRING) {\n            const value_1: Buffer = input.readBinary();\n            _args.max = value_1;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 2:\n          if (fieldType === thrift.Thrift.Type.STRING) {\n            const value_2: Buffer = input.readBinary();\n            _args.min = value_2;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 3:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_3: Int64 = input.readI64();\n            _args.null_count = value_3;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 4:\n          if (fieldType === thrift.Thrift.Type.I64) {\n            const value_4: Int64 = input.readI64();\n            _args.distinct_count = value_4;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 5:\n          if (fieldType === thrift.Thrift.Type.STRING) {\n            const value_5: Buffer = input.readBinary();\n            _args.max_value = value_5;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        case 6:\n          if (fieldType === thrift.Thrift.Type.STRING) {\n            const value_6: Buffer = input.readBinary();\n            _args.min_value = value_6;\n          } else {\n            input.skip(fieldType);\n          }\n          break;\n        default: {\n          input.skip(fieldType);\n        }\n      }\n      input.readFieldEnd();\n    }\n    input.readStructEnd();\n    return new Statistics(_args);\n  }\n}\n"],"mappings":"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"}