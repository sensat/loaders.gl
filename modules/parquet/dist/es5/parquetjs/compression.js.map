{"version":3,"file":"compression.js","names":["_compression","require","_lz4js","_interopRequireDefault","toBuffer","arrayBuffer","Buffer","from","toArrayBuffer","buffer","isBuffer","typedArray","Uint8Array","byteOffset","length","slice","modules","lz4js","PARQUET_COMPRESSION_METHODS","UNCOMPRESSED","NoCompression","GZIP","GZipCompression","SNAPPY","SnappyCompression","BROTLI","BrotliCompression","LZ4","LZ4Compression","LZ4_RAW","ZSTD","ZstdCompression","exports","preloadCompressions","_x","_preloadCompressions","apply","arguments","_asyncToGenerator2","default","_regenerator","mark","_callee","options","compressions","wrap","_callee$","_context","prev","next","Object","values","Promise","all","map","compression","preload","abrupt","sent","stop","deflate","_x2","_x3","_deflate","_callee2","method","value","inputArrayBuffer","compressedArrayBuffer","_callee2$","_context2","Error","concat","compress","decompress","_x4","_x5","_x6","_decompress","_callee3","size","_callee3$","_context3","inflate"],"sources":["../../../src/parquetjs/compression.ts"],"sourcesContent":["// Forked from https://github.com/kbajalc/parquets under MIT license (Copyright (c) 2017 ironSource Ltd.)\n/* eslint-disable camelcase */\n// Forked from https://github.com/ironSource/parquetjs under MIT license\n\nimport {\n  Compression,\n  NoCompression,\n  GZipCompression,\n  SnappyCompression,\n  BrotliCompression,\n  // LZOCompression,\n  LZ4Compression,\n  ZstdCompression\n} from '@loaders.gl/compression';\n\nimport {ParquetCompression} from './schema/declare';\n\n/** We can't use loaders-util buffer handling since we are dependent on buffers even in the browser */\nfunction toBuffer(arrayBuffer: ArrayBuffer): Buffer {\n  return Buffer.from(arrayBuffer);\n}\n\nfunction toArrayBuffer(buffer: Buffer): ArrayBuffer {\n  // TODO - per docs we should just be able to call buffer.buffer, but there are issues\n  if (Buffer.isBuffer(buffer)) {\n    const typedArray = new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.length);\n    return typedArray.slice().buffer;\n  }\n  return buffer;\n}\n\n// TODO switch to worker compression to avoid bundling...\n\n// import brotli from 'brotli'; - brotli has problems with decompress in browsers\n// import brotliDecompress from 'brotli/decompress';\nimport lz4js from 'lz4js';\n// import lzo from 'lzo';\n// import {ZstdCodec} from 'zstd-codec';\n\n// Inject large dependencies through Compression constructor options\nconst modules = {\n  // brotli has problems with decompress in browsers\n  // brotli: {\n  //   decompress: brotliDecompress,\n  //   compress: () => {\n  //     throw new Error('brotli compress');\n  //   }\n  // },\n  lz4js\n  // lzo\n  // 'zstd-codec': ZstdCodec\n};\n\n/**\n * See https://github.com/apache/parquet-format/blob/master/Compression.md\n */\n// @ts-expect-error\nexport const PARQUET_COMPRESSION_METHODS: Record<ParquetCompression, Compression> = {\n  UNCOMPRESSED: new NoCompression(),\n  GZIP: new GZipCompression(),\n  SNAPPY: new SnappyCompression(),\n  BROTLI: new BrotliCompression({modules}),\n  // TODO: Understand difference between LZ4 and LZ4_RAW\n  LZ4: new LZ4Compression({modules}),\n  LZ4_RAW: new LZ4Compression({modules}),\n  //\n  // LZO: new LZOCompression({modules}),\n  ZSTD: new ZstdCompression({modules})\n};\n\n/**\n * Register compressions that have big external libraries\n * @param options.modules External library dependencies\n */\nexport async function preloadCompressions(options?: {modules: {[key: string]: any}}) {\n  const compressions = Object.values(PARQUET_COMPRESSION_METHODS);\n  return await Promise.all(compressions.map((compression) => compression.preload()));\n}\n\n/**\n * Deflate a value using compression method `method`\n */\nexport async function deflate(method: ParquetCompression, value: Buffer): Promise<Buffer> {\n  const compression = PARQUET_COMPRESSION_METHODS[method];\n  if (!compression) {\n    throw new Error(`parquet: invalid compression method: ${method}`);\n  }\n  const inputArrayBuffer = toArrayBuffer(value);\n  const compressedArrayBuffer = await compression.compress(inputArrayBuffer);\n  return toBuffer(compressedArrayBuffer);\n}\n\n/**\n * Inflate a value using compression method `method`\n */\nexport async function decompress(\n  method: ParquetCompression,\n  value: Buffer,\n  size: number\n): Promise<Buffer> {\n  const compression = PARQUET_COMPRESSION_METHODS[method];\n  if (!compression) {\n    throw new Error(`parquet: invalid compression method: ${method}`);\n  }\n  const inputArrayBuffer = toArrayBuffer(value);\n  const compressedArrayBuffer = await compression.decompress(inputArrayBuffer, size);\n  return toBuffer(compressedArrayBuffer);\n}\n\n/*\n * Inflate a value using compression method `method`\n */\nexport function inflate(method: ParquetCompression, value: Buffer, size: number): Buffer {\n  if (!(method in PARQUET_COMPRESSION_METHODS)) {\n    throw new Error(`invalid compression method: ${method}`);\n  }\n  // @ts-ignore\n  return PARQUET_COMPRESSION_METHODS[method].inflate(value, size);\n}\n\n/*\nfunction deflate_identity(value: Buffer): Buffer {\n  return value;\n}\n\nfunction deflate_gzip(value: Buffer): Buffer {\n  return zlib.gzipSync(value);\n}\n\nfunction deflate_snappy(value: Buffer): Buffer {\n  return snappyjs.compress(value);\n}\n\nfunction deflate_lzo(value: Buffer): Buffer {\n  lzo = lzo || Util.load('lzo');\n  return lzo.compress(value);\n}\n\nfunction deflate_brotli(value: Buffer): Buffer {\n  brotli = brotli || Util.load('brotli');\n  const result = brotli.compress(value, {\n    mode: 0,\n    quality: 8,\n    lgwin: 22\n  });\n  return result ? Buffer.from(result) : Buffer.alloc(0);\n}\n\nfunction deflate_lz4(value: Buffer): Buffer {\n  lz4js = lz4js || Util.load('lz4js');\n  try {\n    // let result = Buffer.alloc(lz4js.encodeBound(value.length));\n    // const compressedSize = lz4.encodeBlock(value, result);\n    // // remove unnecessary bytes\n    // result = result.slice(0, compressedSize);\n    // return result;\n    return Buffer.from(lz4js.compress(value));\n  } catch (err) {\n    throw err;\n  }\n}\nfunction inflate_identity(value: Buffer): Buffer {\n  return value;\n}\n\nfunction inflate_gzip(value: Buffer): Buffer {\n  return zlib.gunzipSync(value);\n}\n\nfunction inflate_snappy(value: Buffer): Buffer {\n  return snappyjs.uncompress(value);\n}\n\nfunction inflate_lzo(value: Buffer, size: number): Buffer {\n  lzo = lzo || Util.load('lzo');\n  return lzo.decompress(value, size);\n}\n\nfunction inflate_lz4(value: Buffer, size: number): Buffer {\n  lz4js = lz4js || Util.load('lz4js');\n  try {\n    // let result = Buffer.alloc(size);\n    // const uncompressedSize = lz4js.decodeBlock(value, result);\n    // // remove unnecessary bytes\n    // result = result.slice(0, uncompressedSize);\n    // return result;\n    return Buffer.from(lz4js.decompress(value, size));\n  } catch (err) {\n    throw err;\n  }\n}\n\nfunction inflate_brotli(value: Buffer): Buffer {\n  brotli = brotli || Util.load('brotli');\n  if (!value.length) {\n    return Buffer.alloc(0);\n  }\n  return Buffer.from(brotli.decompress(value));\n}\n*/\n"],"mappings":"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"}